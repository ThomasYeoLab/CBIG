diff --git a/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/CBIG_preproc_FCmetrics_wrapper.csh b/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/CBIG_preproc_FCmetrics_wrapper.csh
index e4303ec..b866074 100755
--- a/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/CBIG_preproc_FCmetrics_wrapper.csh
+++ b/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/CBIG_preproc_FCmetrics_wrapper.csh
@@ -22,14 +22,23 @@ set VERSION = '$Id: CBIG_preproc_FCmetrics_wrapper.csh, v 1.0 2017/10/14 $'
 
 set n = `echo $argv | grep -e -help | wc -l`
 
-# if there is no arguments or there is -help option 
-if( $#argv == 0 || $n != 0 ) then
+# if there is -help option 
+if( $n != 0 ) then
 	echo $VERSION
 	# print help	
 	cat $0 | awk 'BEGIN{prt=0}{if(prt) print $0; if($1 == "BEGINHELP") prt = 1 }'
 	exit 0;
 endif
 
+# if there is no arguments
+if( $#argv == 0 ) then
+	echo $VERSION
+	# print help	
+	cat $0 | awk 'BEGIN{prt=0}{if(prt) print $0; if($1 == "BEGINHELP") prt = 1 }'
+	echo "WARNING: No input arguments. See above for a list of available input arguments."
+	exit 0;
+endif
+
 
 set n = `echo $argv | grep -e -version | wc -l`
 if($n != 0) then
@@ -149,14 +158,14 @@ else
 	echo "[FC metrics]: $subcortex_func_vol already exists." |& tee -a $LF
 endif
 
-echo "======================= Extracting 19 subcortical labels from aseg in functional space finished ======================" \
+echo "=================== Extracting 19 subcortical labels from aseg in functional space finished ==================" \
 |& tee -a $LF
 
 
 ################################################
 # Generate input lists for matlab function
 ################################################
-echo "=============================== Generate inout lists for matlab function =============================" |& tee -a $LF
+echo "============================= Generate inout lists for matlab function ===========================" |& tee -a $LF
 mkdir -p $FCmetrics_folder/lists
 set lh_surf_data_list = "$FCmetrics_folder/lists/lh.${subject}${surf_stem}_list.txt"
 set rh_surf_data_list = "$FCmetrics_folder/lists/rh.${subject}${surf_stem}_list.txt"
@@ -216,13 +225,13 @@ else
 		exit 1
 	endif
 endif
-echo "=========================== Generate input lists for matlab function finished ========================" |& tee -a $LF
+echo "========================= Generate input lists for matlab function finished ======================" |& tee -a $LF
 
 
 #######################################
 # Compute FC metrics
 #######################################
-echo "========================================== Compute FC metrics ==========================================" |& tee -a $LF
+echo "======================================= Compute FC metrics =======================================" |& tee -a $LF
 if ( $Pearson_r == 1 ) then
 	set output_dir = "$FCmetrics_folder/Pearson_r"
 	set output_prefix = "${subject}${surf_stem}"
@@ -254,7 +263,7 @@ if ( $Pearson_r == 1 ) then
 		endif
 	endif
 endif
-echo "====================================== Compute FC metrics finished =====================================" |& tee -a $LF
+echo "=================================== Compute FC metrics finished ==================================" |& tee -a $LF
 
 
 #########################
@@ -264,7 +273,10 @@ echo "====================================== Compute FC metrics finished =======
 which git
 if (! $status) then
 	echo "=======================Git: Last Commit of Current Function =======================" |& tee -a $LF
-	git -C ${CBIG_CODE_DIR} log -1 -- stable_projects/preprocessing/CBIG_fMRI_Preproc2016/CBIG_preproc_FCmetrics_wrapper.csh >> $LF
+	pushd ${CBIG_CODE_DIR}
+	git log -1 -- ${CBIG_CODE_DIR}/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/\
+CBIG_preproc_FCmetrics_wrapper.csh >> $LF
+	popd
 endif
 
 
@@ -441,8 +453,9 @@ DESCRIPTION:
 		54  Right-Amygdala
 		58  Right-Accumbens-area 
 		60  Right-VentralDC
-	where the numbers are defined by FreeSurfer color table. We choose these 19 subcortical ROIs to be consistent with CIFTI
-	grayordinate format. The final subcortical FC metrics will follow the ascending order of these ROIs (same as this list).
+	where the numbers are defined by FreeSurfer color table. We choose these 19 subcortical ROIs to be consistent with 
+	CIFTI grayordinate format. The final subcortical FC metrics will follow the ascending order of these ROIs 
+	(same as this list).
 	
 	This function does the following three steps:
 		1. Extract the 19 subcortical ROIs from aseg in subject-specific functional space.
@@ -459,41 +472,42 @@ REQUIRED ARGUMENTS:
 	 absolute path to <subject>. All preprocessed data of this subject are assumed to be stored in <sub_dir>/<subject>.
 	 
 	-bld  bold : 
-	 all bold run numbers of this subject. Each number must has three digits. If this subject has multiple runs, use a space 
-	 as delimiter, e.g. '002 003'. NOTE: quote sign is necessary.
+	 all bold run numbers of this subject. Each number must has three digits. If this subject has multiple runs, 
+	 use a space as delimiter, e.g. '002 003'. NOTE: quote sign is necessary.
 	 
 	-BOLD_stem  BOLD_stem :
-	 stem of input volume. This volume is used to extract the subcortical timeseries in subject-specific functional space. 
-	 E.g. if the input file name is Sub0001_Ses1_bld002_rest_skip4_stc_mc_residc_interp_FDRMS0.2_DVARS50_bp_0.009_0.08.nii.gz, 
-	 then <BOLD_stem> = _rest_stc_mc_resid. This input file is assumed to be stored in <sub_dir>/<subject>/bold/<run_number>.
+	 stem of input volume. This volume is used to extract the subcortical timeseries in subject-specific functional 
+	 space. E.g. if the input file name is Sub0001_Ses1_bld002_rest_skip4_stc_mc_residc_interp_FDRMS0.2_DVARS50_bp_
+	 0.009_0.08.nii.gz, then <BOLD_stem> = _rest_stc_mc_resid. This input file is assumed to be stored in <sub_dir>/
+	 <subject>/bold/<run_number>.
 	 
 	-SURF_stem  surf_stem :
-	 stem of input surface. The surfaces files are used to extract the cortical timseries. E.g. if the input file names are 
-	 like: lh(/rh).Sub0001_Ses1_bld002_rest_skip4_stc_mc_residc_interp_FDRMS0.2_DVARS50_bp_0.009_0.08_fs6_sm6.nii.gz,
-	 then <surf_stem> = _rest_skip4_stc_mc_residc_interp_FDRMS0.2_DVARS50_bp_0.009_0.08_fs6_sm6. The surface files are 
-	 assumed to be stored in <sub_dir>/<subject>/surf, and should be in the same space as "lh_cortical_ROIs_file" and
-	 "rh_cortical_ROIs_file" (i.e. if your "surf_stem" is xxx_fs5, your "lh_cortical_ROIs_file" and "rh_cortical_ROIs_file"
-	 need to be in fsaverage5 space as well).
+	 stem of input surface. The surfaces files are used to extract the cortical timseries. E.g. if the input 
+	 file names are: lh(/rh).Sub0001_Ses1_bld002_rest_skip4_stc_mc_residc_interp_FDRMS0.2_DVARS50_bp_0.009_0.08_fs6_\
+	 sm6.nii.gz, then <surf_stem> = _rest_skip4_stc_mc_residc_interp_FDRMS0.2_DVARS50_bp_0.009_0.08_fs6_sm6. 
+	 The surface files are assumed to be stored in <sub_dir>/<subject>/surf, and should be in the same space as 
+	 "lh_cortical_ROIs_file" and "rh_cortical_ROIs_file" (i.e. if your "surf_stem" is xxx_fs5, your 
+	 "lh_cortical_ROIs_file" and "rh_cortical_ROIs_file" need to be in fsaverage5 space as well).
 	 
 	-OUTLIER_stem  outlier_stem : 
-	 outlier text file stem. The number of lines in this file is equal to the total number of frames. Each line is a number 
-	 of 0 or 1 (0-censored, 1-keep). E.g. if the outlier file is Sub0001_Ses1_bld002_FDRMS0.2_DVARS50_motion_outliers.txt, 
-	 then <outlier_stem> = _FDRMS0.2_DVARS50_motion_outliers.txt. The outlier file is assumed to be stored in 
-	 <sub_dir>/<subject>/qc.
+	 outlier text file stem. The number of lines in this file is equal to the total number of frames. Each line is 
+	 a number of 0 or 1 (0-censored, 1-keep). E.g. if the outlier file is Sub0001_Ses1_bld002_FDRMS0.2_DVARS50_motion
+	 _outliers.txt, then <outlier_stem> = _FDRMS0.2_DVARS50_motion_outliers.txt. The outlier file is assumed to be 
+	 stored in <sub_dir>/<subject>/qc.
 	 
 	-Pearson_r :
 	 to compute ROIs to ROIs static Pearson's correlation.
 	                              
 OPTIONAL ARGUMENTS:
 	-lh_cortical_ROIs_file  lh_cortical_ROIs_file : 
-	 The cortical ROIs file of left hemisphere (with absolute path). If the users do not pass in this, the default is to use 
-	 the 400-parcels parcellation of Schaefer et al. 2018:
-	 "$CBIG_CODE_DIR/stable_projects/brain_parcellation/Schaefer2018_LocalGlobal/Parcellations/FreeSurfer5.3/fsaverage6/
-	  label/lh.Schaefer2018_400Parcels_17Networks_order.annot"
+	 The cortical ROIs file of left hemisphere (with absolute path). If the users do not pass in this, 
+	 the default is to use the 400-parcels parcellation of Schaefer et al. 2018:
+	 "$CBIG_CODE_DIR/stable_projects/brain_parcellation/Schaefer2018_LocalGlobal/Parcellations/FreeSurfer5.3/
+	 fsaverage6/label/lh.Schaefer2018_400Parcels_17Networks_order.annot"
 	 
 	-rh_cortical_ROIs_file  rh_cortical_ROIs_file :
-	 The cortical ROIs file of right hemisphere (with absolute path). If the users do not pass in this, the default is to use 
-	 the 400-parcels parcellation of Schaefer et al. 2018:
+	 The cortical ROIs file of right hemisphere (with absolute path). If the users do not pass in this, 
+	 the default is to use the 400-parcels parcellation of Schaefer et al. 2018:
 	 "$CBIG_CODE_DIR/stable_projects/brain_parcellation/Schaefer2018_LocalGlobal/Parcellations/FreeSurfer5.3/fsaverage6/
 	  label/rh.Schaefer2018_400Parcels_17Networks_order.annot"
 	  
diff --git a/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/CBIG_preproc_QC_greyplot.csh b/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/CBIG_preproc_QC_greyplot.csh
index 896c2d5..2fea661 100755
--- a/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/CBIG_preproc_QC_greyplot.csh
+++ b/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/CBIG_preproc_QC_greyplot.csh
@@ -2,20 +2,29 @@
 
 # Create grey plot (plot grey matter timeseries).
 #
-# Written by Jingwei Li and CBIG under MIT license: https://github.com/ThomasYeoLab/CBIG/blob/master/LICENSE.md
+# Written by Jingwei Li, Xingyu Lyu, CBIG under MIT license: https://github.com/ThomasYeoLab/CBIG/blob/master/LICENSE.md
 
 set VERSION = '$Id: CBIG_preproc_QC_greyplot.csh, v 1.0 2016/06/09 $'
 
 set n = `echo $argv | grep -e -help | wc -l`
 
-# if there is no arguments or there is -help option 
-if( $#argv == 0 || $n != 0 ) then
+# if there is -help option 
+if( $n != 0 ) then
 	echo $VERSION
 	# print help	
 	cat $0 | awk 'BEGIN{prt=0}{if(prt) print $0; if($1 == "BEGINHELP") prt = 1 }'
 	exit 0;
 endif
 
+# if there is no arguments
+if( $#argv == 0 ) then
+	echo $VERSION
+	# print help	
+	cat $0 | awk 'BEGIN{prt=0}{if(prt) print $0; if($1 == "BEGINHELP") prt = 1 }'
+	echo "WARNING: No input arguments. See above for a list of available input arguments."
+	exit 0;
+endif
+
 
 set n = `echo $argv | grep -e -version | wc -l`
 if($n != 0) then
@@ -35,6 +44,8 @@ set grey_vox_fac = 200     # a factor used to adjust the height of grey matter t
 set tp_fac = 0.3           # a factor used to adjust the width of grey matter timeseries subplot
 set FD_th = 0.2            # the threshold of FD in censoring
 set DV_th = 50             # the threshold of DV in censoring
+set echo_number = 1	       # number of echos
+set nocleanup = 0          # default clean up intermediate files
 
 goto parse_args;
 parse_args_return:
@@ -177,7 +188,8 @@ if( -e $ROI_regressors_list ) then
 else 
 	set regression_done = 0
 	echo "[Greyplot]: Nuisance regression was not one of previous preprocessing steps." |& tee -a $LF
-	echo "[Greyplot]: Global signal in the plot will be generated based on the volume from last preprocessing step." |& tee -a $LF
+	echo "[Greyplot]: Global signal in the plot will be generated based on the volume from last \
+	preprocessing step." |& tee -a $LF
 endif
 
 
@@ -189,10 +201,14 @@ set wb_mask = "$boldfolder/mask/$subject.brainmask.bin.nii.gz"
 set gm_mask = $boldfolder/mask/$subject.func.gm.nii.gz
 foreach runfolder ($bold)
 	set fmri_file = $boldfolder/$runfolder/${subject}_bld${runfolder}${BOLD_stem}.nii.gz
-	set FD_file = $mc/${subject}_bld${runfolder}${mc_stem}_motion_outliers_FDRMS
-	set DV_file = $mc/${subject}_bld${runfolder}${mc_stem}_motion_outliers_DVARS
+	if ( $echo_number == 1 ) then
+		set FD_file = $mc/${subject}_bld${runfolder}${mc_stem}_motion_outliers_FDRMS
+		set DV_file = $mc/${subject}_bld${runfolder}${mc_stem}_motion_outliers_DVARS
+	else
+		set FD_file = $mc/${subject}_bld${runfolder}_e1${mc_stem}_motion_outliers_FDRMS
+		set DV_file = $mc/${subject}_bld${runfolder}_e1${mc_stem}_motion_outliers_DVARS
+	endif
 	set output = $qc/${subject}_bld${runfolder}${BOLD_stem}_greyplot.png
-	
 	if ( "$regression_done" == 0 ) then
 		set cmd = ( $MATLAB -nodesktop  -nosplash -r '"' 'addpath(genpath('"'"${root_dir}'/utilities'"'"'))'; )
 		set cmd = ($cmd CBIG_preproc_QC_greyplot "'"$fmri_file"'"  "'"$FD_file"'"  "'"$DV_file"'"  "'"$output"'" )  
@@ -209,10 +225,47 @@ foreach runfolder ($bold)
 	echo $cmd |& tee -a $LF
 	eval $cmd |& tee -a $LF
 end
-echo "=========================== Creatting greyplot finished =========================" |& tee -a $LF
+echo "=========================== Creating greyplot finished =========================" |& tee -a $LF
 echo "" |& tee -a $LF
 
-
+###############################
+# call matlab function to plot multiecho QC if multiecho step has already been performed
+###############################
+echo "=========================== Creating Multi-echo QC greyplot begins =========================" |& tee -a $LF
+foreach runfolder ($bold)
+	if ( -e $sub_dir/$subject/qc/${subject}_bold${runfolder}_multi_echo_QC_greyplot.png ) then 
+		echo "Multi-echo QC greyplot already exists in run ${runfolder}." |& tee -a $LF
+	else if ( $echo_number > 1 && ! -e $sub_dir/$subject/qc/${subject}_bold${runfolder}_multi_echo_QC_greyplot.png ) then 
+		set before_MEICA = "$sub_dir/$subject/qc/bld${runfolder}_desc-optcom_bold.nii.gz"
+		set after_MEICA = "$sub_dir/$subject/qc/bld${runfolder}_desc-optcomDenoised_bold.nii.gz"
+		if ( ! -e $before_MEICA ) then 
+			echo "ERROR: Image bld${runfolder}_desc-optcom_bold.nii.gz missing. \
+			Skip creating Multi-echo QC greyplot." |& tee -a $LF
+		else if ( ! -e $after_MEICA ) then 
+			echo "ERROR: Image bld${runfolder}_desc-optcomDenoised_bold.nii.gz missing. \
+			Skip creating Multi-echo QC greyplot." |& tee -a $LF
+		else
+			pushd $boldfolder/mc/
+			set FDpath = `ls -d *motion_outliers_FDRMS`
+			popd
+			set FDpath = "$boldfolder/mc/$FDpath"
+			set cmd = ( $MATLAB -nodesktop  -nosplash -r '"' 'addpath(genpath('"'"${root_dir}'/utilities'"'"'))'; )
+			set cmd = ( $cmd CBIG_preproc_multiecho_QC_greyplot "'"$before_MEICA"'" "'"$after_MEICA"'" )
+			set cmd = ( $cmd "'"$FDpath"'" \
+"'"$sub_dir/$subject/qc/${subject}_bold${runfolder}_multi_echo_QC_greyplot.png"'"; exit; '"')
+			echo $cmd |& tee -a $LF
+			eval $cmd |& tee -a $LF
+			if ( ! -e $sub_dir/$subject/qc/${subject}_bold${runfolder}_multi_echo_QC_greyplot.png ) then
+				echo "ERROR: Creating Multi-echo QC greyplot failed!" |& tee -a $LF
+				exit 1;
+			else if ( $nocleanup == 0 ) then
+				rm $sub_dir/$subject/qc/bld${runfolder}_desc-optcom_bold.nii.gz
+				rm $sub_dir/$subject/qc/bld${runfolder}_desc-optcomDenoised_bold.nii.gz
+			endif
+		endif
+	endif
+end
+echo "=========================== Creating Multi-echo QC greyplot finished =========================" |& tee -a $LF
 
 #########################
 # Output last commit of current function 
@@ -221,7 +274,9 @@ echo "" |& tee -a $LF
 which git
 if (! $status) then
 	echo "=======================Git: Last Commit of Current Function =======================" |& tee -a $LF
-	git -C ${CBIG_CODE_DIR} log -1 -- stable_projects/preprocessing/CBIG_fMRI_Preproc2016/CBIG_preproc_QC_greyplot.csh >> $LF
+	pushd ${CBIG_CODE_DIR}
+	git log -1 -- ${CBIG_CODE_DIR}/table_projects/preprocessing/CBIG_fMRI_Preproc2016/CBIG_preproc_QC_greyplot.csh >> $LF
+	popd
 endif
 
 exit 0;
@@ -297,7 +352,16 @@ while( $#argv != 0 )
 			if ( $#argv == 0 ) goto arg1err;
 			set DV_th = "$argv[1]"; shift;
 			breaksw
-		
+
+		case "-echo_number"
+			if ( $#argv == 0 ) goto arg1err;
+			set echo_number = "$argv[1]"; shift;
+			breaksw
+
+		case "-nocleanup":
+			set nocleanup = 1;
+			breaksw
+
 		default:
 			echo ERROR: Flag $flag unrecognized.
 			echo $cmdline
@@ -307,7 +371,6 @@ while( $#argv != 0 )
 end
 goto parse_args_return;
 
-
 ############################################
 ##======check passed parameters
 ############################################
@@ -351,11 +414,9 @@ if ( "$mc_stem" == "" ) then
 	echo "ERROR: mc stem not specified"
 	exit 1;
 endif
-
 			
 goto check_params_return;
 
-
 #######################################################			
 ##======Error message		
 #######################################################
@@ -384,6 +445,8 @@ DESCRIPTION:
 	This function
 	  1) Create whole brain and grey matter mask, if not exist.
 	  2) Call matlab function to create the greyplot.
+	  3) For multi-echo subject, call matlab function to create the greyplot 
+	     for multi-echo QC purpose.
 	
 	Greyplot contains 4 subplots: (1) framewise displacement trace;
 	(2) DVARS trace; (3) global signal; and (4) grey matter voxels 
@@ -400,7 +463,8 @@ REQUIRED ARGUMENTS:
 	                              three digits. If this subject has multiple runs, use a space 
 	                              as delimiter, e.g. '002 003'. NOTE: quote sign is necessary.
 	-BOLD_stem     BOLD_stem    : stem of input volume. E.g. if the input file name is
-	                              Sub0001_Ses1_bld002_rest_skip4_stc_mc_residc_interp_FDRMS0.2_DVARS50_bp_0.009_0.08.nii.gz,  
+	                              Sub0001_Ses1_bld002_rest_skip4_stc_mc_residc_interp_FDRMS0.\
+								  2_DVARS50_bp_0.009_0.08.nii.gz,  
 	                              then <BOLD_stem> = _rest_skip4_stc_mc_residc_interp_FDRMS0.2_DVARS50_bp_0.009_0.08. 
 	                              This input file is assumed to be stored in 
 	                              <sub_dir>/<subject>/bold/<run_number>.
@@ -428,17 +492,33 @@ OPTIONAL ARGUMENTS:
 	                              Default is 0.2.
 	-DV_th         DV_th        : it is the threshold for DVARS used in detecting censored frames.
 	                              Default is 50.
+	-echo_number   echo_number  : number of echoes of the subject. If it is a multi-echo subject, 
+	                              a greyplot for multi-echo QC will be generate. Default echo_number 
+	                              is set to be 1.
 	-help                       : help
 	-version                    : version
+	-nocleanup                  : do not delete intermediate volumes
 
 OUTPUTS:
 	For each run, the greyplot is saved as
 	<subject_dir>/<subject_id>/qc/<subject>_bld<run_number><BOLD_stem>_greyplot.png
 
+	For multi-echo QC greyplot, it is saved as:
+	<subject_dir>/<subject_id>/qc/<subject>_bold<run_number>_multi_echo_QC_greyplot.png
+
 EXAMPLE:
+	For single-echo case:
 	$CBIG_CODE_DIR/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/CBIG_preproc_QC_greyplot.csh 
 	-s Sub0001_Ses1 -d /storage/FMRI_preprocess -bld '002 003' -BOLD_stem 
 	_rest_skip4_stc_mc_residc_interp_FDRMS0.2_DVARS50_bp_0.009_0.08 -REG_stem _rest_skip4_stc_mc_reg
 	-MC_stem _rest_skip4_stc -grey_vox_fac 200 -tp_fac 0.3
 
+	For multi-echo case:
+	$CBIG_CODE_DIR/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/CBIG_preproc_QC_greyplot.csh 
+	-s sub005 -d /storage/FMRI_preprocess -anat_s sub005 
+	-anat_d /storage/FMRI_preprocess/sub005_T1/ -bld 001 -BOLD_stem 
+	_rest_skip4_stc_mc_sdc_me_residc_interp_FDRMS0.3_DVARS60_bp_0.009_0.08 
+	-REG_stem _rest_skip4_stc_mc_sdc_me_reg -MC_stem _rest_skip4_stc -FD_th 0.3 -DV_th 60
+	-echo_number 3 
+
 
diff --git a/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/CBIG_preproc_ROIs2ROIs_VolAnatDistance.csh b/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/CBIG_preproc_ROIs2ROIs_VolAnatDistance.csh
index a30a0f4..33d8aa4 100755
--- a/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/CBIG_preproc_ROIs2ROIs_VolAnatDistance.csh
+++ b/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/CBIG_preproc_ROIs2ROIs_VolAnatDistance.csh
@@ -15,14 +15,23 @@ set VERSION = '$Id: CBIG_preproc_ROIs2ROIs_VolAnatDistance.csh, v 1.0 2017/10/13
 
 set n = `echo $argv | grep -e -help | wc -l`
 
-# if there is no arguments or there is -help option 
-if( $#argv == 0 || $n != 0 ) then
+# if there is -help option 
+if( $n != 0 ) then
 	echo $VERSION
 	# print help	
 	cat $0 | awk 'BEGIN{prt=0}{if(prt) print $0; if($1 == "BEGINHELP") prt = 1 }'
 	exit 0;
 endif
 
+# if there is no arguments
+if( $#argv == 0 ) then
+	echo $VERSION
+	# print help	
+	cat $0 | awk 'BEGIN{prt=0}{if(prt) print $0; if($1 == "BEGINHELP") prt = 1 }'
+	echo "WARNING: No input arguments. See above for a list of available input arguments."
+	exit 0;
+endif
+
 set n = `echo $argv | grep -e -version | wc -l`
 if($n != 0) then
 	echo $VERSION
@@ -37,7 +46,8 @@ set root_dir = `dirname $root_dir`
 ###############################
 set default_flag = 0
 if ( $default_flag == 0 ) then
-	set cortical_ROIs_file = "$CBIG_CODE_DIR/stable_projects/brain_parcellation/Schaefer2018_LocalGlobal/Parcellations/MNI/"
+	set cortical_ROIs_file = "$CBIG_CODE_DIR/stable_projects/brain_parcellation/Schaefer2018_LocalGlobal/\
+	Parcellations/MNI/"
 	set cortical_ROIs_file = "${cortical_ROIs_file}Schaefer2018_400Parcels_17Networks_order_FSLMNI152_1mm.nii.gz"
 	
 	set subcortical_ROIs_file = "$CBIG_CODE_DIR/data/templates/volume/FSL_MNI152_FS4.5.0/mri/aparc+aseg_182x218x182.nii.gz"
@@ -73,7 +83,8 @@ echo "[ROIs2ROIs VolAnatDistance]: subcortical_ROIs_file = $subcortical_ROIs_fil
 echo "[ROIs2ROIs VolAnatDistance]: output_name = $output_name"
 
 set cmd = ( $MATLAB -nodesktop -nodisplay -nosplash -r '"' 'addpath(genpath('"'"${root_dir}'/utilities'"'"'))'; );
-set cmd = ( $cmd CBIG_preproc_compute_ROIs2ROIs_VolAnatDistance $cortical_ROIs_file $subcortical_ROIs_file $output_name; )
+set cmd = ( $cmd CBIG_preproc_compute_ROIs2ROIs_VolAnatDistance $cortical_ROIs_file \
+$subcortical_ROIs_file $output_name; )
 set cmd = ( $cmd exit; '"' )
 echo $cmd
 eval $cmd
@@ -166,15 +177,17 @@ DESCRIPTION:
 	This function cannot resolve the overlap between cortical ROIs and subcortical ROIs. Pleasse make sure your input ROIs 
 	are not overlapped.
 	
-	Make sure your "cortical_ROIs_file" and "subcortical_ROIs_file" are in the same space and with the same vox2ras matrix. 
-	If both of them are passed in, the code will use the vox2ras matrix of "subcortical_ROIs_file". If the vox2ras matrices of 
-	the two files are not equal, the scripts will throw an error and exit.
+	Make sure your "cortical_ROIs_file" and "subcortical_ROIs_file" are in the same space and with the same 
+	vox2ras matrix. 
+	If both of them are passed in, the code will use the vox2ras matrix of "subcortical_ROIs_file". If the vox2ras 
+	matrices of the two files are not equal, the scripts will throw an error and exit.
 	
 ARGUMENTS:
 	-cortical_ROIs_file     cortical_ROIs_file :
-	 The full name of the cortical parcellation. The default one is the 400-ROIs parcellation of Schaefer et al. 2018 in MNI 
-	 1mm space:
-	 $CBIG_CODE_DIR/Schaefer2018_LocalGlobal/Parcellations/MNI/Schaefer2018_400Parcels_17Networks_order_FSLMNI152_1mm.nii.gz.
+	 The full name of the cortical parcellation. The default one is the 400-ROIs parcellation of Schaefer et al. 2018 
+	 in MNI 1mm space:
+	 $CBIG_CODE_DIR/Schaefer2018_LocalGlobal/Parcellations/MNI/Schaefer2018_400Parcels_17Networks_order_FSLMNI152
+	 _1mm.nii.gz.
 	 If you do not want to include any cortical part, you can use 'NONE'.
 	 
 	-subcortical_ROIs_file  subcortical_ROIs_file :
@@ -183,8 +196,8 @@ ARGUMENTS:
 	 If you do not want to include any subcortical part, you can use 'NONE'.
 	 
 	-output_name            output_name :
-	 The full name of the output distance matrix (matlab .mat file). The output file is a structure called "distance" which 
-	 contains two fields:
+	 The full name of the output distance matrix (matlab .mat file). The output file is a structure called "distance" 
+	 which contains two fields:
 	 (1) "distance.distance" is an M x M distance matrix, where M is the total number of ROIs (cortical + subcortical).
 	 (2) "distance.centroids" is an M x 3 matrix contains the centroids of all ROIs.
 	 The default one is 
@@ -195,14 +208,15 @@ ARGUMENTS:
 	 If you want to use all the default values of "-cortical_ROIs_file" "-subcortical_ROIs_file", and "-output_name", 
 	 you need to use this option.
 	                                                
-	The file in the repo: "$CBIG_CODE_DIR/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/data/ROIs2ROIs_VolAnatDistance/
+	File "$CBIG_CODE_DIR/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/data/ROIs2ROIs_VolAnatDistance/
 	ROIs2ROIs_dist_Schaefer2018_400Parcels_17Networks_order_19aseg_FSLMNI152_1mm.mat" is computed by using 
 	$CBIG_CODE_DIR/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/CBIG_preproc_ROIs2ROIs_VolAnatDistance.csh -default
 	
 EXAMPLE:
 	$CBIG_CODE_DIR/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/CBIG_preproc_ROIs2ROIs_VolAnatDistance.csh 
 	-cortical_ROIs_file
-	"$CBIG_CODE_DIR/Schaefer2018_LocalGlobal/Parcellations/MNI/Schaefer2018_400Parcels_17Networks_order_FSLMNI152_1mm.nii.gz"
+	"$CBIG_CODE_DIR/Schaefer2018_LocalGlobal/Parcellations/MNI/\
+	Schaefer2018_400Parcels_17Networks_order_FSLMNI152_1mm.nii.gz"
 	-subcortical_ROIs_file "$CBIG_CODE_DIR/data/templates/volume/FSL_MNI152_FS4.5.0/mri/aparc+aseg_182x218x182.nii.gz"
 	-output_name 
 	"$CBIG_CODE_DIR/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/data/ROIs2ROIs_VolAnatDistance/
diff --git a/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/CBIG_preproc_bandpass_fft.csh b/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/CBIG_preproc_bandpass_fft.csh
index d40708b..ecc64ad 100755
--- a/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/CBIG_preproc_bandpass_fft.csh
+++ b/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/CBIG_preproc_bandpass_fft.csh
@@ -19,14 +19,24 @@ set VERSION = '$Id: CBIG_preproc_bandpass_fft.csh, v 1.0 2016/06/18 $'
 
 set n = `echo $argv | grep -e -help | wc -l`
 
-# if there is no arguments or there is -help option 
-if( $#argv == 0 || $n != 0 ) then
+# if there is -help option 
+if( $n != 0 ) then
 	echo $VERSION
 	# print help	
 	cat $0 | awk 'BEGIN{prt=0}{if(prt) print $0; if($1 == "BEGINHELP") prt = 1 }'
 	exit 0;
 endif
 
+# if there is no arguments
+if( $#argv == 0 ) then
+	echo $VERSION
+	# print help	
+	cat $0 | awk 'BEGIN{prt=0}{if(prt) print $0; if($1 == "BEGINHELP") prt = 1 }'
+	echo "WARNING: No input arguments. See above for a list of available input arguments."
+	exit 0;
+endif
+
+
 set n = `echo $argv | grep -e -version | wc -l`
 if($n != 0) then
 	echo $VERSION
@@ -123,7 +133,11 @@ foreach curr_bold ($zpdbold)
 		if ( (! -e  $boldfile"_bp_"$low_f"_"$high_f".nii.gz") || ($force == 1) ) then
 			set fMRI_file = $boldfile".nii.gz"
 			set output_file = $boldfile"_bp_"$low_f"_"$high_f".nii.gz"
-			$MATLAB -nojvm -nodesktop -nodisplay -nosplash -r "addpath(fullfile('$root_dir','utilities'));CBIG_bandpass_vol '$fMRI_file' '$output_file' '$low_f' '$high_f' '$detrend' '$retrend' '$censor_file';exit " |& tee -a $LF		
+			set cmd = ( $MATLAB -nojvm -nodesktop -nodisplay -nosplash -r '"' \
+             'addpath(fullfile('"'"'$root_dir'"'"','"'"'utilities'"'"'))'; \
+             CBIG_bandpass_vol "'"$fMRI_file"'" "'"$output_file"'" "'"$low_f"'" "'"$high_f"'" "'"$detrend"'" \
+             "'"$retrend"'" "'"$censor_file"'"; exit '"' );
+			eval $cmd |& tee -a $LF	
 		else
 			echo "=======================Bandpass has been done!=======================" |& tee -a $LF
 		endif
@@ -140,11 +154,13 @@ echo "=======================Bandpass done!=======================" |& tee -a $L
 which git
 if (! $status) then
 	echo "=======================Git: Last Commit of Current Function =======================" |& tee -a $LF
-	git -C ${CBIG_CODE_DIR} log -1 -- stable_projects/preprocessing/CBIG_fMRI_Preproc2016/CBIG_preproc_bandpass_fft.csh >> $LF
+	pushd ${CBIG_CODE_DIR}
+	git log -1 -- ${CBIG_CODE_DIR}/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/CBIG_preproc_bandpass_fft.csh >> $LF
+	popd
 endif
 
 echo "*********************************************************************" |& tee -a $LF
-exit 1;
+exit 0;
 
 
 ##########################################
diff --git a/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/CBIG_preproc_bbregister.csh b/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/CBIG_preproc_bbregister.csh
index b4a53be..b5f8455 100755
--- a/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/CBIG_preproc_bbregister.csh
+++ b/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/CBIG_preproc_bbregister.csh
@@ -23,14 +23,23 @@ set VERSION = '$Id: CBIG_preproc_bbregister.csh, v 1.0 2016/06/18 $'
 
 set n = `echo $argv | grep -e -help | wc -l`
 
-# if there is no arguments or there is -help option 
-if( $#argv == 0 || $n != 0 ) then
+# if there is -help option 
+if( $n != 0 ) then
 	echo $VERSION
 	# print help	
 	cat $0 | awk 'BEGIN{prt=0}{if(prt) print $0; if($1 == "BEGINHELP") prt = 1 }'
 	exit 0;
 endif
 
+# if there is no arguments
+if( $#argv == 0 ) then
+	echo $VERSION
+	# print help	
+	cat $0 | awk 'BEGIN{prt=0}{if(prt) print $0; if($1 == "BEGINHELP") prt = 1 }'
+	echo "WARNING: No input arguments. See above for a list of available input arguments."
+	exit 0;
+endif
+
 set n = `echo $argv | grep -e -version | wc -l`
 if($n != 0) then
 	echo $VERSION
@@ -100,7 +109,7 @@ foreach curr_bold ($zpdbold)
 	else
 		echo "bbr_orig/$boldfile'_reg.dat' already exists"|& tee -a $LF 
 	endif
-	cp bbr_orig/$boldfile"_reg.dat" $boldfile"_reg.dat" 
+	rsync -az bbr_orig/$boldfile"_reg.dat" $boldfile"_reg.dat" 
 	popd
 end
 echo "=======================FSL initialization done!=======================" |& tee -a $LF
@@ -162,17 +171,17 @@ foreach curr_bold ($zpdbold)
 		if ($comp == 1) then
 			echo "[Reg] Registration from best run (run$best_run) reduces the bbr cost of run$curr_bold" |& tee -a $LF
 			echo "[Reg]: Registration from the best run will be applied to run$curr_bold" |& tee -a $LF
-			set cmd = "cp $best_run/bbr_orig/$bestboldfile'_reg.dat' $curr_bold/$boldfile'_reg.dat'"
+			set cmd = "rsync -az $best_run/bbr_orig/$bestboldfile'_reg.dat' $curr_bold/$boldfile'_reg.dat'"
 			echo $cmd |& tee -a $LF
 			eval $cmd
-			set cmd = "cp $curr_bold/bbr_use_best_run/$boldfile'_use_best_run_initcost.dat'"
+			set cmd = "rsync -az $curr_bold/bbr_use_best_run/$boldfile'_use_best_run_initcost.dat'"
 			set cmd = "$cmd $curr_bold/$boldfile'_reg.dat.mincost'"
 			echo $cmd |& tee -a $LF
 			eval $cmd
 		else
 			echo "[Reg]: Registration from best run (run$best_run) doesn't reduces the bbr cost of run$curr_bold" |& tee -a $LF
 			echo "[REG]: BBR cost of run $curr_bold will keep using its original transformation matrix" |& tee -a $LF
-			set cmd = "cp $curr_bold/bbr_orig/$boldfile'_reg.dat.mincost' $curr_bold/$boldfile'_reg.dat.mincost'"
+			set cmd = "rsync -az $curr_bold/bbr_orig/$boldfile'_reg.dat.mincost' $curr_bold/$boldfile'_reg.dat.mincost'"
 			echo $cmd |& tee -a $LF
 			eval $cmd
 		endif
@@ -183,7 +192,7 @@ foreach curr_bold ($zpdbold)
 	endif
 end
 #copy the bbr cost of the best run to its bold run folder
-set cmd = "cp $best_run/bbr_orig/$bestboldfile'_reg.dat.mincost' $best_run/$bestboldfile'_reg.dat.mincost'"
+set cmd = "rsync -az $best_run/bbr_orig/$bestboldfile'_reg.dat.mincost' $best_run/$bestboldfile'_reg.dat.mincost'"
 echo $cmd |& tee -a $LF
 eval $cmd
 
@@ -221,11 +230,14 @@ end
 which git
 if (! $status) then
 	echo "=======================Git: Last Commit of Current Function =======================" |& tee -a $LF
-	git -C ${CBIG_CODE_DIR} log -1 -- stable_projects/preprocessing/CBIG_fMRI_Preproc2016/CBIG_preproc_bbregister.csh >> $LF
+	pushd ${CBIG_CODE_DIR}
+	git log -1 -- ${CBIG_CODE_DIR}/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/CBIG_preproc_bbregister.csh \
+	>> $LF
+	popd
 endif
 
 echo "****************************************************************" |& tee -a $LF
-exit 1;
+exit 0;
 
 ##########################################
 # Parse Arguments 
diff --git a/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/CBIG_preproc_censor.csh b/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/CBIG_preproc_censor.csh
index ebceab0..9065513 100755
--- a/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/CBIG_preproc_censor.csh
+++ b/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/CBIG_preproc_censor.csh
@@ -9,10 +9,13 @@
 # This function does the following three steps:
 #	1. Create grey matter and whole brain masks (if they do not exist)
 #	2. Censor "bad" time points (implementation of Power et al. 2014). Detrend before censoring.
-#	3. Censoring QC. Compute the correlation and fractional difference between original signal and final signal. Plot the 0%, 20%, 40%, 60%, 80%, and 100% ranking voxels' time series (correlation and fractional difference respectively)
+#	3. Censoring QC. Compute the correlation and fractional difference between original signal and final signal. 
+#   Plot the 0%, 20%, 40%, 60%, 80%, and 100% ranking voxels' time series (correlation and fractional difference 
+#   respectively)
 #
 # Reference:
-# 1) Power, Jonathan D., et al. "Methods to detect, characterize, and remove motion artifact in resting state fMRI." Neuroimage 84 (2014): 320-341.
+# 1) Power, Jonathan D., et al. "Methods to detect, characterize, and remove motion artifact in resting state fMRI." 
+# Neuroimage 84 (2014): 320-341.
 #
 # Written by Jingwei Li.
 # Written by CBIG under MIT license: https://github.com/ThomasYeoLab/CBIG/blob/master/LICENSE.md
@@ -40,14 +43,23 @@ set nocleanup = 0;
 
 set n = `echo $argv | grep -e -help | wc -l`
 
-# if there is no arguments or there is -help option 
-if( $#argv == 0 || $n != 0 ) then
+# if there is -help option 
+if( $n != 0 ) then
 	echo $VERSION
 	# print help	
 	cat $0 | awk 'BEGIN{prt=0}{if(prt) print $0; if($1 == "BEGINHELP") prt = 1 }'
 	exit 0;
 endif
 
+# if there is no arguments
+if( $#argv == 0 ) then
+	echo $VERSION
+	# print help	
+	cat $0 | awk 'BEGIN{prt=0}{if(prt) print $0; if($1 == "BEGINHELP") prt = 1 }'
+	echo "WARNING: No input arguments. See above for a list of available input arguments."
+	exit 0;
+endif
+
 set n = `echo $argv | grep -e -version | wc -l`
 if($n != 0) then
 	echo $VERSION
@@ -237,9 +249,13 @@ foreach runfolder ($bold)
 	set qc_out_dir = "${sub_dir}/${subject}/qc/censor_interp"
 	mkdir -p $qc_out_dir
 	if ( -e ${censor_inter} && -e ${censor_final} ) then
-		$MATLAB -nodesktop -nodisplay -nosplash -r "addpath(fullfile('${root_dir}', 'utilities')); CBIG_preproc_CensorQC('${qc_out_dir}', '$subject', '$runfolder', '${BOLD}.nii.gz', '${censor_inter}', '${censor_final}', '${sub_dir}/${subject}/bold/mask/${subject}.brainmask.bin.nii.gz', '${sub_dir}/${subject}/bold/mask/${subject}.func.gm.nii.gz', '${outlier_file}'); exit" |& tee -a $LF
+		$MATLAB -nodesktop -nodisplay -nosplash -r "addpath(fullfile('${root_dir}', 'utilities')); \
+		CBIG_preproc_CensorQC('${qc_out_dir}', '$subject', '$runfolder', '${BOLD}.nii.gz', '${censor_inter}', \
+		'${censor_final}', '${sub_dir}/${subject}/bold/mask/${subject}.brainmask.bin.nii.gz', \
+		'${sub_dir}/${subject}/bold/mask/${subject}.func.gm.nii.gz', '${outlier_file}'); exit" |& tee -a $LF
 	else
-		echo "ERROR: One or two of the intermediate censoring result and final censoring result do not exist. Censoring QC cannot execute." |& tee -a $LF
+		echo "ERROR: One or two of the intermediate censoring result and final censoring result do not exist. \
+		Censoring QC cannot execute." |& tee -a $LF
 	endif
 	
 	# if -nocleanup is not turned on, delete the intermediate volume.
@@ -260,7 +276,9 @@ popd
 which git
 if (! $status) then
 	echo "=======================Git: Last Commit of Current Function =======================" |& tee -a $LF
-	git -C ${CBIG_CODE_DIR} log -1 -- stable_projects/preprocessing/CBIG_fMRI_Preproc2016/CBIG_preproc_censor.csh >> $LF
+	pushd ${CBIG_CODE_DIR}
+	git log -1 -- ${CBIG_CODE_DIR}/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/CBIG_preproc_censor.csh >> $LF
+	popd
 endif
 
 exit 0;
@@ -381,7 +399,8 @@ if ( "$BOLD_stem" == "" ) then
 endif
 
 if ( "$reg_stem" == "" ) then
-	echo "ERROR: reg stem not specified. For censoring step, we need to use registration information to create gray matter mask. Please set CBIG_preproc_bbregister before CBIG_preproc_censor in your configuration file."
+	echo "ERROR: reg stem not specified. For censoring step, we need to use registration information to create \
+	gray matter mask. Please set CBIG_preproc_bbregister before CBIG_preproc_censor in your configuration file."
 	exit 1;
 endif
 
@@ -491,10 +510,12 @@ OPTIONAL ARGUMENTS:
 OUTPUTS:
 	1. If -nocleanup flag is passed in, this function will output two BOLD volumes:
 	   (a) The final output volume (either with interpolation + replacement, or with bandpass + interpolation)
-	   <sub_dir>/<subject>/bold/<run_number>/<subject>_bld<run_number><BOLD_stem>_interp_FD<FD_thres>_DVARS<DVARS_thres>.nii.gz
+	   <sub_dir>/<subject>/bold/<run_number>/<subject>_bld<run_number><BOLD_stem>_interp_FD<FD_thres>
+	   _DVARS<DVARS_thres>.nii.gz
 	   
 	   (b) The intermediate output volume (all frames are interpolated from input uncensored frames)
-	   <sub_dir>/<subject>/bold/<run_number>/<subject>_bld<run_number><BOLD_stem>_interp_inter_FD<FD_thres>_DVARS<DVARS_thres>.nii.gz
+	   <sub_dir>/<subject>/bold/<run_number>/<subject>_bld<run_number><BOLD_stem>_interp_inter_FD<FD_thres>
+	   _DVARS<DVARS_thres>.nii.gz
 	   
 	   If -nocleanup is not passed in, only (a) will be output.
 	   
diff --git a/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/CBIG_preproc_check_error.csh b/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/CBIG_preproc_check_error.csh
index f06ce44..a3ef0c9 100755
--- a/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/CBIG_preproc_check_error.csh
+++ b/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/CBIG_preproc_check_error.csh
@@ -18,14 +18,23 @@ set output_file = ""
 
 set n = `echo $argv | grep -e -help | wc -l`
 
-# if there is no arguments or there is -help option 
-if( $#argv == 0 || $n != 0 ) then
+# if there is -help option 
+if( $n != 0 ) then
 	echo $VERSION
 	# print help	
 	cat $0 | awk 'BEGIN{prt=0}{if(prt) print $0; if($1 == "BEGINHELP") prt = 1 }'
 	exit 0;
 endif
 
+# if there is no arguments
+if( $#argv == 0 ) then
+	echo $VERSION
+	# print help	
+	cat $0 | awk 'BEGIN{prt=0}{if(prt) print $0; if($1 == "BEGINHELP") prt = 1 }'
+	echo "WARNING: No input arguments. See above for a list of available input arguments."
+	exit 0;
+endif
+
 
 set n = `echo $argv | grep -e -version | wc -l`
 if($n != 0) then
diff --git a/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/CBIG_preproc_create_mask.csh b/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/CBIG_preproc_create_mask.csh
index 334f074..4a9cfc4 100755
--- a/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/CBIG_preproc_create_mask.csh
+++ b/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/CBIG_preproc_create_mask.csh
@@ -21,14 +21,23 @@ set VERSION = '$Id: CBIG_preproc_create_mask.csh, v 1.0 2016/06/18 $'
 
 set n = `echo $argv | grep -e -help | wc -l`
 
-# if there is no arguments or there is -help option 
-if( $#argv == 0 || $n != 0 ) then
+# if there is -help option 
+if( $n != 0 ) then
 	echo $VERSION
 	# print help	
 	cat $0 | awk 'BEGIN{prt=0}{if(prt) print $0; if($1 == "BEGINHELP") prt = 1 }'
 	exit 0;
 endif
 
+# if there is no arguments
+if( $#argv == 0 ) then
+	echo $VERSION
+	# print help	
+	cat $0 | awk 'BEGIN{prt=0}{if(prt) print $0; if($1 == "BEGINHELP") prt = 1 }'
+	echo "WARNING: No input arguments. See above for a list of available input arguments."
+	exit 0;
+endif
+
 set n = `echo $argv | grep -e -version | wc -l`
 if($n != 0) then
 	echo $VERSION
@@ -113,23 +122,27 @@ echo "[MASK]: reg = $reg" |& tee -a $LF
 if ( "$erode_space" == "func" ) then
 	if ( $wm == 1 && "$wm_max_erode" == "" ) then
 		set wm_max_erode = 1
-		echo "WARNING: WM mask will be created but -wm_max_erode is not passed in. Maximal erosion will be set to 1. (Erode in functional space.)" |& tee -a $LF
+		echo "WARNING: WM mask will be created but -wm_max_erode is not passed in. \
+Maximal erosion will be set to 1. (Erode in functional space.)" |& tee -a $LF
 	endif
 	
 	if ( $csf == 1 && "$csf_max_erode" == "" ) then
 		set csf_max_erode = 0
-		echo "WARNING: Ventricles mask will be created but -csf_max_erode is not passed in. Maximal erosion will be set to 0. (Erode in functional space.)" |& tee -a $LF
+		echo "WARNING: Ventricles mask will be created but -csf_max_erode is not passed in. \
+Maximal erosion will be set to 0. (Erode in functional space.)" |& tee -a $LF
 	endif
 	
 else
 	if ( $wm == 1 && "$wm_max_erode" == "" ) then
 		set wm_max_erode = 3
-		echo "WARNING: WM mask will be created but -wm_max_erode is not passed in. Maximal erosion will be set to 3. (Erode in anatomical space.)" |& tee -a $LF
+		echo "WARNING: WM mask will be created but -wm_max_erode is not passed in. \
+Maximal erosion will be set to 3. (Erode in anatomical space.)" |& tee -a $LF
 	endif
 	
 	if ( $csf == 1 && "$csf_max_erode" == "" ) then
 		set csf_max_erode = 1
-		echo "WARNING: Ventricles mask will be created but -csf_max_erode is not passed in. Maximal erosion will be set to 1. (Erode in anatomical space.)" |& tee -a $LF
+		echo "WARNING: Ventricles mask will be created but -csf_max_erode is not passed in. \
+Maximal erosion will be set to 1. (Erode in anatomical space.)" |& tee -a $LF
 	endif
 endif
 	
@@ -137,7 +150,8 @@ endif
 if( $whole_brain == 1 ) then
 	echo "=======================Create whole brain mask=======================" |& tee -a $LF
 	if( (! -e mask/$subject.brainmask.bin.nii.gz) || ( $force == 1 ) ) then
-		set cmd = "mri_vol2vol --reg $mask_bold/$reg --targ $anat_dir/$anat/mri/brainmask.mgz --mov $mask_bold/$boldfile.nii.gz --inv --o mask/$subject.brainmask.nii.gz"
+		set cmd = "mri_vol2vol --reg $mask_bold/$reg --targ $anat_dir/$anat/mri/brainmask.mgz \
+--mov $mask_bold/$boldfile.nii.gz --inv --o mask/$subject.brainmask.nii.gz"
 		echo $cmd |& tee -a $LF
 		eval $cmd |& tee -a $LF
 
@@ -177,12 +191,14 @@ if( $wm == 1 ) then
 	echo "======================= Create wm mask =======================" |& tee -a $LF
 	if( (! -e mask/$subject.func.wm.nii.gz) || ( $force == 1 )) then
 		if ( "$erode_space" == "func" ) then
-			set cmd = "mri_label2vol --seg $anat_dir/$anat/mri/aparc+aseg.mgz --temp $mask_bold/$boldfile.nii.gz --reg $mask_bold/$reg --o mask/$subject.func.aseg.nii" 
+			set cmd = "mri_label2vol --seg $anat_dir/$anat/mri/aparc+aseg.mgz \
+--temp $mask_bold/$boldfile.nii.gz --reg $mask_bold/$reg --o mask/$subject.func.aseg.nii" 
 			echo $cmd |& tee -a $LF
 			eval $cmd |& tee -a $LF
 			
 			foreach i (`seq 0 1 ${wm_max_erode}`)
-				set cmd = "mri_binarize --i mask/$subject.func.aseg.nii --wm --erode ${i} --o mask/$subject.func.wm_erode${i}.nii.gz"
+				set cmd = "mri_binarize --i mask/$subject.func.aseg.nii \
+--wm --erode ${i} --o mask/$subject.func.wm_erode${i}.nii.gz"
 				echo $cmd |& tee -a $LF
 				eval $cmd |& tee -a $LF
 				
@@ -191,17 +207,19 @@ if( $wm == 1 ) then
 			end
 			
 			echo "Final white matter mask is eroded by 1 times in functional space."
-			set cmd = "cp mask/$subject.func.wm_erode1.nii.gz mask/$subject.func.wm.nii.gz"
+			set cmd = "rsync -az mask/$subject.func.wm_erode1.nii.gz mask/$subject.func.wm.nii.gz"
 			echo $cmd |& tee -a $LF
 			eval $cmd |& tee -a $LF
 			
 		else
 			foreach i (`seq 0 1 ${wm_max_erode}`)
-				set cmd = "mri_binarize --i $anat_dir/$anat/mri/aparc+aseg.mgz --wm --erode ${i} --o mask/${subject}.anat.wm_erode${i}.nii.gz"
+				set cmd = "mri_binarize --i $anat_dir/$anat/mri/aparc+aseg.mgz \
+--wm --erode ${i} --o mask/${subject}.anat.wm_erode${i}.nii.gz"
 				echo $cmd |& tee -a $LF
 				eval $cmd |& tee -a $LF
 				
-				set cmd = "mri_label2vol --seg mask/${subject}.anat.wm_erode${i}.nii.gz --temp $mask_bold/$boldfile.nii.gz --reg $mask_bold/$reg --o mask/${subject}.func.wm_erode${i}.nii.gz"
+				set cmd = "mri_label2vol --seg mask/${subject}.anat.wm_erode${i}.nii.gz \
+--temp $mask_bold/$boldfile.nii.gz --reg $mask_bold/$reg --o mask/${subject}.func.wm_erode${i}.nii.gz"
 				echo $cmd |& tee -a $LF
 				eval $cmd |& tee -a $LF
 				
@@ -216,7 +234,7 @@ if( $wm == 1 ) then
 			end
 			
 			echo "Final white matter mask is eroded by $wm_erode times in anatomical space." |& tee -a $LF
-			set cmd = "cp mask/$subject.func.wm_erode${wm_erode}.nii.gz mask/$subject.func.wm.nii.gz"
+			set cmd = "rsync -az mask/$subject.func.wm_erode${wm_erode}.nii.gz mask/$subject.func.wm.nii.gz"
 			echo $cmd |& tee -a $LF
 			eval $cmd |& tee -a $LF
 		endif
@@ -232,14 +250,16 @@ if( $csf == 1 ) then
 	echo "======================= Create csf mask =======================" |& tee -a $LF
 	if( (! -e mask/$subject.func.ventricles.nii.gz) || ( $force == 1 )) then
 		if ( "$erode_space" == "func" ) then
-			set cmd = "mri_label2vol --seg $anat_dir/$anat/mri/aparc+aseg.mgz --temp $mask_bold/$boldfile.nii.gz --reg $mask_bold/$reg --o mask/$subject.func.aseg.nii" 
+			set cmd = "mri_label2vol --seg $anat_dir/$anat/mri/aparc+aseg.mgz \
+--temp $mask_bold/$boldfile.nii.gz --reg $mask_bold/$reg --o mask/$subject.func.aseg.nii" 
 			echo $cmd |& tee -a $LF
 			eval $cmd
 			
 			set vent_erode = 0
 			foreach i (`seq 0 1 ${csf_max_erode}`)  # When erode_space="func", default csf_max_erode=0. 
 			                                        # Actually $subject.func.ventricles_erode1.nii.gz, ... won't be generated.
-				set cmd = "mri_binarize --i mask/$subject.func.aseg.nii --ventricles --erode ${i} --o mask/$subject.func.ventricles_erode${i}.nii.gz"
+				set cmd = "mri_binarize --i mask/$subject.func.aseg.nii \
+--ventricles --erode ${i} --o mask/$subject.func.ventricles_erode${i}.nii.gz"
 				echo $cmd |& tee -a $LF
 				eval $cmd
 				
@@ -249,18 +269,20 @@ if( $csf == 1 ) then
 			end
 			
 			echo "Final ventricles mask is eroded by 0 times in functional space." |& tee -a $LF
-			set cmd = "cp mask/$subject.func.ventricles_erode0.nii.gz mask/$subject.func.ventricles.nii.gz"
+			set cmd = "rsync -az mask/$subject.func.ventricles_erode0.nii.gz mask/$subject.func.ventricles.nii.gz"
 			echo $cmd |& tee -a $LF
 			eval $cmd |& tee -a $LF
 		
 		else
 			set vent_erode = 0
 			foreach i (`seq 0 1 $csf_max_erode`)
-				set cmd = "mri_binarize --i $anat_dir/$anat/mri/aparc+aseg.mgz --ventricles --erode ${i} --o mask/${subject}.anat.ventricles_erode${i}.nii.gz"
+				set cmd = "mri_binarize --i $anat_dir/$anat/mri/aparc+aseg.mgz \
+--ventricles --erode ${i} --o mask/${subject}.anat.ventricles_erode${i}.nii.gz"
 				echo $cmd |& tee -a $LF
 				eval $cmd |& tee -a $LF
 				
-				set cmd = "mri_label2vol --seg mask/${subject}.anat.ventricles_erode${i}.nii.gz --temp $mask_bold/$boldfile.nii.gz --reg $mask_bold/$reg --o mask/${subject}.func.ventricles_erode${i}.nii.gz"
+				set cmd = "mri_label2vol --seg mask/${subject}.anat.ventricles_erode${i}.nii.gz \
+--temp $mask_bold/$boldfile.nii.gz --reg $mask_bold/$reg --o mask/${subject}.func.ventricles_erode${i}.nii.gz"
 				echo $cmd |& tee -a $LF
 				eval $cmd |& tee -a $LF
 				
@@ -275,7 +297,7 @@ if( $csf == 1 ) then
 			end
 			
 			echo "Final ventricles mask is eroded by $vent_erode times in anatomical space." |& tee -a $LF
-			set cmd = "cp mask/$subject.func.ventricles_erode${vent_erode}.nii.gz mask/$subject.func.ventricles.nii.gz"
+			set cmd = "rsync -az mask/$subject.func.ventricles_erode${vent_erode}.nii.gz mask/$subject.func.ventricles.nii.gz"
 			echo $cmd |& tee -a $LF
 			eval $cmd |& tee -a $LF
 		endif
@@ -290,13 +312,16 @@ endif
 if( $gm == 1 ) then
 	echo "======================= Create gm mask=======================" |& tee -a $LF
 	if( (! -e mask/$subject.func.gm.nii.gz) || ( $force == 1 )) then
-		set cmd = "mri_label2vol --seg $anat_dir/$anat/mri/aparc+aseg.mgz --temp $mask_bold/$boldfile.nii.gz --reg $mask_bold/$reg --o mask/$subject.func.aseg.nii" 
+		set cmd = "mri_label2vol --seg $anat_dir/$anat/mri/aparc+aseg.mgz \
+--temp $mask_bold/$boldfile.nii.gz --reg $mask_bold/$reg --o mask/$subject.func.aseg.nii" 
 		echo $cmd |& tee -a $LF
 		eval $cmd
 
-#gm labels: https://github.com/neurodebian/freesurfer/blob/cc12577ed0a75115d645a55291ae61f0d937dd7e/mri_binarize/mri_binarize.c
+#gm labels: 
+#https://github.com/neurodebian/freesurfer/blob/cc12577ed0a75115d645a55291ae61f0d937dd7e/mri_binarize/mri_binarize.c
 #match table: /apps/arch/Linux_x86_64/freesurfer/5.3.0/FreeSurferColorLUT.txt
-		set cmd = "mri_binarize --i mask/$subject.func.aseg.nii --match 2 41 77 251 252 253 254 255 7 46 4 5 14 43 44 15 72 31 63 0 24 --inv --o mask/$subject.func.gm.nii.gz"
+		set cmd = "mri_binarize --i mask/$subject.func.aseg.nii \
+--match 2 41 77 251 252 253 254 255 7 46 4 5 14 43 44 15 72 31 63 0 24 --inv --o mask/$subject.func.gm.nii.gz"
 		echo $cmd |& tee -a $LF
 		eval $cmd
 		
@@ -308,7 +333,8 @@ endif
 
 # If aCompCor == 1. combine wm and csf mask
 if ( $aCompCor == 1 ) then
-	echo "======================================= Combine wm and ventricles masks  ========================================" |& tee -a $LF
+	echo "======================================= Combine wm and ventricles masks  \
+========================================" |& tee -a $LF
 	set wm_vent_mask = "mask/${subject}.func.wm.vent.nii.gz"
 	if ( ! -e ${wm_vent_mask} ) then
 		set cmd = "fslmaths mask/${subject}.func.wm.nii.gz -max mask/${subject}.func.ventricles.nii.gz ${wm_vent_mask}"
@@ -336,11 +362,14 @@ echo "" |& tee -a $LF
 which git
 if (! $status) then
 	echo "======================= Git: Last Commit of Current Function =======================" |& tee -a $LF
-	git -C ${CBIG_CODE_DIR} log -1 -- stable_projects/preprocessing/CBIG_fMRI_Preproc2016/CBIG_preproc_create_mask.csh >> $LF
+	pushd ${CBIG_CODE_DIR}
+	git log -1 -- ${CBIG_CODE_DIR}/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/CBIG_preproc_create_mask.csh \
+>> $LF
+	popd
 endif
 
 echo "*********************************************************************" |& tee -a $LF
-exit 1;
+exit 0;
 
 
 
diff --git a/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/CBIG_preproc_despiking.csh b/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/CBIG_preproc_despiking.csh
index 46f54be..8ecb9b0 100755
--- a/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/CBIG_preproc_despiking.csh
+++ b/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/CBIG_preproc_despiking.csh
@@ -1,7 +1,8 @@
 #!/bin/csh -f
 
 # Example: 
-# csh CBIG_preproc_despiking.csh -s Sub0001_Ses1 -d ~/storage/fMRI_preprocess -bld '002 003' -BOLD_stem _rest_skip5_stc_mc_residc 
+# csh CBIG_preproc_despiking.csh -s Sub0001_Ses1 -d ~/storage/fMRI_preprocess -bld '002 003' \
+# -BOLD_stem _rest_skip5_stc_mc_residc 
 #
 # This function uses AFNI 3dDespike to perform despiking. 
 #
@@ -22,14 +23,23 @@ set VERSION = '$Id: CBIG_preproc_despiking.csh v 1.0 2017/09/22'
 
 set n = `echo $argv | grep -e -help | wc -l`
 
-# if there is no arguments or there is -help option 
-if( $#argv == 0 || $n != 0 ) then
+# if there is -help option 
+if( $n != 0 ) then
 	echo $VERSION
 	# print help	
 	cat $0 | awk 'BEGIN{prt=0}{if(prt) print $0; if($1 == "BEGINHELP") prt = 1 }'
 	exit 0;
 endif
 
+# if there is no arguments
+if( $#argv == 0 ) then
+	echo $VERSION
+	# print help	
+	cat $0 | awk 'BEGIN{prt=0}{if(prt) print $0; if($1 == "BEGINHELP") prt = 1 }'
+	echo "WARNING: No input arguments. See above for a list of available input arguments."
+	exit 0;
+endif
+
 set n = `echo $argv | grep -e -version | wc -l`
 if($n != 0) then
 	echo $VERSION
@@ -99,7 +109,9 @@ echo "====================== Despiking finished. ======================" |& tee
 which git
 if (! $status) then
 	echo "=======================Git: Last Commit of Current Function =======================" |& tee -a $LF
-	git -C ${CBIG_CODE_DIR} log -1 -- stable_projects/preprocessing/CBIG_fMRI_Preproc2016/CBIG_preproc_despiking.csh >> $LF
+	pushd ${CBIG_CODE_DIR}
+	git log -1 -- ${CBIG_CODE_DIR}stable_projects/preprocessing/CBIG_fMRI_Preproc2016/CBIG_preproc_despiking.csh >> $LF
+	popd
 endif
 
 echo "******************************************************************************"
@@ -211,7 +223,8 @@ REQUIRED ARGUMENTS:
 	                            use a space as delimiter, e.g. '002 003'. 
 	                            NOTE: quote sign is necessary.
 	-BOLD_stem    <BOLD_stem> : stem of input file, e.g. if the input file name is
-	                            Sub0001_Ses1_bld002_rest_skip5_stc_mc_residc.nii.gz, the BOLD_stem will be _rest_skip5_stc_mc_residc.
+	                            Sub0001_Ses1_bld002_rest_skip5_stc_mc_residc.nii.gz, 
+								the BOLD_stem will be _rest_skip5_stc_mc_residc.
 	                            This input file should be stored in 
 	                            <sub_dir>/<subject>/bold/<run_number>/
 
@@ -223,5 +236,5 @@ Example:
 	csh CBIG_preproc_despiking.csh -s Sub0001_Ses1 -d ~/storage/fMRI_preprocess -bld
 	'002 003' -BOLD_stem _rest_skip5_stc_mc_residc 
 
-Written by Written by Xing Qian (Helen's lab) and CBIG under MIT license: https://github.com/ThomasYeoLab/CBIG/blob/master/LICENSE.md
+
 
diff --git a/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/CBIG_preproc_fMRI_preprocess.csh b/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/CBIG_preproc_fMRI_preprocess.csh
index bbe5063..13155ca 100755
--- a/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/CBIG_preproc_fMRI_preprocess.csh
+++ b/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/CBIG_preproc_fMRI_preprocess.csh
@@ -20,16 +20,25 @@ set VERSION = '$Id: CBIG_preproc_fMRI_preprocess.csh, v 1.0 2016/06/09 $'
 
 set n = `echo $argv | grep -e -help | wc -l`
 
-# if there is no arguments or there is -help option 
-if( $#argv == 0 || $n != 0 ) then
+# if there is -help option 
+if( $n != 0 ) then
 	echo $VERSION
 	# print help	
 	cat $0 | awk 'BEGIN{prt=0}{if(prt) print $0; if($1 == "BEGINHELP") prt = 1 }'
 	exit 0;
 endif
 
+# if there is no arguments
+if( $#argv == 0 ) then
+	echo $VERSION
+	# print help	
+	cat $0 | awk 'BEGIN{prt=0}{if(prt) print $0; if($1 == "BEGINHELP") prt = 1 }'
+	echo "WARNING: No input arguments. See above for a list of available input arguments."
+	exit 0;
+endif
+
 set n = `echo $argv | grep -e -version | wc -l`
-if($n != 0) then
+if ($n != 0) then
 	echo $VERSION
 	exit 0;
 endif
@@ -47,6 +56,10 @@ set REG_stem = ""   # stem of registration file produced by bbregister
 set MASK_stem = ""  # stem of file used to create masks
 set OUTLIER_stem="" # stem of file including censor frames
 set nocleanup = 0   # default clean up intermediate files
+set is_motion_corrected = 0 # flag indicates whether motion correction is performed
+set is_distortion_corrected = 0 # flag indicates whether spatial distortion correction is performed 
+set is_multi_echo_done = 0 # flag indicates whether multi echo tedana is performed
+set echo_number = 1 # echo number default to be 1
 
 set root_dir = `python -c "import os; print(os.path.realpath('$0'))"`
 set root_dir = `dirname $root_dir`
@@ -63,12 +76,12 @@ check_params_return:
 
 mkdir -p $output_dir/$subject/logs
 set LF = $output_dir/$subject/logs/CBIG_preproc_fMRI_preprocess.log
-if( -e $LF ) then
+if ( -e $LF ) then
 	rm $LF
 endif
 touch $LF
 set cleanup_file = $output_dir/$subject/logs/cleanup.txt
-if( -e $cleanup_file ) then
+if ( -e $cleanup_file ) then
 	rm $cleanup_file
 endif
 touch $cleanup_file
@@ -98,7 +111,9 @@ else
 	set git_log = $output_dir/$subject/logs/git.log
 	echo "$TS" >> $git_log
 	echo "***************************Git: Last Commit of Current Repo***************************" >> $git_log
-	git -C ${CBIG_CODE_DIR} log -1 >> $git_log
+	pushd ${CBIG_CODE_DIR}
+	git log -1 >> $git_log
+	popd
 endif
 
 ##########################################
@@ -117,20 +132,42 @@ foreach step ( "`cat $config`" )
 end
 echo "DONE!" >> $LF
 
+##########################################
+# Read in echo number from config file if multiecho step is included in pipeline
+# Otherwise, set echo_number to be 1 for single echo case
+##########################################
+set ME_step = `grep CBIG_preproc_multiecho_denoise $config`
+# We compute the number of echoes by counting the comma delimiter of echo times
+set echo_number = `echo "$ME_step" | awk -F "," '{print NF}'`
+# If echo number is 0, multiecho step is not included. Hence echo number is set to be 1
+if ( $echo_number == 0 ) then 
+	set echo_number = 1
+	echo "Input data is single echo." >> $LF
+else
+	echo "Input data is multi-echo data, perform multi-echo denoising. Number of echoes is $echo_number." >> $LF
+endif
+##########################################
+# Read from config file whether multiecho is included,
+# If so, print out user-specific python environment packages + version
+##########################################
+set package_list = $output_dir/$subject/logs/python_env_list.txt
+if ( $echo_number > 1 ) then
+	if ( -e $package_list ) then
+		rm $package_list
+	endif
+	touch $package_list
+	conda list >> $package_list
+	set package_check = `grep tedana $package_list`
+	if ( $#package_check == 0 ) then 
+		echo "[ERROR]: Package 'Tedana' is missing and it is required for multiecho denoising!" >> $LF
+		exit 1
+	endif
+endif
 
 ##########################################
 # Read in fMRI nifti file list
 ##########################################
 
-#check fmri nifti file list columns
-set lowest_numof_column = (`awk '{print NF}' $fmrinii_file | sort -nu | head -n 1`)
-set highest_numof_column = (`awk '{print NF}' $fmrinii_file | sort -nu | tail -n 1`)
-echo "lowest_numof_column = $lowest_numof_column" >> $LF
-echo "highest_numof_column = $highest_numof_column" >> $LF
-if ( $lowest_numof_column != 2 || $highest_numof_column != 2) then
-	echo "[ERROR]: The input nifti file should only contain two columns!" >> $LF
-	exit 1
-endif
 #check if there are repeating run numbers
 set numof_runs_uniq = (`awk -F " " '{printf ("%03d\n", $1)}' $fmrinii_file | sort | uniq | wc -l`)
 set zpdbold = (`awk -F " " '{printf ("%03d ", $1)}' $fmrinii_file`)
@@ -145,21 +182,61 @@ endif
 
 echo "[BOLD INFO]: Number of runs: $#zpdbold" >> $LF 
 echo "[BOLD INFO]: bold run $zpdbold" >> $LF
-set boldname = (`awk -F " " '{printf($2" ")}' $fmrinii_file`)
+set boldname = (`awk '{for (i=2; i<NF; i++) printf $i " "; print $NF}' $fmrinii_file`)
+set a = $#boldname
+set b = $#zpdbold
+set echo_number_check = `echo " $a / $b" | bc`
+
+# check fmrinii file colunm consistent with echo number
+if ( $echo_number != $echo_number_check ) then
+	echo "ERROR: input echo number $echo_number is not equal to the number of images $echo_number_check " >> $LF
+	exit 1;
+endif
+set column_number = `echo "$echo_number +1"|bc`
+
+#check fmri nifti file list columns, should be equal to echo number plus one
+set lowest_numof_column = (`awk '{print NF}' $fmrinii_file | sort -nu | head -n 1`)
+set highest_numof_column = (`awk '{print NF}' $fmrinii_file | sort -nu | tail -n 1`)
+echo "lowest_numof_column = $lowest_numof_column" >> $LF
+echo "highest_numof_column = $highest_numof_column" >> $LF
+if ( $lowest_numof_column != $column_number || $highest_numof_column != $column_number) then
+	echo "[ERROR]: The input nifti file should only contain one column more than echo number!" >> $LF
+	exit 1
+endif
+
 
 #set output structure
-@ k = 1
-foreach curr_bold ($zpdbold)
-	if ( ! -e $output_dir/$subject/bold/$curr_bold/$subject"_bld$curr_bold$BOLD_stem.nii.gz" ) then
-		mkdir -p $output_dir/$subject/bold/$curr_bold
-		cp $boldname[$k] $output_dir/$subject/bold/$curr_bold/$subject"_bld$curr_bold$BOLD_stem.nii.gz"
-	else
-		echo "[BOLD INFO]: Input bold nifti file already exists !" >> $LF	
-	endif
-	echo "[BOLD INFO]: bold nifti file is: " >> $LF
-	echo "$output_dir/$subject/bold/$curr_bold/$subject'_bld$curr_bold$BOLD_stem.nii.gz'" >> $LF
-	@ k++
-end
+if ( $echo_number == 1 ) then
+	@ k = 1
+	foreach curr_bold ($zpdbold)
+		if ( ! -e $output_dir/$subject/bold/$curr_bold/$subject"_bld$curr_bold$BOLD_stem.nii.gz" ) then
+			mkdir -p $output_dir/$subject/bold/$curr_bold
+			rsync -az $boldname[$k] $output_dir/$subject/bold/$curr_bold/$subject"_bld$curr_bold$BOLD_stem.nii.gz"
+		else
+			echo "[BOLD INFO]: Input bold nifti file (${subject}_bld${curr_bold}${BOLD_stem}.nii.gz) already exists !" >> $LF	
+		endif
+		echo "[BOLD INFO]: bold nifti file is: " >> $LF
+		echo "$output_dir/$subject/bold/$curr_bold/$subject'_bld$curr_bold$BOLD_stem.nii.gz'" >> $LF
+		@ k++
+	end
+else
+	@ k = 1
+	foreach curr_bold ($zpdbold)
+		@ j = 1
+		while ($j <= $echo_number)
+			if ( ! -e $output_dir/$subject/bold/$curr_bold/$subject"_bld$curr_bold"_e$j"$BOLD_stem.nii.gz" ) then
+				mkdir -p $output_dir/$subject/bold/$curr_bold
+				rsync -az $boldname[$k] $output_dir/$subject/bold/$curr_bold/$subject"_bld$curr_bold"_e$j"$BOLD_stem.nii.gz"
+			else
+				echo "[BOLD INFO]: Input bold nifti ($subject"_bld$curr_bold"_e$j"$BOLD_stem.nii.gz") file already exists !" >> $LF	
+			endif
+			echo "[BOLD INFO]: bold nifti file is: " >> $LF
+			echo $output_dir/$subject/bold/$curr_bold/$subject"_bld$curr_bold"_e$j"$BOLD_stem.nii.gz" >> $LF
+			@ j++
+			@ k++
+		end
+	end
+endif
 set Bold_file = $output_dir/$subject/logs/$subject.bold
 if( -e $Bold_file ) then
 	rm $Bold_file
@@ -183,11 +260,11 @@ foreach step ( "`cat $config`" )
 	set inputflag = (`echo $step | awk -F " " '{printf NF}'`)
 	if ( $inputflag != 1) then
 		set curr_flag = ( `echo $step | cut -f 1 -d " " --complement` )
-		echo "[$curr_step] curr_flag = $curr_flag" >> $LF
+		echo "[$curr_step]: curr_flag = $curr_flag" >> $LF
 	endif
 	
 	set zpdbold = `cat $Bold_file`
-	echo "[$curr_step]: zpdbold = $zpdbold"	
+	echo "[$curr_step]: zpdbold = $zpdbold"	>> $LF
 	
 	##########################################
 	# Preprocess step: Skip first n frames 
@@ -196,6 +273,7 @@ foreach step ( "`cat $config`" )
 	if ( "$curr_step" == "CBIG_preproc_skip" ) then
 		
 		set cmd = "$root_dir/CBIG_preproc_skip.csh -s $subject -d $output_dir -bld '$zpdbold' -BOLD_stem $BOLD_stem "
+		set cmd = "$cmd	-echo_number $echo_number"
 		set cmd = "$cmd $curr_flag"
 		echo "[$curr_step]: $cmd" >> $LF
 		eval $cmd >&  /dev/null
@@ -206,32 +284,47 @@ foreach step ( "`cat $config`" )
 		else
 			set curr_stem = "skip4"
 		endif
+
 		echo "[$curr_step]: bold_stem = $curr_stem" >> $LF
 		set BOLD_stem = $BOLD_stem"_$curr_stem"
-			
+		
 		
 		#check existence of output
 		foreach curr_bold ($zpdbold)
-		
-		#put output into cleanup file
-		echo $output_dir/$subject/bold/$curr_bold/${subject}_bld$curr_bold$BOLD_stem.nii.gz >> $cleanup_file
-		
-			if ( ! -e $output_dir/$subject/bold/$curr_bold/$subject"_bld"$curr_bold$BOLD_stem.nii.gz ) then
-				echo "[ERROR]: file $output_dir/$subject/bold/$curr_bold/${subject}_bld$curr_bold$BOLD_stem.nii.gz \
-can not be found" >> $LF
-				echo "[ERROR]: CBIG_preproc_skip fail!" >> $LF
-				exit 1
+			#put output into cleanup file
+			@ j=1
+			if ( $echo_number >1 ) then 
+				while ($j <= $echo_number)
+					echo $output_dir/$subject/bold/$curr_bold/${subject}_bld${curr_bold}_e${j}$BOLD_stem.nii.gz >> $cleanup_file
+					if ( ! -e $output_dir/$subject/bold/$curr_bold/$subject"_bld"${curr_bold}_e${j}$BOLD_stem.nii.gz ) then
+						echo "[ERROR]: file $output_dir/$subject/bold/$curr_bold\
+/${subject}_bld${curr_bold}_e${j}$BOLD_stem.nii.gz can not be found" >> $LF
+						echo "[ERROR]: CBIG_preproc_skip fail!" >> $LF
+						exit 1
+					endif
+					@ j++
+				end
+			else
+				echo $output_dir/$subject/bold/$curr_bold/${subject}_bld${curr_bold}$BOLD_stem.nii.gz >> $cleanup_file
+				if ( ! -e $output_dir/$subject/bold/$curr_bold/$subject"_bld"${curr_bold}$BOLD_stem.nii.gz ) then
+					echo "[ERROR]: file $output_dir/$subject/bold/$curr_bold/${subject}_bld${curr_bold}$BOLD_stem.nii.gz \
+					can not be found" >> $LF
+					echo "[ERROR]: CBIG_preproc_skip fail!" >> $LF
+					exit 1
+				endif
+				@ j++
 			endif
+			
 		end
 
 	##########################################
 	# Preprocess step: slice time correction 
 	##########################################
-		
+
 	else if ( "$curr_step" == "CBIG_preproc_fslslicetimer" ) then
-	    
-	    set cmd = "$root_dir/CBIG_preproc_fslslicetimer.csh -s $subject -d $output_dir -bld '$zpdbold' -BOLD_stem "
-	    set cmd = "$cmd $BOLD_stem $curr_flag"
+		set cmd = "$root_dir/CBIG_preproc_fslslicetimer.csh -s $subject -d $output_dir -bld '$zpdbold' "
+		set cmd = "$cmd -echo_number $echo_number -BOLD_stem "
+		set cmd = "$cmd $BOLD_stem $curr_flag"
 		echo "[$curr_step]: $cmd" >> $LF
 		eval $cmd >&  /dev/null 	
 		
@@ -239,18 +332,31 @@ can not be found" >> $LF
 		set curr_stem = "stc"
 		echo "[$curr_step]: bold_stem = $curr_stem" >> $LF
 		set BOLD_stem = $BOLD_stem"_$curr_stem"
-		
+
 		#check existence of output
 		foreach curr_bold ($zpdbold)
-		
-		#put output into cleanup file
-		echo $output_dir/$subject/bold/$curr_bold/${subject}_bld$curr_bold$BOLD_stem.nii.gz >> $cleanup_file
-		
-			if ( ! -e $output_dir/$subject/bold/$curr_bold/$subject"_bld"$curr_bold$BOLD_stem.nii.gz ) then
-				echo "[ERROR]: file $output_dir/$subject/bold/$curr_bold/${subject}_bld$curr_bold$BOLD_stem.nii.gz \
-can not be found" >> $LF
-				echo "[ERROR]: CBIG_preproc_fslslicetimer fail!" >> $LF
-				exit 1
+			#put output into cleanup file
+			if ( $echo_number >1 ) then 
+				@ j=1
+				while ($j <= $echo_number)
+					echo $output_dir/$subject/bold/$curr_bold/${subject}_bld${curr_bold}_e${j}$BOLD_stem.nii.gz >> $cleanup_file
+					if ( ! -e $output_dir/$subject/bold/$curr_bold/$subject"_bld"${curr_bold}_e${j}$BOLD_stem.nii.gz ) then
+						echo "[ERROR]: file $output_dir/$subject/bold/$curr_bold/${subject}_bld${curr_bold}_e${j}$BOLD_stem.nii.gz \
+						can not be found" >> $LF
+						echo "[ERROR]: CBIG_preproc_fslslicetimer fail!" >> $LF
+						exit 1
+					endif
+					@ j++
+				end
+			else
+				echo $output_dir/$subject/bold/$curr_bold/${subject}_bld${curr_bold}$BOLD_stem.nii.gz >> $cleanup_file
+				if ( ! -e $output_dir/$subject/bold/$curr_bold/$subject"_bld"${curr_bold}$BOLD_stem.nii.gz ) then
+					echo "[ERROR]: file $output_dir/$subject/bold/$curr_bold/${subject}_bld${curr_bold}$BOLD_stem.nii.gz \
+					can not be found" >> $LF
+					echo "[ERROR]: CBIG_preproc_fslslicetimer fail!" >> $LF
+					exit 1
+				endif
+				@ j++
 			endif
 		end
 
@@ -259,8 +365,18 @@ can not be found" >> $LF
 	##########################################		
 		
 	else if ( $curr_step == "CBIG_preproc_fslmcflirt_outliers" ) then
-		
+		if ( $nocleanup == 1) then            # do not cleanup
+			# check if curr_flag contains -nocleanup
+			set flag_ind = `echo $curr_flag | awk '{print index($0, "-nocleanup")}'`
+			if ( $flag_ind == 0 ) then        # 0 means curr_flag does not contain "-nocleanup", add "-nocleanup"
+				set curr_flag = "$curr_flag -nocleanup"
+			endif
+			echo "[$curr_step]: -nocleanup is passed in wrapper function CBIG_preproc_fMRI_preprocess.csh. \
+The intermediate files from motion correction step will not be removed." >> $LF
+		endif
+
 		set cmd = "$root_dir/CBIG_preproc_fslmcflirt_outliers.csh -s $subject -d $output_dir -bld '$zpdbold' "
+		set cmd = "$cmd -echo_number $echo_number"
 		set cmd = "$cmd -BOLD_stem $BOLD_stem $curr_flag"
 		echo "[$curr_step]: $cmd" >> $LF
 		eval $cmd >&  /dev/null
@@ -301,23 +417,174 @@ can not be found" >> $LF
 		echo "[$curr_step]: OUTLIER_stem = $OUTLIER_stem" >> $LF
 		
         # if no run was left, then give a warning and exit the preprocessing 
-	    set zpdbold = `cat $Bold_file`
+		set zpdbold = `cat $Bold_file`
         if ( "$zpdbold" == "" ) then
-            echo "[WARNING]: There is no bold run left after discarding runs with high motion." >> $LF
-            echo "Preprocessing Completed!" >> $LF
-            exit 1
-        endif
+			echo "[WARNING]: There is no bold run left after discarding runs with high motion." >> $LF
+			echo "Preprocessing Completed!" >> $LF
+			exit 0
+		endif
          
 		#check existence of output
 		foreach curr_bold ($zpdbold)
+			if ( $echo_number == 1 ) then 
+				if ( ! -e $output_dir/$subject/bold/$curr_bold/$subject"_bld"${curr_bold}$BOLD_stem.nii.gz ) then
+					echo "[ERROR]: file $output_dir/$subject/bold/$curr_bold/${subject}_bld${curr_bold}$BOLD_stem.nii.gz \
+can not be found" >> $LF
+					echo "[ERROR]: CBIG_preproc_fslmcflirt_outliers fail!" >> $LF
+					exit 1
+				endif
+			else
+			@ j=1
+				while ( $j <= $echo_number)
+					if ( ! -e $output_dir/$subject/bold/$curr_bold/$subject"_bld"${curr_bold}_e${j}$BOLD_stem.nii.gz ) then
+						echo "[ERROR]: file $output_dir/$subject/bold/$curr_bold/${subject}_bld${curr_bold}_e${j}$BOLD_stem.nii.gz \
+can not be found" >> $LF
+						echo "[ERROR]: CBIG_preproc_fslmcflirt_outliers fail!" >> $LF
+						exit 1
+					endif
+					@ j++
+				end
+			endif
+		end
+
+		# if motion correction is done successfully, the following flag value is set to 1
+		set is_motion_corrected = 1
+
+	##########################################
+	# Preprocess step: spatial distortion correction
+	##########################################
+
+	else if ( "$curr_step" == "CBIG_preproc_spatial_distortion_correction" ) then
+		# spatial distortion correction can only be performed after motion correction is done	
+		if ( $is_motion_corrected == 0 ) then
+			echo "[ERROR]: BOLD image is not motion corrected. Spatial Distortion Correction cannot be performed." >> $LF
+			exit 1
+		else
+			if ( $nocleanup == 1) then            # do not cleanup
+				# check if curr_flag contains -nocleanup
+				set flag_ind = `echo $curr_flag | awk '{print index($0, "-nocleanup")}'`
+				if ( $flag_ind == 0 ) then        # 0 means curr_flag does not contain "-nocleanup", add "-nocleanup"
+					set curr_flag = "$curr_flag -nocleanup"
+				endif
+				echo "[$curr_step]: -nocleanup is passed in wrapper function CBIG_preproc_fMRI_preprocess.csh. \
+The intermediate files from spatial distortion correction step will not be removed." >> $LF
+			endif
+
+			set cmd = "$root_dir/CBIG_preproc_spatial_distortion_correction.csh -s $subject -d $output_dir -bld '$zpdbold' "
+			set cmd = "$cmd -echo_number $echo_number"
+			set cmd = "$cmd -BOLD_stem $mc_stem $curr_flag"
+			echo "[$curr_step]: $cmd" >> $LF
+			eval $cmd >& /dev/null
+
+			# Spatial Distortion Correction QC: run BBR on BOLD image that is not distortion corrected
+
+			# Here, we are running BBR on motion-corrected but not distortion-corrceted image. 
+			# As a QC step, the BBR costs can be compared between images with/without distortion correction. By right, the image
+			# with distortion correction should have a lower BBR cost than the image without distortion correction.
+			# Note that this BBR step here is for QC only, but not the REAL preprocessing step.
+			rsync -az $output_dir/$subject/bold/ $output_dir/$subject/bold_backup
+			rsync -az $output_dir/$subject/logs/ $output_dir/$subject/logs_backup
+			rsync -az $output_dir/$subject/qc/ $output_dir/$subject/qc_backup
+
+			if ( $echo_number > 1 ) then
+				set MEICA_flag = `grep "CBIG_preproc_multiecho_denoise" $config`
+				set MEICA_flag = ( `echo $MEICA_flag | cut -f 1 -d " " --complement` )
+				set cmd = "$root_dir/CBIG_preproc_multiecho_denoise.csh -s $subject"
+				set cmd = "$cmd -d $output_dir -bld '$zpdbold' -BOLD_stem ${mc_stem}_mc" 
+				set cmd = "$cmd -echo_number $echo_number"
+				set cmd = "$cmd $MEICA_flag"
+				eval $cmd >& /dev/null 
+				set cmd = "$root_dir/CBIG_preproc_bbregister.csh -s $subject -d $output_dir -anat_s $anat -anat_d $anat_dir "
+				set cmd = "$cmd -bld '$zpdbold' -BOLD_stem ${mc_stem}_mc_me "
+				eval $cmd >& /dev/null 
+			else
+				set cmd = "$root_dir/CBIG_preproc_bbregister.csh -s $subject -d $output_dir -anat_s $anat -anat_d $anat_dir "
+				set cmd = "$cmd -bld '$zpdbold' -BOLD_stem ${mc_stem}_mc "
+				eval $cmd >& /dev/null 
+			endif
+
+			# Extract the BBR cost without distortion correction
+			set cmd = "mv $output_dir/$subject/qc/CBIG_preproc_bbregister_intra_sub_reg.cost"
+			set cmd = "$cmd $output_dir/$subject/qc_backup/CBIG_preproc_bbregister_intra_sub_reg_no_sdc.cost"
+			eval $cmd >& /dev/null 	
+
+			# clean up temporary directories
+			rm -r -f $output_dir/$subject/bold
+			rm -r -f $output_dir/$subject/logs
+			rm -r $output_dir/$subject/qc
+			mv $output_dir/$subject/bold_backup $output_dir/$subject/bold
+			mv $output_dir/$subject/logs_backup $output_dir/$subject/logs
+			mv $output_dir/$subject/qc_backup $output_dir/$subject/qc
+
+			#update stem
+			set curr_stem = "mc_sdc"
+			set BOLD_stem = "$mc_stem"_"$curr_stem"
+			
+			#check existence of output
+			foreach curr_bold ($zpdbold)
+				if ( $echo_number == 1 ) then 
+					if ( ! -e $output_dir/$subject/bold/$curr_bold/$subject"_bld"${curr_bold}$BOLD_stem.nii.gz ) then
+						echo "[ERROR]: file $output_dir/$subject/bold/$curr_bold/${subject}_bld${curr_bold}$BOLD_stem.nii.gz \
+can not be found" >> $LF
+						echo "[ERROR]: CBIG_preproc_spatial_distortion_correction fail!" >> $LF
+						exit 1
+					endif
+				else
+					@ j=1
+					while ( $j <= $echo_number)
+						if ( ! -e $output_dir/$subject/bold/$curr_bold/$subject"_bld"${curr_bold}_e${j}$BOLD_stem.nii.gz ) then
+							echo "[ERROR]: file $output_dir/$subject/bold/$curr_bold/${subject}_bld${curr_bold}_e${j}$BOLD_stem.nii.gz \
+can not be found" >> $LF
+							echo "[ERROR]: CBIG_preproc_spatial_distortion_correction fail!" >> $LF
+							exit 1
+						endif
+						@ j++
+					end
+				endif
+			end		
+
+			# if spatial distortion correction is done successfully, the following flag value is set to 1
+			set is_distortion_corrected = 1		
+		endif
+
+	##########################################
+	# Preprocess step: multi-echo ICA (ME-ICA)
+	##########################################
+	else if ( "$curr_step" == "CBIG_preproc_multiecho_denoise" ) then
+		## CBIG_preproc_multiecho_denoise
+		if ( $nocleanup == 1) then            # do not cleanup
+			# check if curr_flag contains -nocleanup
+			set flag_ind = `echo $curr_flag | awk '{print index($0, "-nocleanup")}'`
+			if ( $flag_ind == 0 ) then        # 0 means curr_flag does not contain "-nocleanup", add "-nocleanup"
+				set curr_flag = "$curr_flag -nocleanup"
+			endif
+			echo "[$curr_step]: -nocleanup is passed in wrapper function CBIG_preproc_fMRI_preprocess.csh. \
+The intermediate files from multi-echo denoising step will not be removed." >> $LF
+		endif
+
+		set cmd = "$root_dir/CBIG_preproc_multiecho_denoise.csh -s $subject"
+		set cmd = "$cmd -d $output_dir -bld '$zpdbold' -BOLD_stem $BOLD_stem" 
+		set cmd = "$cmd -echo_number $echo_number"
+		set cmd = "$cmd $curr_flag"
+		echo "[$curr_step]: $cmd" >> $LF
+		eval $cmd >&  /dev/null	
+		
+		#update stem
+		set curr_stem = "me"
+		echo "[$curr_step]: bold_stem = $curr_stem" >> $LF
+		set BOLD_stem = $BOLD_stem"_$curr_stem"
+		#check existence of output
+		foreach curr_bold ($zpdbold)
 			if ( ! -e $output_dir/$subject/bold/$curr_bold/$subject"_bld"$curr_bold$BOLD_stem.nii.gz ) then
 				echo "[ERROR]: file $output_dir/$subject/bold/$curr_bold/${subject}_bld$curr_bold$BOLD_stem.nii.gz \
 can not be found" >> $LF
-				echo "[ERROR]: CBIG_preproc_fslmcflirt_outliers fail!" >> $LF
+				echo "[ERROR]: CBIG_preproc_multiecho_denoise fail!" >> $LF
 				exit 1
 			endif
 		end
-	
+		
+		# if multi echo processing is done successfully, the following flag value is set to 1
+		set is_multi_echo_done = 1		
 	##########################################
 	# Preprocess step: function-anatomical registration
 	##########################################
@@ -335,6 +602,39 @@ can not be found" >> $LF
 		set REG_stem = $BOLD_stem
 		set MASK_stem = $BOLD_stem
 		set REG_stem = $REG_stem"_$curr_stem"
+
+		#combine BBR cost with disortion correction and without distortion correction
+		if ( $is_distortion_corrected == 1 ) then
+			# in the CBIG_preproc_bbregister_instra_sub_reg.cost file, the first number is the BBR cost
+			# with distortion correction, the second number is the BBR cost without distortion correction
+			# By right, the first number should not be greater than the second number
+			set bbr_cost_with_sdc = `cat $output_dir/$subject/qc/CBIG_preproc_bbregister_intra_sub_reg.cost`
+			set bbr_cost_without_sdc = `cat $output_dir/$subject/qc/CBIG_preproc_bbregister_intra_sub_reg_no_sdc.cost`
+			# output a warning if BBR cost with SDC is higher than BBR cost without SDC
+			set run_number = 1
+			while ( $run_number < = $#bbr_cost_with_sdc )
+				set bbr_cost_with_sdc_current_run = `printf "%f" $bbr_cost_with_sdc[$run_number]`
+				set bbr_cost_without_sdc_current_run = `printf "%f" $bbr_cost_without_sdc[$run_number]`
+				if ( `echo "$bbr_cost_with_sdc_current_run > $bbr_cost_without_sdc_current_run" | bc` ) then 
+					echo "[WARNING] BBR cost is higher with distortion correction ($bbr_cost_with_sdc)\
+than without distortion correction ($bbr_cost_without_sdc)." >> $LF
+				endif
+				@ run_number = $run_number + 1
+			end
+			unset run_number
+
+			set cmd = "paste $output_dir/$subject/qc/CBIG_preproc_bbregister_intra_sub_reg.cost"
+			set cmd = "$cmd $output_dir/$subject/qc/CBIG_preproc_bbregister_intra_sub_reg_no_sdc.cost >"
+			set cmd = "$cmd $output_dir/$subject/qc/CBIG_preproc_bbregister_intra_sub_reg_sdc.cost"
+			eval $cmd >& /dev/null
+
+			rm $output_dir/$subject/qc/CBIG_preproc_bbregister_intra_sub_reg_no_sdc.cost
+			rm $output_dir/$subject/qc/CBIG_preproc_bbregister_intra_sub_reg.cost
+			set cmd = "mv $output_dir/$subject/qc/CBIG_preproc_bbregister_intra_sub_reg_sdc.cost"
+			set cmd = "$cmd $output_dir/$subject/qc/CBIG_preproc_bbregister_intra_sub_reg.cost"
+			eval $cmd >& /dev/null
+
+		endif
 		
 		#check existence of output
 		foreach curr_bold ($zpdbold)
@@ -380,12 +680,7 @@ can not be found" >> $LF
 	else if ( $curr_step == "CBIG_preproc_censor" ) then
 		
 		# usage of -nocleanup option of censoring interpolation step is allowing the wrapper function
-		if ( $nocleanup != 1) then            # needs to cleanup
-			# if curr_flag contains "-nocleanup", we remove this option
-			set curr_flag = `echo $curr_flag | sed 's/-nocleanup//'`
-			echo "[$curr_step]: -nocleanup is not passed in wrapper function CBIG_preproc_fMRI_preprocess.csh. \
-The intermediate censoring interpolation volume will be removed." >> $LF
-		else                                  # does not need to cleanup
+		if ( $nocleanup == 1) then            # do not cleanup
 			# check if curr_flag contains -nocleanup
 			set flag_ind = `echo $curr_flag | awk '{print index($0, "-nocleanup")}'`
 			if ( $flag_ind == 0 ) then        # 0 means curr_flag does not contain "-nocleanup", add "-nocleanup"
@@ -463,6 +758,7 @@ can not be found" >> $LF
 			endif
 		end
 
+
 	##########################################
 	# Preprocess step: Regression ( Use ouput of last step as the MASK input )
 	##########################################
@@ -503,10 +799,19 @@ can not be found" >> $LF
 	# Preprocess step: Create greyplot (quality control)
 	##########################################
 	else if ( $curr_step == "CBIG_preproc_QC_greyplot" ) then
-		
+		if ( $nocleanup == 1) then            # do not cleanup
+			# check if curr_flag contains -nocleanup
+			set flag_ind = `echo $curr_flag | awk '{print index($0, "-nocleanup")}'`
+			if ( $flag_ind == 0 ) then        # 0 means curr_flag does not contain "-nocleanup", add "-nocleanup"
+				set curr_flag = "$curr_flag -nocleanup"
+			endif
+			echo "[$curr_step]: -nocleanup is passed in wrapper function CBIG_preproc_fMRI_preprocess.csh. \
+The intermediate files from plotting QC greyplot will not be removed." >> $LF
+		endif
+
 		set cmd = "$root_dir/CBIG_preproc_QC_greyplot.csh -s $subject -d $output_dir -anat_s $anat -anat_d "
 		set cmd = "$cmd $SUBJECTS_DIR -bld '$zpdbold' -BOLD_stem $BOLD_stem -REG_stem $REG_stem -MC_stem $mc_stem "
-		set cmd = "$cmd $curr_flag"
+		set cmd = "$cmd -echo_number $echo_number $curr_flag"
 		echo "[$curr_step]: $cmd" >> $LF
 		eval $cmd >&  /dev/null
 		
@@ -518,7 +823,7 @@ can not be found" >> $LF
 				exit 1
 			endif
 		end
-
+		
 	##########################################
 	# Preprocess step: Porjection to fsaverage surface 
 	# (project to high resolution => smooth => downsample to low resolution)
@@ -571,19 +876,14 @@ can not be found" >> $LF
 	else if ( $curr_step == "CBIG_preproc_FC_metrics" ) then
 		
 		# usage of -nocleanup option of censoring interpolation step is allowing the wrapper function
-		if ( $nocleanup != 1) then            # needs to cleanup
-			# if curr_flag contains "-nocleanup", we remove this option
-			set curr_flag = `echo $curr_flag | sed 's/-nocleanup//'`
-			echo "[$curr_step]: -nocleanup is not passed in wrapper function CBIG_fMRI_preprocess.csh. \
-The intermediate files will be removed." >> $LF
-		else                                  # does not need to cleanup
+		if ( $nocleanup == 1) then            # do not cleanup
 			# check if curr_flag contains -nocleanup
 			set flag_ind = `echo $curr_flag | awk '{print index($0, "-nocleanup")}'`
 			if ( $flag_ind == 0 ) then        # 0 means curr_flag does not contain "-nocleanup", add "-nocleanup"
 				set curr_flag = "$curr_flag -nocleanup"
 			endif
 			echo "[$curr_step]: -nocleanup is passed in wrapper function CBIG_fMRI_preprocess.csh. \
-			                    The intermediate files will not be removed." >> $LF
+The intermediate files from FC computation step will not be removed." >> $LF
 		endif
 		
 		set cmd = "$root_dir/CBIG_preproc_FCmetrics_wrapper.csh -s $subject -d $output_dir -bld '$zpdbold' "
@@ -607,7 +907,16 @@ can not be found" >> $LF
 	##########################################
 	
 	else if ( $curr_step == "CBIG_preproc_native2mni" ) then
-		
+		if ( $nocleanup == 1) then            # do not cleanup
+			# check if curr_flag contains -nocleanup
+			set flag_ind = `echo $curr_flag | awk '{print index($0, "-nocleanup")}'`
+			if ( $flag_ind == 0 ) then        # 0 means curr_flag does not contain "-nocleanup", add "-nocleanup"
+				set curr_flag = "$curr_flag -nocleanup"
+			endif
+			echo "[$curr_step]: -nocleanup is passed in wrapper function CBIG_preproc_fMRI_preprocess.csh. \
+The intermediate files from volumetric projection step will not be removed." >> $LF
+		endif
+
 		set cmd = "$root_dir/CBIG_preproc_native2mni.csh -s $subject -d $output_dir -anat_s $anat -anat_d "
 		set cmd = "$cmd $SUBJECTS_DIR -bld '$zpdbold' -BOLD_stem $BOLD_stem -REG_stem $REG_stem $curr_flag"
 		echo "[$curr_step]: $cmd" >> $LF
@@ -645,6 +954,16 @@ can not be found" >> $LF
 	##########################################
 	
 	else if ( $curr_step == "CBIG_preproc_native2mni_ants" ) then
+		if ( $nocleanup == 1) then            # do not cleanup
+			# check if curr_flag contains -nocleanup
+			set flag_ind = `echo $curr_flag | awk '{print index($0, "-nocleanup")}'`
+			if ( $flag_ind == 0 ) then        # 0 means curr_flag does not contain "-nocleanup", add "-nocleanup"
+				set curr_flag = "$curr_flag -nocleanup"
+			endif
+			echo "[$curr_step]: -nocleanup is passed in wrapper function CBIG_preproc_fMRI_preprocess.csh. \
+The intermediate files from volumetric projection step will not be removed." >> $LF
+		endif
+
 		set cmd = "$root_dir/CBIG_preproc_native2mni_ants.csh -s $subject -d $output_dir -anat_s $anat -anat_d"
 		set cmd = "$cmd $SUBJECTS_DIR -bld '$zpdbold' -BOLD_stem $BOLD_stem -REG_stem $REG_stem $curr_flag"
 		echo "[$curr_step]: $cmd" >> $LF
@@ -687,7 +1006,7 @@ can not be found" >> $LF
 		exit 1
 		
 	endif
-			
+
 end
 
 #########################################
@@ -704,7 +1023,7 @@ foreach file (`cat $cleanup_file`)
 	rm $file
 end
 endif
-exit 1
+exit 0
 
 ##########################################
 # Parse Arguments 
@@ -801,6 +1120,7 @@ endif
 if ( "$config" == "" ) then
 	echo "ERROR: subject's configuration file not specified"
 	exit 1;
+
 endif				
 goto check_params_return;
 
@@ -847,7 +1167,25 @@ DESCRIPTION:
 	    does motion correction with spline interpolation and calculates Framewise Displacement and DVARS, 
 	    then generates a vector indicating censored frames (1:keep 0:censored). This step throws away the
 	    runs where the number of outliers are more than the threshold set by -discard-run option.
-	(4) [CBIG_preproc_bbregister] 
+	(4) [CBIG_spatial_distortion_correction -fpm "oppo_PED" -j_minus <j_minus_image> -j_plus <j_plus_image>\
+		-j_minus_trt <j_minus_total_readout_time> -j_plus_trt <j_plus_total_readoutime>\
+	    -ees <effective_echo_spacing> -te <TE>]
+		or
+		[CBIG_preproc_spatial_distortion_correction -fpm "mag+phasediff"\ 
+	    -m <magnitude_image> -p <phase_difference_image> -delta <phase_image_TE_difference> -ees <effective_echo_spacing>\
+	    -te <TE>]
+	    corrects for spatial distortion caused by susceptibilty-induced off-resonance field. This step requires fieldmap
+	    images (either in magnitude and phase differnce form or opposite phase encoding directions form) and assumes that 
+	    the functional image has gone through motion correction. Note that in the case of opposite phase ecnoding 
+	    direction, please ensures that FSL version is 5.0.10, the outputs may otherwise be erroneous; also, this script 
+	    currently only supports phase encoding directions along AP (j-) and PA (j) directions. For more details, please 
+		refer to our spatial distortion correction READEME here: $CBIG_CODE_DIR/stable_projects/preprocessing/ 
+		CBIG_fMRI_Preproc2016/spatial_distortion_correction_readme.md
+	(5) [CBIG_preproc_multiecho_denoise -echo_time 12,30.11,48.22]
+	    Apply optimal combination of different echos and denoising by ME-ICA method using TEDANA. This step needs 
+		echo times for each echo in order. For more details, please refer to our readme for multi-echo preprcessing: 
+		$CBIG_CODE_DIR/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/multi_echo_tedana_readme.md
+	(6) [CBIG_preproc_bbregister] 
 	    a) Do bbregister with fsl initialization for each run. 
 	    b) Choose the best run with lowest bbr cost. Apply the registration matrix of the best run to 
 	    other runs and recompute the bbr cost. If the cost computed using best run registration is 
@@ -855,25 +1193,25 @@ DESCRIPTION:
 	    run registration as the final registration of this run. Otherwise, use the original registration.
 	    c) To save disk space, it also generates a loose whole brain mask and applies it to input fMRI 
 	    volumes. If you follow the default config file, then the input fMRI volumes are motion corrected volumes.
-	(5) [CBIG_preproc_regress -whole_brain -wm -csf -motion12_itamar -detrend_method detrend -per_run -censor \
+	(7) [CBIG_preproc_regress -whole_brain -wm -csf -motion12_itamar -detrend_method detrend -per_run -censor \
 	     -polynomial_fit 1] 
 	    regresses out motion, whole brain, white matter, ventricle, linear regressors for each run seperately. 
 	    If the data have censored frames, this function will first estimate the beta coefficients ignoring the 
 	    censored frames and then apply the beta coefficients to all frames to regress out those regressors.  
-	(6) [CBIG_preproc_censor -nocleanup -max_mem NONE] 
+	(8) [CBIG_preproc_censor -nocleanup -max_mem NONE] 
 	    removes (ax+b) trend of censored frames, then does censoring with interpolation. For interpolation method, 
 	    please refer to (Power et al. 2014). In our example_config.txt, "-max_mem NONE" means the maximal memory usage 
 	    is not specified, the actual memory usage will vary according to the size of input fMRI file (linearly 
 	    proportional). If you want to ensure the memory usage does not exceed 10G, for example, you can pass in 
 	    "-max_mem 9".
-	(7) [CBIG_preproc_despiking]
+	(9) [CBIG_preproc_despiking]
 	    uses AFNI 3dDespike to conduct despiking. This function can be used to replace censoring interpolation step (6),  
 	    depending on the requirement of users.
-	(8) [CBIG_preproc_bandpass -low_f 0.009 -high_f 0.08 -detrend] 
+	(10) [CBIG_preproc_bandpass -low_f 0.009 -high_f 0.08 -detrend] 
 	    does bandpass filtering with passband = [0.009, 0.08] (boundaries are included). This step applies FFT 
 	    on timeseries and cuts off the frequencies in stopbands (rectanguluar filter), then performs inverse FFT 
 	    to get the result.
-	(9) [CBIG_preproc_QC_greyplot -FD_th 0.2 -DV_th 50]
+	(11) [CBIG_preproc_QC_greyplot -FD_th 0.2 -DV_th 50]
 	    creates greyplots for quality control purpose. Greyplots contain 4 subplots: framewise displacement trace (with 
 	    censoring threshold), DVARS trace (with censoring threshold), global signal, and grey matter timeseries.
 	    In our default config file, we only create the grey plots just before projecting the data to surface/volumetric 
@@ -881,16 +1219,16 @@ DESCRIPTION:
 	    to compare the greyplots after different steps, they can insert this step multiple times in the config file 
 	    (but must be after CBIG_preproc_bbregister step because it needs intra-subject registration information to 
 	    create masks).
-	(10) [CBIG_preproc_native2fsaverage -proj fsaverage6 -down fsaverage5 -sm 6] 
+	(12) [CBIG_preproc_native2fsaverage -proj fsaverage6 -down fsaverage5 -sm 6] 
 	    projects fMRI to fsaverage6, smooths it with fwhm = 6mm and downsamples it to fsaverage5.
-	(11) [CBIG_preproc_FC_metrics -Pearson_r -censor -lh_cortical_ROIs_file <lh_cortical_ROIs_file> \
+	(13) [CBIG_preproc_FC_metrics -Pearson_r -censor -lh_cortical_ROIs_file <lh_cortical_ROIs_file> \
 	      -rh_cortical_ROIS_file <rh_cortical_ROIs_file>]
 	    computes FC (functional connectivity) metrics based on both cortical and subcortical ROIs. The cortical ROIs 
 	    can be passed in by -lh_cortical_ROIs and -rh_cortical_ROIs. The subcortical ROIs are 19 labels extracted 
 	    from aseg in subject-specific functional space. This function will support for multiple types of FC metrics
 	    in the future, but currently we only support static Pearson's correlation by using "-Pearson_r" flag. 
 	    If "-censor" flag is used, the censored frames are ignored when computing FC metrics.
-	(12) [CBIG_preproc_native2mni_ants -sm_mask \
+	(14) [CBIG_preproc_native2mni_ants -sm_mask \
 	      ${CBIG_CODE_DIR}/data/templates/volume/FSL_MNI152_masks/SubcorticalLooseMask_MNI1mm_sm6_MNI2mm_bin0.2.nii.gz \
 	      -final_mask ${FSL_DIR}/data/standard/MNI152_T1_2mm_brain_mask_dil.nii.gz]
 	    first, projects fMRI to FSL MNI 2mm space using ANTs registration; second, smooth it by fwhm = 6mm within 
@@ -898,9 +1236,9 @@ DESCRIPTION:
 	    Caution: if you want to use this step, please check your ANTs software version. There is a bug in early builds 
 	    of ANTs (before Aug 2014) that causes resampling for timeseries to be wrong. We have tested that our codes 
 	    would work on ANTs version 2.2.0. 
-	(13) [CBIG_preproc_native2mni -down FSL_MNI_2mm -sm 6 -sm_mask <sm_mask> -final_mask <final_mask>] 
-	    it has the similar functionality as (12) but using FreeSurfer with talairach.m3z, not ANTs. We suggest the 
-	    users use (12) instead of (13).
+	(15) [CBIG_preproc_native2mni -down FSL_MNI_2mm -sm 6 -sm_mask <sm_mask> -final_mask <final_mask>] 
+	    it has the similar functionality as (13) but using FreeSurfer with talairach.m3z, not ANTs. We suggest the 
+	    users use (13) instead of (14).
 	    First, this step projects fMRI to FreeSurfer nonlinear space; second, projects the image from FreeSurfer 
 	    nonlinear space to FSL MNI 1mm space; third, downsamples the image from FSL MNI 1mm space to FSL MNI 2mm space; 
 	    fourth, smooths it by fwhm = 6mm within <sm_mask>; and last, masks the result by <final_mask> to save disk 
@@ -924,13 +1262,20 @@ DESCRIPTION:
    
 REQUIRED ARGUMENTS:
 	-s  <subject>              : subject ID
-	-fmrinii  <fmrinii>        : fmrinii text file including 2 columns, the 1st column contains all run numbers, 
-	                            the 2nd column specify the absolute path to raw functional nifti files for 
+	-fmrinii  <fmrinii>        : fmrinii text file including n+1 columns, the 1st column contains all run numbers, 
+	                            where n stands for echo number.
+	                            For single echo case, fmrinii text file should include 2 columns
+	                            the rest columns specify the absolute path to raw functional nifti files for each echo in
 	                            corresponding run. An example file is here: 
 	                            ${CBIG_CODE_DIR}/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/example_fmrinii.txt
-	                            Example of <fmrinii> content:
+	                            Example of single echo <fmrinii> content:
 	                            002 /data/../Sub0015_bld002_rest.nii.gz
 	                            003 /data/../Sub0015_bld003_rest.nii.gz
+	                            Example of multi echo <fmrinii> content:
+	                            001 /data/../Sub0015_bld001_e1_rest.nii.gz /data/../Sub0015_bld001_e2_rest.nii.gz \
+								/data/../Sub0015_bld001_e3_rest.nii.gz
+	                            002 /data/../Sub0015_bld002_e1_rest.nii.gz /data/../Sub0015_bld002_e2_rest.nii.gz \
+								/data/../Sub0015_bld002_e3_rest.nii.gz
 
 	-anat_s  <anat>            : FreeSurfer recon-all folder name of this subject (relative path)
 	-anat_d  <anat_dir>        : specify anat directory to recon-all folder (full path), i.e. <anat_dir> contains <anat>
@@ -945,7 +1290,8 @@ REQUIRED ARGUMENTS:
 	                            ###CBIG fMRI preprocessing configuration file
 	                            ###The order of preprocess steps is listed below
 	                            CBIG_preproc_skip -skip 4
-	                            CBIG_preproc_fslslicetimer -slice_timing ${CBIG_CODE_DIR}/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/example_slice_timing.txt
+	                            CBIG_preproc_fslslicetimer -slice_timing \
+${CBIG_CODE_DIR}/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/example_slice_timing.txt
 	                            CBIG_preproc_fslmcflirt_outliers -FD_th 0.2 -DV_th 50 -discard-run 50 -rm-seg 5
 
 	                            The symbol # in the config file also means comment, you can write anything you want if 
@@ -1002,7 +1348,8 @@ OUTPUTS:
 		"sm6" = data smoothed with a FWHM = 6mm kernel
 		"finalmask" = masking the final image to save space.
 		b. 
-		vol/Sub0033_Ses1_bld002_rest_skip4_stc_mc_resid_interp_FDRMS0.2_DVARS50_bp_0.009_0.08_FS1mm_MNI1mm_MNI2mm_sm6_finalmask.nii.gz 
+		vol/Sub0033_Ses1_bld002_rest_skip4_stc_mc_resid_interp_FDRMS0.2_DVARS50_bp_0.009_0.08_FS1mm_MNI1mm_MNI2mm_\
+		sm6_finalmask.nii.gz 
 		is the BOLD data of run 002 ("bld002") in subject "Sub0033_Ses1", generated after CBIG_preproc_native2mni step. 
 		The remaining descriptors in the filename describe the order of the processing steps. In particular,
 		"FS1mm" = projection of data to freesurfer nonlinear 1mm volumetric space
diff --git a/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/CBIG_preproc_fslmcflirt_outliers.csh b/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/CBIG_preproc_fslmcflirt_outliers.csh
index e35c940..bca1ad0 100755
--- a/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/CBIG_preproc_fslmcflirt_outliers.csh
+++ b/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/CBIG_preproc_fslmcflirt_outliers.csh
@@ -12,26 +12,36 @@
 # 5) 1 frame before 2 frames after each removed frame will also be removed, as well as kept segments of data lasting 
 #    fewer than $discard_seg contiguous frames will be removed. If not specified, the default is 5.
 # 6) discard the run which has more than <rm_run_th>% of frames being removed
+# 7) For multi-echo case, here we do motion correction only on the first echo, and the DVARS and FD are computed 
+#    based on the first echo only then apply the transformation matrices to the rest of echoes.
 # Example: 
 #	$CBIG_CODE_DIR/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/CBIG_preproc_fslmcflirt_outliers.csh 
 #	-s Sub0033_Ses1 -d ~/storage/FMRI_preprocess -bld '002 003' -BOLD_stem _rest_skip4_stc -nframe 0 
 #	-FD_th 0.2 -DVARS 50 -discard-run 50 -rm-seg 5
 #############################################
-# Author: RU(BY) KONG
+# Author: RU(BY) KONG, XINGYU LYU
 # Written by CBIG under MIT license: https://github.com/ThomasYeoLab/CBIG/blob/master/LICENSE.md
 
 set VERSION = '$Id: CBIG_preproc_fslmcflirt_outliers.csh, v 1.0 2016/06/09 $'
 
 set n = `echo $argv | grep -e -help | wc -l`
 
-# if there is no arguments or there is -help option 
-if( $#argv == 0 || $n != 0 ) then
+# if there is -help option 
+if( $n != 0 ) then
 	echo $VERSION
 	# print help	
 	cat $0 | awk 'BEGIN{prt=0}{if(prt) print $0; if($1 == "BEGINHELP") prt = 1 }'
 	exit 0;
 endif
 
+# if there is no arguments
+if( $#argv == 0 ) then
+	echo $VERSION
+	# print help	
+	cat $0 | awk 'BEGIN{prt=0}{if(prt) print $0; if($1 == "BEGINHELP") prt = 1 }'
+	echo "WARNING: No input arguments. See above for a list of available input arguments."
+	exit 0;
+endif
 
 set n = `echo $argv | grep -e -version | wc -l`
 if($n != 0) then
@@ -51,6 +61,10 @@ set nocleanup = 0; # Default clean up intermediate file
 set discard_seg = 5; # Default will remove kept segments of data lasting fewer than 5 contiguous frames
 set rm_run_th = 50; # Default will discard the run which has more than 50% of frames being removed
 set spline_final = 0; # spline_final flag in mcflirt, 0 for trilinear interpolation, 1 for spline interpolation
+set low_f = ""; # default no filtering of respiratory pseudomotion
+set high_f = ""; # default no filtering of respiratory pseudomotion
+set echo_number = 1 # number of echos default to be 1
+set echo_stem = ""
 
 goto parse_args;
 parse_args_return:
@@ -105,16 +119,20 @@ cd $boldfolder
 set base_bold = $boldfolder/$zpdbold[1]
 echo "[MC]: base_bold = $base_bold" |& tee -a $LF
 
-
+## For multi-echo case, here we do motion correction only on the first echo, 
+## then apply the transformation matrices to the rest of echoes.
+## set echo_stem based on echo number
+if ($echo_number != 1) then
+	set echo_stem = _e1
+endif
 
 #############################################
 # Generate Template use n-th frame of the first run
 #############################################
 
-echo "=======================Generate template.nii.gz..(n-th frame of the base_bold, default is 1st frame)=======================" |& tee -a $LF
+echo "=========Generate template.nii.gz..(n-th frame of the base_bold, default is 1st frame)=========" |& tee -a $LF
 pushd $base_bold
-
-set base_boldfile = $subject"_bld"$zpdbold[1]$BOLD_stem
+set base_boldfile = $subject"_bld"$zpdbold[1]$echo_stem$BOLD_stem
 echo "[MC]: use $nframe +1 as the template" |& tee -a $LF
 if ( (! -e  $boldfolder/mc_template.nii.gz) || ($force == 1)) then
 	#Motion correction template is the nframe = $nframe, default is the first frame
@@ -136,8 +154,7 @@ echo "" |& tee -a $LF
 echo "=======================Merge each run with template=======================" |& tee -a $LF
 foreach curr_bold ($zpdbold)
 	pushd $curr_bold
-	
-	set boldfile = $subject"_bld"$curr_bold$BOLD_stem
+	set boldfile = $subject"_bld"$curr_bold$echo_stem$BOLD_stem
 	echo "[MC]: boldfile = $boldfile" |& tee -a $LF
 	if ( (! -e  $boldfile"_merge.nii.gz") || ($force == 1) ) then
 		fslmerge -t $boldfile"_merge" $template $boldfile |& tee -a $LF
@@ -157,8 +174,7 @@ echo "" |& tee -a $LF
 echo "=======================Motion correction: mcflirt and split=======================" |& tee -a $LF
 foreach curr_bold ($zpdbold)
 	pushd $curr_bold
-	
-	set boldfile = $subject"_bld"$curr_bold$BOLD_stem
+	set boldfile = $subject"_bld"$curr_bold$echo_stem$BOLD_stem
 	if ( (! -e  $boldfile"_mc.nii.gz") || ($force == 1) ) then
 		set cmd = "mcflirt -in ${boldfile}_merge.nii.gz -out ${boldfile}_mc -plots -refvol 0 -rmsrel -rmsabs -mats"
 		if ($spline_final == 1) then
@@ -167,14 +183,13 @@ foreach curr_bold ($zpdbold)
 		echo $cmd |& tee -a $LF
 		eval $cmd >> $LF
 		mv $boldfile"_mc.nii.gz" $boldfile"_mc_tmp.nii.gz"
-		set numof_tps = `fslnvols $boldfile` 
+		set numof_tps = `fslnvols $boldfile".nii.gz"` 
 		fslroi $boldfile"_mc_tmp" $boldfile"_mc" 1 $numof_tps |& tee -a $LF
 		rm $boldfile"_mc_tmp.nii.gz"
 	else
 		echo "=======================mcflirt and split already done!=======================" |& tee -a $LF
 	endif
-	rm ${boldfile}_mc.mat/MAT_0000
-	cat ${boldfile}_mc.mat/MAT* > ${boldfile}_mc.cat
+
 	ln -s $boldfolder/$curr_bold/${boldfile}_mc_rel.rms $qc/${subject}_bld${curr_bold}_mc_rel.rms
 	ln -s $boldfolder/$curr_bold/${boldfile}_mc_abs.rms $qc/${subject}_bld${curr_bold}_mc_abs.rms
 	ln -s $boldfolder/$curr_bold/${boldfile}_mc_rel_mean.rms $qc/${subject}_bld${curr_bold}_mc_rel_mean.rms
@@ -185,7 +200,6 @@ end
 echo "=======================mcflirt and split done!=======================" |& tee -a $LF
 echo "" |& tee -a $LF
 
-
 #############################################
 # Plot mcflirt parameters
 #############################################
@@ -194,12 +208,13 @@ foreach curr_bold ($zpdbold)
 	pushd $curr_bold
 	
 	pwd |& tee -a $LF
-	set mc_par_file = "${subject}_bld${curr_bold}${BOLD_stem}_mc.par"
-	set mc_abs_rms_file = "${subject}_bld${curr_bold}${BOLD_stem}_mc_abs.rms"
-	set mc_rel_rms_file = "${subject}_bld${curr_bold}${BOLD_stem}_mc_rel.rms"
-	set outname_prefix = "${subject}_bld${curr_bold}${BOLD_stem}_mc"
+	set mc_par_file = ${boldfile}_mc.par
+	set mc_abs_rms_file = ${boldfile}_mc_abs.rms
+	set mc_rel_rms_file = ${boldfile}_mc_rel.rms
+	set outname_prefix = ${boldfile}_mc
 	
-	set cmd = ( $MATLAB -nodesktop -nodisplay -nosplash -r '"' 'addpath(genpath('"'"${root_dir}'/utilities'"'"'))'; CBIG_preproc_plot_mcflirt_par $mc_par_file $mc_abs_rms_file $mc_rel_rms_file $qc $outname_prefix; exit; '"' );
+	set cmd = ( $MATLAB -nodesktop -nodisplay -nosplash -r '"' 'addpath(genpath('"'"${root_dir}'/utilities'"'"'))'; \
+		CBIG_preproc_plot_mcflirt_par $mc_par_file $mc_abs_rms_file $mc_rel_rms_file $qc $outname_prefix; exit; '"' );
 	echo $cmd |& tee -a $LF
 	eval $cmd |& tee -a $LF
 	
@@ -207,7 +222,6 @@ foreach curr_bold ($zpdbold)
 end
 echo "=========================== Plot mcflirt parameters done =============================" |& tee -a $LF
 
-
 #############################################
 #compute FDRMS and DVARS
 #############################################
@@ -215,14 +229,15 @@ echo "=========================== Plot mcflirt parameters done =================
 echo "=======================FSL motion outliers=======================" |& tee -a $LF
 foreach curr_bold ($zpdbold)
 	pushd $curr_bold
-	
-	set boldfile = $subject"_bld"$curr_bold$BOLD_stem
+	set boldfile = $subject"_bld"$curr_bold$echo_stem$BOLD_stem
 	mkdir -p $mc/tmp_outliers/$curr_bold
 	
 	# Use DVARS as metric
 	if ( (! -e $mc/${boldfile}_motion_outliers_DVARS) || ($force == 1) ) then
 		echo "[MC]: bold = $curr_bold Perform FSL motion outliers with metric = dvars" |& tee -a $LF
-		set cmd = "fsl_motion_outliers -i ${boldfile}_mc -o $mc/${boldfile}_motion_outliers_confound_DVARS -s $mc/${boldfile}_motion_outliers_DVARS -p $mc/${boldfile}_motion_outliers_DVARS -t $mc/tmp_outliers/$curr_bold --dvars --nomoco"
+		set cmd = "fsl_motion_outliers -i ${boldfile}_mc -o $mc/${boldfile}_motion_outliers_confound_DVARS \
+					-s $mc/${boldfile}_motion_outliers_DVARS -p $mc/${boldfile}_motion_outliers_DVARS \
+					-t $mc/tmp_outliers/$curr_bold --dvars --nomoco"
 		echo $cmd |& tee -a $LF
 		eval $cmd >> $LF
 	else
@@ -232,8 +247,8 @@ foreach curr_bold ($zpdbold)
 	#Use FDRMS as metric
 	if ( (! -e $mc/${boldfile}_motion_outliers_FDRMS) || ($force == 1) ) then
 		echo "[MC]: bold = $curr_bold Perform FSL motion outliers with metric = fdrms" |& tee -a $LF
-	
-		set cmd = "fsl_motion_outliers -i $boldfile -o $mc/${boldfile}_motion_outliers_confound_FDRMS -s $mc/${boldfile}_motion_outliers_FDRMS -p $mc/${boldfile}_motion_outliers_FDRMS -t $mc/tmp_outliers/$curr_bold --fdrms"
+		set cmd = "${root_dir}/utilities/CBIG_preproc_compute_FDRMS_wrapper.sh \
+		$boldfile $mc $mc/tmp_outliers/$curr_bold "$low_f" "$high_f""			
 		echo $cmd |& tee -a $LF
 		eval $cmd >> $LF
 	else
@@ -249,21 +264,23 @@ echo "" |& tee -a $LF
 # Outlier Detection
 #############################################
 
-echo "=======================Compute correlation between DVARS and FDRMS and detect the motion outliers=======================" |& tee -a $LF
+echo "=============Compute correlation between DVARS and FDRMS and detect the motion outliers===========" |& tee -a $LF
 foreach curr_bold ($zpdbold)
 	pushd $curr_bold
-	
-	set boldfile = $subject"_bld"$curr_bold$BOLD_stem
+	set boldfile = $subject"_bld"$curr_bold$echo_stem$BOLD_stem
 	if ( (! -e "$qc/${subject}_bld${curr_bold}_FDRMS${fd_th}_DVARS${dv_th}_motion_outliers.txt") || ($force == 1) ) then
 		set output = "$qc/${subject}_bld${curr_bold}"
 		set dvars_file = "$mc/${boldfile}_motion_outliers_DVARS"
 		set fd_file = "$mc/${boldfile}_motion_outliers_FDRMS"
-		set cmd = ( $MATLAB -nodesktop -nodisplay -nosplash -r '"' 'addpath(genpath('"'"${root_dir}'/utilities'"'"'))'; CBIG_preproc_DVARS_FDRMS_Correlation $dvars_file $fd_file $output; CBIG_preproc_motion_outliers $dvars_file $fd_file $fd_th $dv_th $discard_seg $output; exit; '"' );
+		set cmd = ( $MATLAB -nodesktop -nodisplay -nosplash -r '"' 'addpath(genpath('"'"${root_dir}'/utilities'"'"'))'; \
+			CBIG_preproc_DVARS_FDRMS_Correlation $dvars_file $fd_file $output; \
+			CBIG_preproc_motion_outliers $dvars_file $fd_file $fd_th $dv_th $discard_seg $output; exit; '"' );
 		eval $cmd |& tee -a $LF
 	else
 		echo "[MC]: Motion outliers detection already created!" |& tee -a $LF
 	endif
-	echo "[MC]: Motion outliers is in $qc/${subject}_bld${curr_bold}_FDRMS${fd_th}_DVARS${dv_th}_motion_outliers.txt" |& tee -a $LF
+	echo "[MC]: Motion outliers is in $qc/${subject}_bld${curr_bold}_FDRMS${fd_th}_DVARS${dv_th}_motion_outliers.txt" \
+		|& tee -a $LF
 	
 	popd
 end
@@ -276,8 +293,7 @@ echo "*********************************************************************" |&
 if ( $nocleanup != 1 ) then
 	foreach curr_bold ($zpdbold)
 		pushd $curr_bold
-		
-		set boldfile = $subject"_bld"$curr_bold$BOLD_stem
+		set boldfile = $subject"_bld"$curr_bold$echo_stem$BOLD_stem
 		set mergefile = $boldfile"_merge.nii.gz"
 		rm $mergefile
 		
@@ -285,12 +301,12 @@ if ( $nocleanup != 1 ) then
 	end
 endif
 
-
 ###############################################
 # check if the number of outliers exceeds 50% of total number of frames
 ###############################################
 if ($rm_run == 1) then 
-	echo "========= check if the number of outliers exceeds $rm_run_th% of total number of frames for each run =========" |& tee -a $LF
+	echo "========= check if the number of outliers exceeds $rm_run_th% of total number of frames for each run ===== \
+	====" |& tee -a $LF
 	set bold_file = "$sub_dir/$subject/logs/${subject}.bold"
 	echo "[MC]: bold_file = $bold_file" |& tee -a $LF
 	foreach runfolder ($zpdbold)
@@ -318,16 +334,47 @@ if ($rm_run == 1) then
 endif
 
 #########################
+# apply transformation on other echoes for multi-echo data
+#########################
+echo "====================== apply transformation on other echos ======================" |& tee -a $LF
+cd $sub_dir/$subject/bold
+foreach curr_bold ($zpdbold)
+	pushd $curr_bold
+	set i = 2
+	while ( $i <= $echo_number)
+		set xfm_dir="$subject"_bld"$curr_bold"_e1"$BOLD_stem"_mc.mat
+		set cmd = (applyxfm4D "$subject"_bld"$curr_bold"_e$i"$BOLD_stem".nii.gz) 
+		set cmd = ( $cmd "$subject"_bld"$curr_bold"_e$i"$BOLD_stem".nii.gz)
+		set cmd = ( $cmd "$subject"_bld"$curr_bold"_e$i"$BOLD_stem"_mc.nii.gz ${xfm_dir} -fourdigit)
+		echo $cmd |& tee -a $LF
+		eval $cmd
+		@ i++
+	end
+	# remove MAT_0000 for spatial distortion correction
+	echo "=========remove MAT_0000 and generate transformation matrix========="
+	set boldfile = $subject"_bld"$curr_bold$echo_stem$BOLD_stem
+	rm ${boldfile}_mc.mat/MAT_0000
+	cat ${boldfile}_mc.mat/MAT* > ${boldfile}_mc.cat
+	popd
+end
+echo "====================== apply transformation on other echos finished ======================" |& tee -a $LF
+
+#########################
 # Output last commit of current function 
 #########################
 # check if git exists
 which git
 if (! $status) then
 	echo "=======================Git: Last Commit of Current Function =======================" |& tee -a $LF
-	git -C ${CBIG_CODE_DIR} log -1 -- stable_projects/preprocessing/CBIG_fMRI_Preproc2016/CBIG_preproc_fslmcflirt_outliers.csh >> $LF
+	pushd ${CBIG_CODE_DIR}
+	git log -1 -- ${CBIG_CODE_DIR}/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/\
+		CBIG_preproc_fslmcflirt_outliers.csh >> $LF
+	popd
 endif
+echo "******************************************************************************"  |& tee -a $LF
+echo ""
 
-exit 1;
+exit 0;
 
 ##########################################
 # Parse Arguments 
@@ -387,7 +434,7 @@ while( $#argv != 0 )
 			
 		#clean up intermediate files
 		case "-nocleanup":
-			set nocleanup =1;
+			set nocleanup = 1;
 			breaksw
 		
 		#throw run which has more than 50% frames detected as outliers
@@ -407,6 +454,24 @@ while( $#argv != 0 )
 		case "-spline_final":
 			set spline_final = 1;
 			breaksw
+			
+		# start frequency of respiration. The motion parameters between low_f and high_f will be filtered out
+		case "-low_f":
+			if ( $#argv == 0 ) goto arg1err;
+			set low_f = "$argv[1]"; shift;
+			breaksw
+			
+		# stop frequency of respiration. The motion parameters between low_f and high_f will be filtered out
+		case "-high_f":
+			if ( $#argv == 0 ) goto arg1err;
+			set high_f = "$argv[1]"; shift;
+			breaksw
+
+		#number of echos
+		case "-echo_number":
+			if ( $#argv == 0 ) goto arg1err;
+			set echo_number = "$argv[1]"; shift;
+			breaksw
 
 		default:
 			echo ERROR: Flag $flag unrecognized.
@@ -439,6 +504,7 @@ if ( "$BOLD_stem" == "" ) then
 	echo "ERROR: input file stem not specified"
 	exit 1;
 endif
+
 goto check_params_return;
 
 ##########################################
@@ -461,7 +527,9 @@ NAME:
 DESCRIPTION:
 	This function 
 	  1) uses mcflirt to do the motion correction. 
-	  2) uses fsl_motion_outliers to obtain FDRMS and DVARS. 
+	  2) uses fsl_motion_outliers to obtain FDRMS and DVARS. It can also perfrom respiratory pseudomotion filtering
+	     on motion parameters before computing FDRMS if -low_f is passed in. See respiratory_pseudomotion_filtering.md
+	     for more details.
 	  3) uses DV_th and FD_th as threholds of DVARS and FDRMS to find outliers (high-motion frames). 
 	     The default DV_th is 50; the default FD_th is 0.2. Frames either above FD_th or above DV_th 
 	     will be regarded as outliers. 
@@ -471,7 +539,8 @@ DESCRIPTION:
 	  5) discards the run which has more than <rm_run_th>% of frames of outliers.
 	     In the output motion outlier text file, 0 means removing this frame, 1 means keeping this 
 	     frame. 
-
+	  6) For multi-echo case, here we do motion correction only on the first echo and FD and DVARS are computed 
+	     by first echo only, then apply the transformation matrices to the rest of echoes.
 
 REQUIRED ARGUMENTS:
 	-s  <subject_id>           : subject's ID
@@ -494,7 +563,15 @@ OPTIONAL ARGUMENTS:
 	-rm-seg  <discard_seg>     : label the low-motion segments of data lasting fewer than <discard_seg> 
 	                             contiguous frames as outliers.
 	-spline_final              : interpolation method used in mcflirt, if the this option is used, the
-								 interpolation method is spline, otherwise it is trilinear
+	                             interpolation method is spline, otherwise it is trilinear
+	-low_f                     : start frequency of respiration. If the both this argument and high_f is used, the
+	                             motion parameters will go through a bandstop filter to filter out the respiration
+	                             pseudomotion, where the stop band is between low_f and high_f. If only this argument
+	                             is used, the motion paramters will go through a lowpass filter, where the stop
+	                             frequency is low_f. See respiratory_pseudomotion_filtering.md for more details
+	-high_f                    : stop frequency of respiration. It can only be used together with low_f
+	-echo_number <echo_number> : number of echoes. For single echo data, default set to be 1.
+    -nocleanup                 : use this flag to keep all intermediate files
 	-help                      : help
 	-version                   : version
 
@@ -534,6 +611,3 @@ EXAMPLE:
 	$CBIG_CODE_DIR/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/CBIG_preproc_fslmcflirt_outliers.csh 
 	-s Sub0033_Ses1 -d ~/storage/FMRI_preprocess -bld '002 003' -BOLD_stem _rest_skip4_stc -nframe 0 
 	-FD_th 0.2 -DVARS 50 -discard-run 50 -rm-seg 5
-
-
-
diff --git a/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/CBIG_preproc_fslslicetimer.csh b/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/CBIG_preproc_fslslicetimer.csh
index 32f6d28..472e55a 100755
--- a/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/CBIG_preproc_fslslicetimer.csh
+++ b/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/CBIG_preproc_fslslicetimer.csh
@@ -5,10 +5,11 @@
 #	-s Sub0001_Ses1 -d ~/storage/fMRI_preprocess -bld '002 003' -BOLD_stem _rest_skip4 -slice_order
 #	${CBIG_CODE_DIR}/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/example_slice_order.txt
 #
-# This function uses FSL slicetimer to conduct slice timing correction. One slice timing file or slice order file is needed. 
+# This function uses FSL slicetimer to conduct slice timing correction. 
+# One slice timing file or slice order file is needed. 
 # If no one is passed in, the programme will generate a slice order file automatically. The default one is Siemens.
 #
-# Written by Jingwei Li.
+# Written by Jingwei Li, Xingyu Lyu.
 # Written by CBIG under MIT license: https://github.com/ThomasYeoLab/CBIG/blob/master/LICENSE.md
 
 #BOLD: basename of each run input
@@ -19,6 +20,8 @@ set subject = ""       # subject ID
 set sub_dir = ""       # directory to subjects
 set bold = ""          # bold numbers, e.g. '002 003'
 set BOLD_stem = ""     # BOLD stem, e.g. _rest
+set echo_number = 1    # number of echos default to be 1
+set echo_stem = ""
 set stc_suffix = "_stc"
 
 # Print help and version
@@ -26,14 +29,23 @@ set VERSION = '$Id: CBIG_preproc_fslslicetimer.csh v 1.0 2016/05/26'
 
 set n = `echo $argv | grep -e -help | wc -l`
 
-# if there is no arguments or there is -help option 
-if( $#argv == 0 || $n != 0 ) then
+# if there is -help option 
+if( $n != 0 ) then
 	echo $VERSION
 	# print help	
 	cat $0 | awk 'BEGIN{prt=0}{if(prt) print $0; if($1 == "BEGINHELP") prt = 1 }'
 	exit 0;
 endif
 
+# if there is no arguments
+if( $#argv == 0 ) then
+	echo $VERSION
+	# print help	
+	cat $0 | awk 'BEGIN{prt=0}{if(prt) print $0; if($1 == "BEGINHELP") prt = 1 }'
+	echo "WARNING: No input arguments. See above for a list of available input arguments."
+	exit 0;
+endif
+
 set n = `echo $argv | grep -e -version | wc -l`
 if($n != 0) then
 	echo $VERSION
@@ -46,12 +58,9 @@ parse_args_return:
 goto check_params;
 check_params_return:
 
-
 set currdir = `pwd`
 cd $sub_dir/$subject
 
-
-
 ###########################
 # create log file
 ###########################
@@ -75,6 +84,18 @@ echo "[STC]: boldfolder = $boldfolder" |& tee -a $LF
 
 pushd $boldfolder
 
+##########################
+# split slice time file
+##########################
+if ( $?st_file_in ) then
+	set st_file_ins = ($st_file_in:as/,/ /)
+	# check sclie time file number 
+	if ( $echo_number != $#st_file_ins ) then
+		echo "ERROR: input number of slice time files not consistent with echo number"
+		exit 1;
+	endif
+endif
+
 echo "===================== Slice time correction, using fsl ======================" |& tee -a $LF
 
 set run_count = 0
@@ -82,120 +103,169 @@ foreach runfolder ($bold)
 	echo ">>> Run: $runfolder"
 	set run_count = `expr $run_count + 1`
 	pushd $runfolder
-	set BOLD = ${subject}"_bld${runfolder}${BOLD_stem}"
-	set output = "${BOLD}_stc.nii.gz"
-	if(-e $output) then
-		echo "[STC]: $output already exists." |& tee -a $LF
-	else
-		set nslices = `fslval $BOLD.nii.gz dim3`
-		
-		#########################
-		# if slice acquisition direction is not passed in, create a default one (z=3 from superior to inferior or vice versa)
-		#########################
-		if(! $?direction ) then
-			set direction = 3; 
-		endif
-		
-		##########################
-		# if slice-timing file in passed in, check how many columns are there
-		# if > 1, split multiple columns into multiple files
-		##########################
-		set auto_st_file_flag = 0;
-		if( $?st_file_in ) then
-			set num_col = `awk -F ' ' '{print NF; exit}' $st_file_in`
-			set num_run = `echo $#bold`
-			if( $num_col == 1 ) then
-				set st_file = $st_file_in
-			else if ( $num_col == $num_run ) then
-				set st_file = $boldfolder/$runfolder/tmp_stc/tmp_st.txt
-				mkdir -p tmp_stc
-				cut -f $run_count -d ' ' $st_file_in > $st_file
-				set auto_st_file_flag = 1
-			else
-				echo "ERROR: Number of columns in slice-timing file is not consistent with total number of runs." \
-				|& tee -a $LF
-				exit 1
-			endif
+
+	set BOLD = ""
+	set output = ""
+
+	@ j = 1
+	while ($j <= $echo_number)
+		if ( $echo_number > 1 ) then
+			set echo_stem = _e$j
 		endif
+		set BOLD =($BOLD ${subject}"_bld${runfolder}${echo_stem}${BOLD_stem}")
+		set output = ($output "${BOLD[$j]}_stc.nii.gz")
+		if(-e ${output[$j]}) then
+			echo "[STC]: ${output[$j]} already exists." |& tee -a $LF
+		else
+			set nslices = `fslval ${BOLD[$j]}.nii.gz dim3`
 
-	
-		#########################
-		# if neither slice order file nor slice timing file is passed in, 
-		# create a default slice order file (Siemens)
-		#########################
-		if( ! $?st_file && ! $?so_file ) then
-			set auto_so_file_flag = 1;
-			echo "  WARNNING: Slice order file not specified, create a temporary one" |& tee -a $LF
-			mkdir -p tmp_stc
-			set so_file = $boldfolder/$runfolder/tmp_stc/tmp_so.txt
-			if( -e ${so_file} ) then
-				rm $so_file
+			#########################
+			# if slice acquisition direction is not passed in, create a default one (z=3 from superior to inferior or vice versa)
+			#########################
+			if(! $?direction ) then
+				set direction = 3; 
 			endif
 			
-			set n = `expr $nslices % 2`
-			if ( $n == 1 ) then
-				@ nthslice = 1
-				while($nthslice <= $nslices)
-					echo $nthslice >> $so_file
-					@ nthslice = $nthslice + 2;
-				end
-				@ nthslice = 2
-				while($nthslice <= $nslices)
-					echo $nthslice >> $so_file
-					@ nthslice = $nthslice + 2;
-				end
+			##########################
+			# if slice-timing file in passed in, check how many columns (each column inidicates slice-timing of one run) 
+			# are there
+			# if > 1, split multiple columns into multiple files
+			# slice timings are normalized to TR
+			##########################
+			set auto_st_file_flag = 0;
+			
+			if( $?st_file_in ) then
+				set temp_st_file = $st_file_ins[$j]
+				set MRI_info = ""
+				set MRI_info = `mri_info ${BOLD[$j]}.nii.gz`
+				# extract TR from header information
+				set TR = `echo $MRI_info | grep -o 'TR: \(.*\)' | awk -F " " '{print $2}'`
+				if ( "$TR" == "" ) then
+					echo "ERROR: TR cannot be extracted from image header information" |& tee -a $LF
+					exit 1
+				endif
+				# check the unit for TR is msec or sec
+				set unit = `echo $MRI_info | grep -o 'TR: \(.*\)' | awk -F " " '{print $3}'`
+				set unit = `echo $unit | awk -F "," '{print $1}'`
+				# convert the unit of TR to sec (required by FSL slicetimer)
+				if ( "$unit" == "msec" ) then
+					set TR = `echo "scale=4; $TR/1000" | bc`
+				else
+					echo "ERROR: Unknown TR unit" |& tee -a $LF
+					exit 1
+				endif
+				set num_col = `awk -F ' ' '{print NF; exit}' $temp_st_file`
+				set num_run = `echo $#bold`
+				if( $num_col == 1 ) then
+					set st_file = $temp_st_file
+					set st_fraction_file = $boldfolder/$runfolder/tmp_stc/tmp_st_fraction$echo_stem.txt
+					mkdir -p tmp_stc
+					foreach slice_timing ("`cat $st_file`")
+						echo "scale=4; 0.5 - $slice_timing/$TR" | bc >> $st_fraction_file
+					end	
+					set st_file = $st_fraction_file	
+				else if ( $num_col == $num_run ) then
+					set st_file = $boldfolder/$runfolder/tmp_stc/tmp_st.txt
+					mkdir -p tmp_stc
+					cut -f $run_count -d ' ' $temp_st_file > $st_file
+					set st_fraction_file = $boldfolder/$runfolder/tmp_stc/tmp_st_fraction$echo_stem.txt
+					foreach slice_timing ("`cat $st_file`")
+						echo "scale=4; 0.5 - $slice_timing/$TR" | bc >> $st_fraction_file
+					end	
+					set st_file = $st_fraction_file	
+					set auto_st_file_flag = 1
+				else
+					echo "ERROR: Number of columns in slice-timing file is not consistent with total number of runs." \
+					|& tee -a $LF
+					exit 1
+				endif
+			endif
+
+			#########################
+			# if neither slice order file nor slice timing file is passed in, 
+			# create a default slice order file (Siemens)
+			#########################
+			if( ! $?st_file && ! $?so_file ) then
+				set auto_so_file_flag = 1;
+				echo "  WARNNING: Slice order file not specified, create a temporary one" |& tee -a $LF
+				mkdir -p tmp_stc
+				set so_file = $boldfolder/$runfolder/tmp_stc/tmp_so.txt
+				if( -e ${so_file} ) then
+					rm $so_file
+				endif
+				
+				set n = `expr $nslices % 2`
+				if ( $n == 1 ) then
+					@ nthslice = 1
+					while($nthslice <= $nslices)
+						echo $nthslice >> $so_file
+						@ nthslice = $nthslice + 2;
+					end
+					@ nthslice = 2
+					while($nthslice <= $nslices)
+						echo $nthslice >> $so_file
+						@ nthslice = $nthslice + 2;
+					end
+				else
+					@ nthslice = 2
+					while($nthslice <= $nslices)
+						echo $nthslice >> $so_file
+						@ nthslice = $nthslice + 2;
+					end
+					@ nthslice = 1
+					while($nthslice <= $nslices)
+						echo $nthslice >> $so_file
+						@ nthslice = $nthslice + 2;
+					end
+				endif
 			else
-				@ nthslice = 2
-				while($nthslice <= $nslices)
-					echo $nthslice >> $so_file
-					@ nthslice = $nthslice + 2;
-				end
-				@ nthslice = 1
-				while($nthslice <= $nslices)
-					echo $nthslice >> $so_file
-					@ nthslice = $nthslice + 2;
-				end
+				set auto_so_file_flag = 0;
 			endif
-		else
-			set auto_so_file_flag = 0;
-		endif
-		
-		
-		#########################
-		# slice timing correction now!
-		#########################
-		set cmd = (slicetimer -i ${BOLD}.nii.gz -o ${BOLD}${stc_suffix}.nii.gz -d $direction)
-		
-		if( $?st_file ) then
-			echo "  ---------------------- Slice Timing -------------------------------" |& tee -a $LF
-			cat $st_file | tr '\n' ' ' |& tee -a $LF
-			echo "" |& tee -a $LF
-			echo "  -------------------------------------------------------------------" |& tee -a $LF
 			
-			set cmd = ($cmd --tcustom=$st_file)
-			echo $cmd |& tee -a $LF
-			eval $cmd >> $LF
-		else
-			echo "  ---------------------- Slice Order --------------------------------" |& tee -a $LF
-			cat $so_file | tr '\n' ' ' |& tee -a $LF
-			echo "" |& tee -a $LF
-			echo "  -------------------------------------------------------------------" |& tee -a $LF
+			#########################
+			# slice timing correction now!
+			#########################
+			set cmd = (slicetimer -i ${BOLD[$j]}.nii.gz -o ${BOLD[$j]}${stc_suffix}.nii.gz -d $direction)
 			
-			set cmd = ($cmd --ocustom=$so_file)
-			echo $cmd |& tee -a $LF
-			eval $cmd >> $LF
+			if( $?st_file ) then
+				echo "  ------------------ Slice Timing (in unit of TR) -------------------" |& tee -a $LF
+				cat $st_file | tr '\n' ' ' |& tee -a $LF
+				echo "" |& tee -a $LF
+				echo "  -------------------------------------------------------------------" |& tee -a $LF
+				
+				set cmd = ($cmd --tcustom=$st_file)
+				echo $cmd |& tee -a $LF
+				eval $cmd >> $LF
+			else
+				echo "  ---------------------- Slice Order --------------------------------" |& tee -a $LF
+				cat $so_file | tr '\n' ' ' |& tee -a $LF
+				echo "" |& tee -a $LF
+				echo "  -------------------------------------------------------------------" |& tee -a $LF
+				
+				set cmd = ($cmd --ocustom=$so_file)
+				echo $cmd |& tee -a $LF
+				eval $cmd >> $LF
+			endif
+			
+			#########################
+			# remove the automatically generated default slice order file, if there is one
+			# remove the split slice timing file of current run 
+			# if input slice-timing file contains multiple columns of slice timing
+			#########################
+			if ( $auto_so_file_flag == 1 || $auto_st_file_flag == 1 ) then
+				rm -r tmp_stc
+				unset so_file
+				unset st_file
+			endif
 		endif
-		
-		#########################
-		# remove the automatically generated default slice order file, if there is one
-		# remove the split slice timing file of current run, if input slice-timing file contains multiple columns 
-		#########################
-		if ( $auto_so_file_flag == 1 || $auto_st_file_flag == 1 ) then
-			rm -r tmp_stc
-			unset so_file
-			unset st_file
+		# change file name to be consistant if echo number is 1.
+		if ($echo_number == 1) then
+			set cmd = "rsync ${output[1]} $subject"_bld$runfolder$BOLD_stem"_stc.nii.gz"
+			eval $cmd
 		endif
-	endif
+	
+	@ j++
+	end
 	popd
 end
 
@@ -209,17 +279,17 @@ echo "====================== Slice time correction finished. ===================
 which git
 if (! $status) then
 	echo "=======================Git: Last Commit of Current Function =======================" |& tee -a $LF
-	git -C ${CBIG_CODE_DIR} log -1 -- stable_projects/preprocessing/CBIG_fMRI_Preproc2016/CBIG_preproc_fslslicetimer.csh >> $LF
+	pushd ${CBIG_CODE_DIR}
+	git log -1 -- ${CBIG_CODE_DIR}/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/CBIG_preproc_fslslicetimer.csh\
+>> $LF
+	popd
 endif
 
-echo "******************************************************************************"
+echo "******************************************************************************"  |& tee -a $LF
 echo ""
 
-
-
 exit 0;
 
-
 ###########################
 ##======pass the arguments
 ###########################
@@ -264,11 +334,18 @@ while( $#argv != 0 )
 			set so_file = $argv[1]; shift;
 			breaksw
 			
+		# slice timing file
 		case "-slice_timing":
 			if ( $#argv == 0 ) goto arg1err;
 			set st_file_in = $argv[1]; shift;
 			breaksw
-		
+
+		#echo number
+		case "-echo_number":
+			if ($#argv == 0) goto arg1err;
+			set echo_number = $argv[1]; shift;
+			breaksw
+
 		default:
 			echo ERROR: Flag $flag unrecognized.
 			echo $cmdline
@@ -279,7 +356,6 @@ end
 
 goto parse_args_return;
 
-
 #############################
 ##======check passed parameters
 #############################
@@ -304,9 +380,8 @@ if ( $#BOLD_stem == 0 ) then
 	echo "ERROR: BOLD stem not specified"
 	exit 1;
 endif
-			
-goto check_params_return;
 
+goto check_params_return;
 
 ##############################			
 ##======Error message
@@ -323,8 +398,6 @@ argerr:
   echo "ERROR: flag $flag requires at least one argument"
   exit 1
 
-
-
 #########################################
 # usage exit
 #########################################
@@ -355,15 +428,22 @@ REQUIRED ARGUMENTS:
 
 OPTIONAL ARGUMENTS:
 	-direction    <direction> : slice aquisition direction. 1 means x axis representing Right-Left, 
-	                            2 means y axis representing Anterior-Posterior, 3 means z axis representing Superior-Inferior.
-	-slice_timing <st_file>   : slice timing file (absolute path). It can contain one column or multiple columns  
-	                            (separated by a space, see example_slice_timing.txt within the same folder). 
-	                            If there is only one column, it is assumed that every run follows the same slice timing;  
-	                            if there are multiple columns, each column corresponds to one of the runs given by -bld option.
+	                            2 means y axis representing Anterior-Posterior, 
+	                            3 means z axis representing Superior-Inferior.
+	-slice_timing <st_file>   : slice timing file (absolute path). It can contain one column or multiple columns 
+	                            of slice timing (separated by a space, see example_slice_timing.txt within the same 
+	                            folder). 
+	                            If there is only one column of slice timing, it is assumed that every run follows 
+	                            the same slice timing;  
+	                            if there are multiple columns of slice timing, each column corresponds to 
+	                            one of the runs given by -bld option.
 	                            N-th row corresponds to the time point when N-th slice was sampled.
-	                            If both -slice_timing and -slice_order options are not used, this script will generate a 
-	                            default slice order file following Siemens slice order 
+	                            NOTE: If both -slice_timing and -slice_order options are not used, 
+	                            this script will generate a default slice order file following Siemens slice order 
 	                            (see description of -slice_order option).
+	                            In the case of multi-echo acquisition, slice timing file of each echo 
+	                            needs to be specified in the same order as echo times. Check the example
+	                            section for more details.
 	-slice_order  <so_file>   : slice order file (absolute path), where each row is one number. 
 	                            If the user did not pass in a slice order file or a slice timing file,  
 	                            this function will create a default one where the slice order is 
@@ -371,18 +451,19 @@ OPTIONAL ARGUMENTS:
 	                            1, 3, 5, ..., 2, 4, 6, ...; if the number of slices is even, the 
 	                            ordering is 2, 4, 6, ..., 1, 3, 5, ....
 	                            For the example of slice order file, please see 
-	                            ${CBIG_CODE_DIR}/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/example_slice_order.txt
-
+	                            ${CBIG_CODE_DIR}/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/\
+	                            example_slice_order.txt
+	-echo_number  <echo_number>: number of echoes. For single echo data, default is 1.
 OUTPUTS:
 	This function will output NIFTI volumes <subject>_bld<run_number><BOLD_stem>_stc.nii.gz in folder 
 	<sub_dir>/<subject>/bold/<run_number>.
 
 Example:
+	single-echo case:
 	$CBIG_CODE_DIR/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/CBIG_preproc_fslslicetimer.csh 
 	-s Sub0001_Ses1 -d ~/storage/fMRI_preprocess -bld '002 003' -BOLD_stem _rest_skip4 -slice_order
 	${CBIG_CODE_DIR}/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/example_slice_order.txt
-
-
-Written by Jingwei Li.
-Written by CBIG under MIT license: https://github.com/ThomasYeoLab/CBIG/blob/master/LICENSE.md
-
+	multi-echo case:
+	$CBIG_CODE_DIR/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/CBIG_preproc_fslslicetimer.csh 
+	-s Sub0005 -d ~/storage/fMRI_preprocess -bld '001' -BOLD_stem _rest_skip4 -echo_number 2
+	-slice_timing <path-to-slice-timing-file>/slice_timing_e1.txt,<path-to-slice-timing-file>/slice_timing_e2.txt
diff --git a/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/CBIG_preproc_multiecho_denoise.csh b/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/CBIG_preproc_multiecho_denoise.csh
new file mode 100755
index 0000000..f7b2b94
--- /dev/null
+++ b/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/CBIG_preproc_multiecho_denoise.csh
@@ -0,0 +1,313 @@
+#!/bin/csh -f
+
+# Example: 
+# csh CBIG_preproc_multiecho_denoise.csh -s Sub0001_Ses1 -d ~/storage/fMRI_preprocess -e 12 30.11 48.22 
+#
+# This function uses tedana (https://tedana.readthedocs.io/en/stable/index.html) to perform multiecho. 
+# 'Tedana' is an ICA-based denoising pipeline built for multi-echo data. 
+# Rather than analyzing single-echo time series separately, 'tedana' first optimally combines multiple echoes
+# then runs denoising with an ICA-based method.
+#
+# Written by Lyu Xingyu and CBIG under MIT license: https://github.com/ThomasYeoLab/CBIG/blob/master/LICENSE.md
+
+set subject = ""       # subject ID
+set sub_dir = ""       # directory to subjects
+set bold = ""          # bold numbers, e.g. '002 003'
+set BOLD_stem = ""     # BOLD stem, e.g. _rest_skip5_stc_mc_residc
+set echo_number = ""   # number of total echos
+set echo_path = ""     # path of every echo in order
+set echo_time = ""     # echo time for each echo in order
+set nocleanup = 0      # default clean up intermediate files
+set lowmem = 0         # low-memory processing. May increase workflow duration. Default is false
+set multiecho_stem = "_me"
+set root_dir = `python -c "import os; print(os.path.realpath('$0'))"`
+set root_dir = `dirname $root_dir`
+
+# Print help and version
+set VERSION = '$Id: CBIG_preproc_multiecho_denoise.csh v 1.0 2021/10/29'
+
+set n = `echo $argv | grep -e -help | wc -l`
+
+# if there is -help option 
+if( $n != 0 ) then
+	echo $VERSION
+	# print help	
+	cat $0 | awk 'BEGIN{prt=0}{if(prt) print $0; if($1 == "BEGINHELP") prt = 1 }'
+	exit 0;
+endif
+
+# if there is no arguments
+if( $#argv == 0 ) then
+	echo $VERSION
+	# print help	
+	cat $0 | awk 'BEGIN{prt=0}{if(prt) print $0; if($1 == "BEGINHELP") prt = 1 }'
+	echo "WARNING: No input arguments. See above for a list of available input arguments."
+	exit 0;
+endif
+
+set n = `echo $argv | grep -e -version | wc -l`
+if($n != 0) then
+	echo $VERSION
+	exit 0;
+endif
+
+goto parse_args;
+parse_args_return:
+
+goto check_params;
+check_params_return:
+
+cd $sub_dir/$subject
+
+###########################
+# Create log file
+###########################
+if (! -e logs) then
+	mkdir -p logs
+endif
+set LF = $sub_dir/$subject/logs/CBIG_preproc_multiecho_denoise.log
+if( -e $LF ) then
+	rm $LF
+endif
+touch $LF
+echo "[Multiecho]: logfile = $LF"
+echo "multiecho" >> $LF
+echo "[CMD]: CBIG_preproc_multiecho_denoise.csh $cmdline"   >>$LF
+
+##########################
+# Specify BOLD folder, it contains each run folder (like 002 003)
+##########################
+set boldfolder = "$sub_dir/$subject/bold"
+echo "[ME]: boldfolder = $boldfolder" |& tee -a $LF
+
+cd $boldfolder
+
+##########################
+# Optimally combined echoes and perform multi-echo ICA (ME-ICA) (TEDANA)
+##########################
+echo "=====================combine echos and perform multi-echo ICA using tedana ======================" |& tee -a $LF
+foreach runfolder ($bold)
+	echo ">>> Run: $runfolder"
+	pushd $runfolder
+	 
+	set BOLD = ${subject}"_bld${runfolder}${BOLD_stem}"
+	set output = "${BOLD}${multiecho_stem}.nii.gz"
+	if ( -e $output) then
+		echo "[ME]: $output already exists." |& tee -a $LF
+	else
+		set echo_times=($echo_time:as/,/ /)
+		set i = 1
+		set echo_paths = ""
+		
+		while ($i<= $echo_number)
+			set echo_paths = ($echo_paths "$subject"_bld$runfolder"_e$i"$BOLD_stem".nii.gz")
+			@ i++
+		end
+		
+		if ( $#echo_paths != "$echo_number" || $#echo_times != "$echo_number") then
+			echo "ERROR: inconsistency in number of echo times or paths with echo number" |& tee -a $LF
+			exit 1;
+		endif
+		if ( -e ME_intermediate) then
+			rm -rf ME_intermediate
+		endif
+		mkdir -p ME_intermediate
+		set CMD="tedana -d $echo_paths -e $echo_times --out-dir $boldfolder/$runfolder/ME_intermediate"
+		if ( $lowmem == 1 ) then 
+			set CMD = "$CMD --lowmem"
+		endif
+		echo $CMD |& tee -a $LF
+		eval $CMD >> $LF
+
+		# We keep images with and without MEICA for QC purpose. And remove other intermediate files if not specified.
+		rsync ME_intermediate/desc-optcomDenoised_bold.nii.gz $output
+		rsync ME_intermediate/desc-optcomDenoised_bold.nii.gz \
+		$sub_dir/$subject/qc/bld${runfolder}_desc-optcomDenoised_bold.nii.gz
+		rsync ME_intermediate/desc-optcom_bold.nii.gz $sub_dir/$subject/qc/bld${runfolder}_desc-optcom_bold.nii.gz
+		if ( $nocleanup != 1 ) then 
+			rm -rf ME_intermediate
+		endif
+		
+	endif
+	popd
+end
+echo "====================== Multi-echo ICA finished. ======================" |& tee -a $LF
+
+#########################
+# Output last commit of current function 
+#########################
+# Check if git exists
+which git
+if (! $status) then
+	echo "=======================Git: Last Commit of Current Function =======================" |& tee -a $LF
+	pushd ${CBIG_CODE_DIR}
+	git log -1 -- ${CBIG_CODE_DIR}/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/\
+	CBIG_preproc_multiecho_denoise.csh >> $LF
+	popd
+endif
+
+echo "******************************************************************************" |& tee -a $LF
+echo ""
+
+exit 0;
+
+###########################
+##======Pass the arguments
+###########################
+parse_args:
+set cmdline = "$argv";
+while( $#argv != 0 )
+	set flag = $argv[1]; shift;
+	
+	switch($flag)
+		#subject name
+		case "-s":
+			if ( $#argv == 0 ) goto arg1err;
+			set subject = $argv[1]; shift;
+			breaksw	
+		#path to subject's folder
+		case "-d":
+			if ( $#argv == 0 ) goto arg1err;
+			set sub_dir = $argv[1]; shift;
+			breaksw
+			
+		# bold number, e.g. '002 003'
+		case "-bld":
+			if ( $#argv == 0 ) goto argerr;
+			set bold = ($argv[1]); shift;
+			breaksw
+
+		#BOLD stem
+		case "-BOLD_stem":
+			if ( $#argv == 0 ) goto arg1err;
+			set BOLD_stem = $argv[1]; shift;
+			breaksw
+			
+		# echo number
+		case "-echo_number":
+			if ( $#argv == 0 ) goto arg1err;
+			set echo_number = $argv[1]; shift;
+			breaksw
+			
+		# echo time
+		case "-echo_time":
+			if ( $#argv == 0 ) goto arg1err;
+			set echo_time = $argv[1]; shift;
+			breaksw	
+		
+		#cleanup intermediate files
+		case "-nocleanup":
+			set nocleanup = 1;
+			breaksw
+
+		#cleanup intermediate files
+		case "-lowmem":
+			set lowmem = 1;
+			breaksw
+
+		default:
+			echo ERROR: Flag $flag unrecognized.
+			echo $cmdline
+			exit 1
+			breaksw
+	endsw
+end
+
+goto parse_args_return;
+
+#############################
+##======check passed parameters
+#############################
+check_params:
+
+if ( $#subject == 0 ) then
+	echo "ERROR: subject not specified"
+	exit 1;
+endif
+ 
+if ( $#sub_dir == 0 ) then
+	echo "ERROR: path to subject folder not specified"
+	exit 1;
+endif		
+
+if ( $#bold == 0 ) then
+	echo "ERROR: bold number not specified"
+	exit 1;
+endif
+
+if ( $#BOLD_stem == 0 ) then
+	echo "ERROR: BOLD stem not specified"
+	exit 1;
+endif
+
+if ( $#echo_time == 0 ) then
+	echo "ERROR: echo time not specified"
+	exit 1;
+endif
+
+if ( $#echo_number == 0 ) then
+	echo "ERROR: echo number not specified"
+	exit 1;
+endif
+			
+goto check_params_return;
+
+##############################			
+##======Error message
+##############################
+arg1err:
+  echo "ERROR: flag $flag requires one argument"
+  exit 1
+
+arg2err:
+  echo "ERROR: flag $flag requires two arguments"
+  exit 1
+
+argerr:
+  echo "ERROR: flag $flag requires at least one argument"
+  exit 1
+
+#########################################
+# Usage exit
+#########################################
+BEGINHELP
+
+NAME:
+	CBIG_preproc_multiecho_denoise.csh
+
+DESCRIPTION:
+	This function uses tedana to conduct multiecho preprocessing. 
+
+REQUIRED ARGUMENTS:
+	-s            <subject>     : fMRI subject id, enter each echo in order and separate with ","! space will incur error!
+	-d            <sub_dir>     : absolute path to <subject>, all preprocessed results 
+	                              are stored in <sub_dir>/<subject>
+	-echo_number  <echo_number> : number of echoes
+	-echo_time    <echo_time>   : comma separated echo time (TE) of each echo (in miliseconds). 
+								  must be in the same order as input echo path
+	-bld          <bold>        : bold numbers of this subject specified by several three 
+	                              digits numbers. If there are more than one bold number, 
+	                              use a space as delimiter, e.g. '002 003'. 
+	                              NOTE: quote sign is necessary.
+	-BOLD_stem    <BOLD_stem>   : stem of input file, e.g. if the input file name is
+	                              Sub0001_Ses1_bld002_rest_skip5_stc_mc.nii.gz, the BOLD_stem will be _rest_skip5_stc_mc.
+	                              This input file should be stored in 
+	                              <sub_dir>/<subject>/bold/<run_number>/
+OPTIONAL ARGUMENTS:
+	-help                       : help
+	-version                    : version
+	-lowmem                     : Select this flag to enable TEDANA low-memory processing, 
+								  which will save ~15% of the memory usage. May increase workflow duration. 
+	-nocleanup                  : Select this flag to keep all intermediate files. By default, we will only keep the 
+	                              optimally-combined and optimally-combined+MEICA volumes for QC purpose, 
+	                              and remove all other intermediate files. 
+	                              For a complete list of tedana output, please refer to this link: 
+	                              https://tedana.readthedocs.io/en/stable/outputs.html
+
+OUTPUTS:
+	This function will output NIFTI volumes <subject>_bld<run_number><BOLD_stem>_me.nii.gz in folder 
+	<sub_dir>/<subject>/bold/<run_number>.
+
+Example:
+	csh CBIG_preproc_multiecho_denoise.csh -s Sub0001_Ses1 -d ~/storage/fMRI_preprocess -bld
+	'002 003' -BOLD_stem _rest_skip5_stc_mc_sdc -echo_number 3 -echo_time 12,30.11,48.22
diff --git a/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/CBIG_preproc_native2fsaverage.csh b/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/CBIG_preproc_native2fsaverage.csh
index 8b85f9e..0684ecc 100755
--- a/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/CBIG_preproc_native2fsaverage.csh
+++ b/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/CBIG_preproc_native2fsaverage.csh
@@ -10,7 +10,8 @@
 #
 # This function does the following three steps:
 #     1. Project fMRI volume data to surface (defined by proj_mesh, like fsaverage6) using mri_vol2surf
-#     2. Smooth projected data using mri_surf2surf. Since in FreeSurfer 5.3.0, mri_surf2surf with --cortex flag will set vertices within medial wall mask to be zero, we put the medial wall values back after smoothing.
+#     2. Smooth projected data using mri_surf2surf. Since in FreeSurfer 5.3.0, mri_surf2surf with --cortex flag 
+#	 will set vertices within medial wall mask to be zero, we put the medial wall values back after smoothing.
 #     3. Downsample smoothed data to downmesh, e.g. fsaverage5, using mri_surf2surf 
 #
 # Written by Jingwei Li.
@@ -43,14 +44,23 @@ set VERSION = '$Id: CBIG_preproc_native2fsaverage.csh v 1.0 2016/05/29'
 
 set n = `echo $argv | grep -e -help | wc -l`
 
-# if there is no arguments or there is -help option 
-if( $#argv == 0 || $n != 0 ) then
+# if there is -help option 
+if( $n != 0 ) then
 	echo $VERSION
 	# print help	
 	cat $0 | awk 'BEGIN{prt=0}{if(prt) print $0; if($1 == "BEGINHELP") prt = 1 }'
 	exit 0;
 endif
 
+# if there is no arguments
+if( $#argv == 0 ) then
+	echo $VERSION
+	# print help	
+	cat $0 | awk 'BEGIN{prt=0}{if(prt) print $0; if($1 == "BEGINHELP") prt = 1 }'
+	echo "WARNING: No input arguments. See above for a list of available input arguments."
+	exit 0;
+endif
+
 set n = `echo $argv | grep -e -version | wc -l`
 if($n != 0) then
 	echo $VERSION
@@ -145,7 +155,8 @@ foreach runfolder ($bold)
 		if(-e $output) then
 			echo "[SURF]: Projection to $hemi.${BOLD}_$proj_short.nii.gz already exist" |& tee -a $LF
 		else
-			set cmd = (mri_vol2surf --mov ${BOLD}.nii.gz --reg $regfile --hemi  $hemi --projfrac 0.5 --trgsubject $proj_mesh --o $output --reshape --interp trilinear)
+			set cmd = (mri_vol2surf --mov ${BOLD}.nii.gz --reg $regfile --hemi  $hemi \
+--projfrac 0.5 --trgsubject $proj_mesh --o $output --reshape --interp trilinear)
 			echo $cmd |& tee -a $LF
 			eval $cmd
 			
@@ -195,8 +206,9 @@ foreach runfolder ($bold)
 				echo "Input2: $input2"
 				exit 1;
 			endif
-			
-			$MATLAB -nodesktop -nodisplay -nosplash -r "addpath(fullfile('$root_dir', 'utilities'));CBIG_preproc_fsaverage_medialwall_fillin '$hemi' 'fsaverage6' '$input1' '$input2' '$tmp_output';exit" |& tee -a $LF
+			set matlab_cmd = ("addpath(fullfile('$root_dir', 'utilities'));" \
+"CBIG_preproc_fsaverage_medialwall_fillin '$hemi' 'fsaverage6' '$input1' '$input2' '$tmp_output'; exit;")
+			$MATLAB -nodesktop -nodisplay -nosplash -r "$matlab_cmd" |& tee -a $LF
 			
 			if ( ! -e $tmp_output ) then
 				echo "ERROR: Fill in medial wall failed. ${tmp_output} is not produced." |& tee -a $LF
@@ -250,7 +262,7 @@ foreach runfolder ($bold)
 		else
 			set scale = $proj_res
 			if($scale == $down_res) then
-				set cmd = (cp $curr_input $output)
+				set cmd = (rsync -az $curr_input $output)
 				echo $cmd |& tee -a $LF
 				eval $cmd
 			endif
@@ -266,7 +278,8 @@ foreach runfolder ($bold)
 				
 				set trgsubject = fsaverage$new_scale
 				
-				set cmd = (mri_surf2surf --hemi $hemi --srcsubject $srcsubject --sval $curr_input --nsmooth-in 1 --trgsubject $trgsubject --tval $output --reshape)
+				set cmd = (mri_surf2surf --hemi $hemi --srcsubject $srcsubject \
+--sval $curr_input --nsmooth-in 1 --trgsubject $trgsubject --tval $output --reshape)
 				echo $cmd |& tee -a $LF
 				eval $cmd
 				
@@ -293,8 +306,9 @@ foreach runfolder ($bold)
 		foreach hemi (lh rh)
 			set before_NaN_name = $surffolder/$hemi.${subject}_bld${runfolder}${out_stem}.nii.gz
 			set after_NaN_name = $surffolder/$hemi.${subject}_bld${runfolder}${out_stem}_medialwallNaN.nii.gz
-			
-			$MATLAB -nodesktop -nodisplay -nosplash -r "addpath(fullfile('$root_dir', 'utilities'));CBIG_preproc_set_medialwall_NaN '$hemi' '$out_mesh' '$before_NaN_name' '$after_NaN_name';exit" |& tee -a $LF
+			set matlab_cmd = ("addpath(fullfile('$root_dir', 'utilities'));" \
+"CBIG_preproc_set_medialwall_NaN '$hemi' '$out_mesh' '$before_NaN_name' '$after_NaN_name'; exit;")
+			$MATLAB -nodesktop -nodisplay -nosplash -r "$matlab_cmd" |& tee -a $LF
 			
 			if ( -e $after_NaN_name ) then
 				echo "[SURF]: $after_NaN_name is successfully generated. Move it to $before_NaN_name." |& tee -a $LF
@@ -316,8 +330,12 @@ end
 # check if git exists
 which git
 if (! $status) then
-	echo "=======================Git: Last Commit of Current Function =======================" |& tee -a $LF
-	git -C ${CBIG_CODE_DIR} log -1 -- stable_projects/preprocessing/CBIG_fMRI_Preproc2016/CBIG_preproc_native2fsaverage.csh >> $LF
+	echo "=======================Git: Last Commit of Current Function \
+=======================" |& tee -a $LF
+	pushd ${CBIG_CODE_DIR}
+	git log -1 -- ${CBIG_CODE_DIR}/stable_projects/preprocessing/CBIG_fMRI_Preproc2016\
+/CBIG_preproc_native2fsaverage.csh >> $LF
+	popd
 endif
 
 echo "***************************************************************" |& tee -a $LF
@@ -448,12 +466,14 @@ endif
 
 # check the format of projection and downsampling mesh
 if($proj_mesh != fsaverage & $proj_mesh != fsaverage6 & $proj_mesh != fsaverage5 & $proj_mesh != fsaverage4 ) then
-    echo "ERROR: proj_mesh = $proj_mesh is not acceptable (allowable values = fsaverage, fsaverage6, fsaverage5, fsaverage4)"
+    echo "ERROR: proj_mesh = $proj_mesh is not acceptable \
+(allowable values = fsaverage, fsaverage6, fsaverage5, fsaverage4)"
     exit 1;
 endif
 
 if($down_mesh != fsaverage & $down_mesh != fsaverage6 & $down_mesh != fsaverage5 & $down_mesh != fsaverage4 ) then
-    echo "ERROR: down_mesh = $down_mesh is not acceptable (allowable values = fsaverage, fsaverage6, fsaverage5, fsaverage4)"
+    echo "ERROR: down_mesh = $down_mesh is not acceptable \
+(allowable values = fsaverage, fsaverage6, fsaverage5, fsaverage4)"
     exit 1;
 endif
 
diff --git a/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/CBIG_preproc_native2mni.csh b/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/CBIG_preproc_native2mni.csh
index f10097e..1e4f143 100755
--- a/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/CBIG_preproc_native2mni.csh
+++ b/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/CBIG_preproc_native2mni.csh
@@ -1,5 +1,5 @@
 #!/bin/tcsh 
- 
+
 # Example: 
 #	$CBIG_CODE_DIR/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/CBIG_preproc_native2mni.csh 
 #	-s Sub0001_Ses1 -d ~/storage/fMRI_preprocess -anat_s Sub0001_Ses1_FS -anat_d ~/storage/sMRI_preprocess 
@@ -34,7 +34,7 @@ set down = ""         # downsample flag, FSL_MNI_FS_2mm for FreeSurfer 2mm space
 
 set force = 0;
 set nocleanup = 0;
-set sm = 7;
+set sm = 6;
 set FS_temp_2mm = "${CBIG_CODE_DIR}/data/templates/volume/FS_nonlinear_volumetric_space_4.5/gca_mean2mm.nii.gz"
 set MNI_temp_2mm = "${FSL_DIR}/data/standard/MNI152_T1_2mm_brain.nii.gz"
 set temp_2mm = ${MNI_temp_2mm}
@@ -44,11 +44,20 @@ set MNI_ref_id = "FSL_MNI152_FS4.5.0"
 # Print help or version
 set n = `echo $argv | grep -e -help | wc -l`
 
-# if there is no arguments or there is -help option 
-if( $#argv == 0 || $n != 0 ) then
+# if there is -help option 
+if( $n != 0 ) then
+	echo $VERSION
+	# print help	
+	cat $0 | awk 'BEGIN{prt=0}{if(prt) print $0; if($1 == "BEGINHELP") prt = 1 }'
+	exit 0;
+endif
+
+# if there is no arguments
+if( $#argv == 0 ) then
 	echo $VERSION
 	# print help	
 	cat $0 | awk 'BEGIN{prt=0}{if(prt) print $0; if($1 == "BEGINHELP") prt = 1 }'
+	echo "WARNING: No input arguments. See above for a list of available input arguments."
 	exit 0;
 endif
 
@@ -107,7 +116,8 @@ set output = $volfolder/norm_MNI152_1mm.nii.gz
 if(-e $output) then
 	echo "[native2mni]: $output already exists." |& tee -a $LF
 else
-	set cmd = (CBIG_vol2vol_m3z.csh -src-id $anat_s -src-dir $anat_dir -targ-id $MNI_ref_id -targ-dir $MNI_ref_dir -in $input -out $output -no-cleanup)
+	set cmd = (CBIG_vol2vol_m3z.csh -src-id $anat_s -src-dir $anat_dir -targ-id $MNI_ref_id -targ-dir $MNI_ref_dir \
+	-in $input -out $output -no-cleanup)
 	echo $cmd |& tee -a $LF
 	$cmd |& tee -a $LF
 	if(-e $output) then
@@ -203,7 +213,8 @@ foreach runfolder ($bold)
 		if(-e $output) then
 			echo "    [native2mni]: $output already exists." |& tee -a $LF
 		else
-			set cmd = (CBIG_vol2vol_m3z.csh -src-id $anat_s -src-dir $anat_dir -targ-id $MNI_ref_id -targ-dir $MNI_ref_dir -in $input -out $output -reg $regfile -no-cleanup)
+			set cmd = (CBIG_vol2vol_m3z.csh -src-id $anat_s -src-dir $anat_dir -targ-id $MNI_ref_id \
+			-targ-dir $MNI_ref_dir -in $input -out $output -reg $regfile -no-cleanup)
 			echo $cmd |& tee -a $LF
 			eval $cmd |& tee -a $LF
 			if(-e $output) then
@@ -240,6 +251,7 @@ foreach runfolder ($bold)
 				echo "    [native2mni]: downsample to $output finished." |& tee -a $LF
 			else
 				echo "    ERROR: downsample to $output failed." |& tee -a $LF
+				exit 1;
 			endif
 		endif
 		
@@ -252,77 +264,47 @@ foreach runfolder ($bold)
 	#########################
 	echo "======== Smooth in MNI152 2mm space with fwhm = $sm ========" |& tee -a $LF
 	set fcount = 0;
-        
-	if($?sm_mask) then
-		set inverted_sm_mask = $frame_dir/inverted_sm_mask.nii.gz
-        	set cmd = (fslmaths $sm_mask -mul -1 -add 1 -mas $final_mask $inverted_sm_mask)
-        	echo $cmd |& tee -a $LF
-        	eval $cmd
-  	endif
-
 	while($fcount < $nframes)
 		set fcount_str = `echo $fcount | awk '{printf ("%04d",$1)}'`
 		
 		set input = $frame_dir/${fcount_str}_MNI1mm_MNI2mm.nii.gz
 		mkdir -p $frame_dir/sm
 		set output = $frame_dir/sm/${fcount_str}_MNI1mm_MNI2mm_sm${sm}.nii.gz
-		set std = `awk "BEGIN {print ${sm}/2.35482}"`  #Note that fwhm = 2.35482 * std, fslmaths -s is in unit of mm, not voxel.
+		#Note that fwhm = 2.35482 * std, fslmaths -s is in unit of mm, not voxel.
+		set std = `awk "BEGIN {print ${sm}/2.35482}"`    
 		if(-e $output) then
 			echo "[native2mni]: $output already exists." |& tee -a $LF
 		else
 			if($?sm_mask) then
-			    # if the user passes in a volume sm_mask, the procedure is
-			    # 1. smooth volume data within sm_mask
-			    # 2. smooth sm_mask within sm_mask
-			    # 3. divide smoothed volume by smoothed sm_mask (deal with boundary problem)
-                            set tmp1 = $frame_dir/tmp1_${fcount_str}.nii.gz
-	  		    set tmp2 = $frame_dir/tmp2_${fcount_str}.nii.gz
-	                    set tmp3 = $frame_dir/tmp3_${fcount_str}.nii.gz		
-                            set tmp4 = $frame_dir/tmp4_${fcount_str}.nii.gz
-                            set input_masksmoothed = $frame_dir/input_masksmoothed_${fcount_str}.nii.gz
-                            set input_outsidemask_smoothed = $frame_dir/input_outsidemask_smoothed_${fcount_str}.nii.gz
-
-			    set cmd = (fslmaths $input -mas $sm_mask -s $std -mas $sm_mask $tmp1)
-			    echo $cmd |& tee -a $LF
-			    eval $cmd
+				# if the user passes in a volume sm_mask, the procedure is
+				# 1. smooth volume data within sm_mask
+				# 2. smooth sm_mask within sm_mask
+				# 3. divide smoothed volume by smoothed sm_mask (deal with boundary problem)
+				set tmp1 = $frame_dir/tmp1_${fcount_str}.nii.gz
+				set tmp2 = $frame_dir/tmp2_${fcount_str}.nii.gz
 				
-			    set cmd = (fslmaths $sm_mask -s $std -mas $sm_mask $tmp2)
-		            echo $cmd |& tee -a $LF
-			    eval $cmd
+				set cmd = (fslmaths $input -s $std -mas $sm_mask $tmp1)
+				echo $cmd |& tee -a $LF
+				eval $cmd
 				
-			    set cmd = (fslmaths $tmp1 -div $tmp2 $input_masksmoothed)
-		            echo $cmd |& tee -a $LF
-			    eval $cmd
-
-                            #4. smooth outside of the mask, but inside the brain			    
-			    set cmd = (fslmaths $input -mas $inverted_sm_mask -s $std -mas $inverted_sm_mask $tmp3)
-			    echo $cmd |& tee -a $LF
-			    eval $cmd
-
-			    set cmd = (fslmaths $inverted_sm_mask -s $std -mas $inverted_sm_mask $tmp4)
-			    echo $cmd |& tee -a $LF
-			    eval $cmd
-
-			    set cmd = (fslmaths $tmp3 -div $tmp4 $input_outsidemask_smoothed)
-			    echo $cmd |& tee -a $LF
-			    eval $cmd
-
-                            #5. combine externally smoothed data with rest of the data
-			    set cmd = (fslmaths $input_masksmoothed -add $input_outsidemask_smoothed $output)
-                            echo $cmd |& tee -a $LF
-	                    eval $cmd
+				set cmd = (fslmaths $sm_mask -s $std -mas $sm_mask $tmp2)
+				echo $cmd |& tee -a $LF
+				eval $cmd
 				
+				set cmd = (fslmaths $tmp1 -div $tmp2 $output)
+				echo $cmd |& tee -a $LF
+				eval $cmd
 			else
-			    set cmd = (fslmaths $input -s $std $output)
-			    echo $cmd |& tee -a $LF
-			    eval $cmd
+				set cmd = (fslmaths $input -s $std $output)
+				echo $cmd |& tee -a $LF
+				eval $cmd
 			endif
 			
 			if(-e $output) then
-			    echo "[native2mni]: smooth to $output finished." |& tee -a $LF
+				echo "[native2mni]: smooth to $output finished." |& tee -a $LF
 			else
-			    echo "ERROR: smooth to $output failed." |& tee -a $LF
-			    exit 1;
+				echo "ERROR: smooth to $output failed." |& tee -a $LF
+				exit 1;
 			endif
 		endif
 		
@@ -382,6 +364,7 @@ foreach runfolder ($bold)
 				echo "[native2mni]: Applying final mask finished. The output is $output" |& tee -a $LF
 			else
 				echo "ERROR: Applying final mask failed." |& tee -a $LF
+				exit 1;
 			endif			
 		endif
 	endif
@@ -407,8 +390,8 @@ which git
 if (! $status) then
 	echo "=======================Git: Last Commit of Current Function =======================" |& tee -a $LF
 	pushd ${CBIG_CODE_DIR}
-        git log -1 -- ${CBIG_CODE_DIR}/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/CBIG_preproc_native2mni.csh >> $LF
-        popd
+	git log -1 -- ${CBIG_CODE_DIR}/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/CBIG_preproc_native2mni.csh >> $LF
+	popd
 endif
 
 
@@ -495,8 +478,7 @@ while( $#argv != 0 )
 			set final_mask = $argv[1]; shift;
 			breaksw
 			
-		# if nocleanup is turned on, it won't delete the folders with single frames, 
-                # otherwise these folders will be removed
+		# if nocleanup is turned on, it won't delete the folders with single frames, otherwise these folders will be removed
 		case "-nocleanup":
 			set nocleanup = 1
 			breaksw
@@ -638,7 +620,8 @@ OPTIONAL ARGUMENTS:
 	                        does not want to do smoothing, he/she needs to pass in -sm 0.
 	-sm_mask    sm_mask   : mask for smoothing (e.g. a grey matter mask in MNI152 2mm). An example 
 	                        of the smooth mask is: 
-	                        ${CBIG_CODE_DIR}/data/templates/volume/FSL_MNI152_masks/SubcorticalLooseMask_MNI1mm_sm6_MNI2mm_bin0.2.nii.gz
+	                        ${CBIG_CODE_DIR}/data/templates/volume/FSL_MNI152_masks/\
+							SubcorticalLooseMask_MNI1mm_sm6_MNI2mm_bin0.2.nii.gz
 	                        If <sm_mask> is not passed in, the smoothing step will smooth everything
 	                        by the FWHM as specified by -sm flag.
 	-down       down      : downsample space, choose from FSL_MNI_FS_2mm (size: 128 x 128 x 128)
@@ -675,5 +658,7 @@ Example:
 	$CBIG_CODE_DIR/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/CBIG_preproc_native2mni.csh 
 	-s Sub0001_Ses1 -d ~/storage/fMRI_preprocess -anat_s Sub0001_Ses1_FS -anat_d ~/storage/sMRI_preprocess 
 	-bld '002 003' -BOLD_stem _rest_stc_mc_cen_resid_lp0.08 -REG_stem _rest_stc_mc_reg -down FSL_MNI_2mm -sm 6 -sm_mask
-        ${CBIG_CODE_DIR}/data/templates/volume/FSL_MNI152_masks/SubcorticalLooseMask_MNI1mm_sm6_MNI2mm_bin0.2.nii.gz
+	${CBIG_CODE_DIR}/data/templates/volume/FSL_MNI152_masks/SubcorticalLooseMask_MNI1mm_sm6_MNI2mm_bin0.2.nii.gz
 	-final_mask ${FSL_DIR}/data/standard/MNI152_T1_2mm_brain_mask_dil.nii.gz
+
+
diff --git a/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/CBIG_preproc_native2mni_ants.csh b/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/CBIG_preproc_native2mni_ants.csh
index a478d3f..ae2fe13 100755
--- a/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/CBIG_preproc_native2mni_ants.csh
+++ b/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/CBIG_preproc_native2mni_ants.csh
@@ -40,14 +40,23 @@ set temp_1mm = "${FSL_DIR}/data/standard/MNI152_T1_1mm_brain.nii.gz"
 # Print help or version
 set n = `echo $argv | grep -e -help | wc -l`
 
-# if there is no arguments or there is -help option 
-if( $#argv == 0 || $n != 0 ) then
+# if there is -help option 
+if( $n != 0 ) then
 	echo $VERSION
 	# print help	
 	cat $0 | awk 'BEGIN{prt=0}{if(prt) print $0; if($1 == "BEGINHELP") prt = 1 }'
 	exit 0;
 endif
 
+# if there is no arguments
+if( $#argv == 0 ) then
+	echo $VERSION
+	# print help	
+	cat $0 | awk 'BEGIN{prt=0}{if(prt) print $0; if($1 == "BEGINHELP") prt = 1 }'
+	echo "WARNING: No input arguments. See above for a list of available input arguments."
+	exit 0;
+endif
+
 set n = `echo $argv | grep -e -version | wc -l`
 if($n != 0) then
 	echo $VERSION
@@ -102,7 +111,8 @@ else
 	echo $cmd |& tee -a $LF
 	eval $cmd |& tee -a $LF
 
-	set cmd = (CBIG_antsReg_vol2vol.sh -r $temp_1mm -i $mri_nii -d $volfolder -p $warp_prefix  -j $iter_affine -k $iter_SyN)
+	set cmd = (CBIG_antsReg_vol2vol.sh -r $temp_1mm -i $mri_nii -d $volfolder -p $warp_prefix  \
+-j $iter_affine -k $iter_SyN)
 	echo $cmd |& tee -a $LF
 	eval $cmd |& tee -a $LF
 
@@ -432,6 +442,7 @@ foreach runfolder ($bold)
 				echo "[native2mni_ants]: Applying final mask finished. The output is $output" |& tee -a $LF
 			else
 				echo "ERROR: Applying final mask failed." |& tee -a $LF
+				exit 1
 			endif			
 		endif
         endif
@@ -456,7 +467,10 @@ end
 which git
 if (! $status) then
 	echo "=======================Git: Last Commit of Current Function =======================" |& tee -a $LF
-	git -C ${CBIG_CODE_DIR} log -1 -- stable_projects/preprocessing/CBIG_fMRI_Preproc2016/CBIG_preproc_native2mni_ants.csh >> $LF
+	pushd ${CBIG_CODE_DIR}
+	git log -1 -- ${CBIG_CODE_DIR}/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/\
+CBIG_preproc_native2mni_ants.csh >> $LF
+	popd
 endif
 
 echo "****************************************************************" |& tee -a $LF
diff --git a/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/CBIG_preproc_native2mni_orig.csh b/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/CBIG_preproc_native2mni_orig.csh
deleted file mode 100755
index 58b99c9..0000000
--- a/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/CBIG_preproc_native2mni_orig.csh
+++ /dev/null
@@ -1,652 +0,0 @@
-#!/bin/tcsh 
-
-# Example: 
-#	$CBIG_CODE_DIR/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/CBIG_preproc_native2mni.csh 
-#	-s Sub0001_Ses1 -d ~/storage/fMRI_preprocess -anat_s Sub0001_Ses1_FS -anat_d ~/storage/sMRI_preprocess 
-#	-bld '002 003' -BOLD_stem _rest_stc_mc_cen_resid_lp0.08 -REG_stem _rest_stc_mc_reg -down FSL_MNI_2mm -sm 6 -sm_mask
-#	${CBIG_CODE_DIR}/data/templates/volume/FSL_MNI152_masks/SubcorticalLooseMask_MNI1mm_sm6_MNI2mm_bin0.2.nii.gz
-#	-final_mask ${FSL_DIR}/data/standard/MNI152_T1_2mm_brain_mask_dil.nii.gz
-#
-# This function does the following steps:
-#     1. Project anatomical data to MNI1mm space for check purpose
-#     2. Project BOLD to MNI1mm space
-#     3. Downsample projected data to MNI2mm (either FS 2mm or FSL 2mm, specified by -down)
-#     4. Smooth downsampled data (specified by -sm)
-#     5. Apply final mask, if any
-#
-# Written by Jingwei Li and CBIG under MIT license: https://github.com/ThomasYeoLab/CBIG/blob/master/LICENSE.md
-
-#BOLD: basename of each run input
-#boldfolder: directory of /bold
-#volfolder: store all volume results (/vol)
-#bold: all runs under /bold folder
-
-set VERSION = '$Id: CBIG_preproc_native2mni.csh v 1.0 2016/05/30'
-
-set subject = ""      # subject ID
-set sub_dir = ""      # directory to subjects
-set anat_dir = ""     # directory to recon-all folder
-set anat_s = ""       # recon-all folder
-set bold = ""         # bold number, e.g. '002 003'
-set BOLD_stem = ""    # BOLD stem, e.g. _rest_stc_mc_cen_FDRMS0.2_DVARS50_resid_lp0.08
-set reg_stem = ""     # registration stem, e.g. _rest_stc_mc
-set down = ""         # downsample flag, FSL_MNI_FS_2mm for FreeSurfer 2mm space, FSL_MNI_2mm for FSL MNI 2mm space
-
-set force = 0;
-set nocleanup = 0;
-set sm = 6;
-set FS_temp_2mm = "${CBIG_CODE_DIR}/data/templates/volume/FS_nonlinear_volumetric_space_4.5/gca_mean2mm.nii.gz"
-set MNI_temp_2mm = "${FSL_DIR}/data/standard/MNI152_T1_2mm_brain.nii.gz"
-set temp_2mm = ${MNI_temp_2mm}
-set MNI_ref_dir = "${CBIG_CODE_DIR}/data/templates/volume"
-set MNI_ref_id = "FSL_MNI152_FS4.5.0"
-
-# Print help or version
-set n = `echo $argv | grep -e -help | wc -l`
-
-# if there is no arguments or there is -help option 
-if( $#argv == 0 || $n != 0 ) then
-	echo $VERSION
-	# print help	
-	cat $0 | awk 'BEGIN{prt=0}{if(prt) print $0; if($1 == "BEGINHELP") prt = 1 }'
-	exit 0;
-endif
-
-set n = `echo $argv | grep -e -version | wc -l`
-if($n != 0) then
-	echo $VERSION
-	exit 0;
-endif
-
-set root_dir = `python -c "import os; print(os.path.realpath('$0'))"`
-set root_dir = `dirname $root_dir`
-
-goto parse_args;
-parse_args_return:
-
-goto check_params;
-check_params_return:
-
-
-setenv SUBJECTS_DIR $anat_dir
-
-set currdir = `pwd`
-cd $sub_dir/$subject
-
-
-# create log file
-if (! -e logs) then
-     mkdir -p logs
-endif
-set LF = $sub_dir/$subject/logs/CBIG_preproc_native2mni.log
-if( -e ${LF} ) then
-	rm $LF
-endif
-touch $LF
-echo "[native2mni]: logfile = $LF"
-echo "Volumetric Projection, Downsample & Smooth" >> $LF
-echo "[native2mni]: CBIG_preproc_native2mni.csh $cmdline"   >>$LF
-
-set boldfolder = "$sub_dir/$subject/bold"
-set volfolder = "$sub_dir/$subject/vol"
-echo "[native2mni]: boldfolder = $boldfolder" |& tee -a $LF
-
-pushd $boldfolder
-mkdir -p $volfolder
-
-set fs_version = `cat $FREESURFER_HOME/build-stamp.txt | sed 's@.*-v@@' | sed 's@-.*@@' | head -c 1`
-echo "Freesurfer version: ${fs_version}" |& tee -a $LF
-
-
-#############################################################
-### project T1 to MNI152 1mm space for check purpose
-#############################################################
-echo "================== Project T1 to MNI152 1mm space ==================" |& tee -a $LF
-set input = ${anat_dir}/${anat_s}/mri/norm.mgz
-set output = $volfolder/norm_MNI152_1mm.nii.gz
-if(-e $output) then
-	echo "[native2mni]: $output already exists." |& tee -a $LF
-else
-	set cmd = (CBIG_vol2vol_m3z.csh -src-id $anat_s -src-dir $anat_dir -targ-id $MNI_ref_id -targ-dir $MNI_ref_dir 
-                  -in $input -out $output -no-cleanup)
-	echo $cmd |& tee -a $LF
-	$cmd |& tee -a $LF
-	if(-e $output) then
-		echo "========== Projection of T1 to MNI152 1mm space finished ==========" |& tee -a $LF
-	else
-		echo "ERROR: Projection T1 to MNI152 1mm space failed." |& tee -a $LF
-		exit 1;
-	endif
-endif
-if( $nocleanup == 0 ) then
-	rm $volfolder/FStmp.norm_MNI152_1mm.nii.gz
-endif
-echo "" |& tee -a $LF
-
-
-#########################################################################
-### project fMRI to MNI152 1mm space and downsample to MNI152 2mm space
-#########################################################################
-foreach runfolder ($bold)
-	pushd $runfolder
-	echo "Run: $runfolder" |& tee -a $LF
-	set BOLD = ${subject}"_bld${runfolder}${BOLD_stem}"
-	echo $BOLD
-	
-	# if no smooth operation (sm=0), the final output is ${subject}_bld${runfolder}${BOLD_stem}_FS1mm_MNI1mm_MNI2mm.nii.gz
-	# if smooth (sm!=0), the final output is ${subject}_bld${runfolder}${BOLD_stem}_FS1mm_MNI1mm_MNI2mm_sm${sm}.nii.gz
-	set output_MNI2mm = $volfolder/${BOLD}_FS1mm_MNI1mm_MNI2mm.nii.gz
-	if($sm > 0) then
-		set final_output = $volfolder/${BOLD}_FS1mm_MNI1mm_MNI2mm_sm${sm}.nii.gz
-	else
-		set final_output = $output_MNI2mm
-	endif
-
-	# if final mask is applied, the final output should have _finalmask postfix
-	if( $?final_mask ) then
-		set final_output_mask = `basename $final_output .nii.gz`
-		set final_output_mask = "$volfolder/${final_output_mask}_finalmask.nii.gz"
-	endif
-	
-	# check if final output already exists
-	if( $?final_mask ) then
-		if(-e $final_output_mask) then
-			echo "[native2mni]: final output: $final_output_mask already exists." |& tee -a $LF
-			popd
-			continue
-		endif
-	else
-		if(-e $final_output) then
-			echo "[native2mni]: final output: $final_output already exists." |& tee -a $LF
-			popd
-			continue
-		endif
-	endif
-	
-	# check if registraton file exists
-	set regfile = ${subject}_bld${runfolder}${reg_stem}.dat
-	if(! -e $regfile) then
-		echo "ERROR: registration file $regfile not exists." |& tee -a $LF
-		exit 1;
-	endif
-	
-	# frame_dir stores the original, projected, downsampled, and smoothed single frames
-	set frame_dir = $volfolder/${BOLD}_frames
-	if (-e $frame_dir) then
-		echo "Warning: $frame_dir already exists"
-	endif
-	mkdir -p $frame_dir
-	
-	# split 4D image to single frame image
-	set output_prefix = $frame_dir/orig_frames
-	set cmd = (fslsplit $BOLD.nii.gz $output_prefix -t)
-	echo $cmd |& tee -a $LF
-	eval $cmd
-	echo "" |& tee -a $LF
-	
-	set frames = `ls $frame_dir/orig_frames*nii.gz`
-	set nframes = $#frames
-	if($nframes == 0) then
-		echo "ERROR: writing 4D volume $BOLD.nii.gz to individual frames failed" |& tee -a $LF
-		exit 1;
-	endif
-	
-	###################################
-	### project to MNI152 1mm space
-	###################################
-	echo "======== Project $runfolder to MNI152 1mm space ========" |& tee -a $LF
-	set fcount = 0;
-	while($fcount < $nframes)
-		set fcount_str = `echo $fcount | awk '{printf ("%04d",$1)}'`
-		
-		set input = $frame_dir/orig_frames${fcount_str}.nii.gz
-		set output = $frame_dir/${fcount_str}_MNI1mm.nii.gz
-		if(-e $output) then
-			echo "    [native2mni]: $output already exists." |& tee -a $LF
-		else
-			set cmd = (CBIG_vol2vol_m3z.csh -src-id $anat_s -src-dir $anat_dir -targ-id $MNI_ref_id -targ-dir $MNI_ref_dir 
-                                   -in $input -out $output -reg $regfile -no-cleanup)
-			echo $cmd |& tee -a $LF
-			eval $cmd |& tee -a $LF
-			if(-e $output) then
-				echo "    [native2mni]: projection to $output finished." |& tee -a $LF
-			else
-				echo "    ERROR: projection to $output failed." |& tee -a $LF
-				exit 1;
-			endif
-		endif
-		
-		@ fcount = $fcount + 1
-	end
-	echo "======== Projection of $runfolder to MNI152 1mm space finished. ========" |& tee -a $LF
-	echo "" |& tee -a $LF
-	
-	###################################
-	### downsample to MNI152 2mm space
-	###################################
-	echo "======== Downsample $runfolder to MNI152 2mm space ========" |& tee -a $LF
-	setenv SUBJECTS_DIR $MNI_ref_dir
-	set fcount = 0;
-	while($fcount < $nframes)
-		set fcount_str = `echo $fcount | awk '{printf ("%04d",$1)}'`
-		set input = $frame_dir/${fcount_str}_MNI1mm.nii.gz
-		set output = $frame_dir/${fcount_str}_MNI1mm_MNI2mm.nii.gz
-		
-		if(-e $output) then
-			echo "[native2mni]: $output already exists." |& tee -a $LF
-		else
-			set cmd = (mri_vol2vol --mov $input --s $MNI_ref_id --targ $temp_2mm --o $output --regheader --no-save-reg)
-			echo $cmd |& tee -a $LF
-			eval $cmd
-			if(-e $output) then
-				echo "    [native2mni]: downsample to $output finished." |& tee -a $LF
-			else
-				echo "    ERROR: downsample to $output failed." |& tee -a $LF
-			endif
-		endif
-		
-		@ fcount = $fcount + 1
-	end
-	echo "" |& tee -a $LF
-	
-	#########################
-	### smooth
-	#########################
-	echo "======== Smooth in MNI152 2mm space with fwhm = $sm ========" |& tee -a $LF
-	set fcount = 0;
-	while($fcount < $nframes)
-		set fcount_str = `echo $fcount | awk '{printf ("%04d",$1)}'`
-		
-		set input = $frame_dir/${fcount_str}_MNI1mm_MNI2mm.nii.gz
-		mkdir -p $frame_dir/sm
-		set output = $frame_dir/sm/${fcount_str}_MNI1mm_MNI2mm_sm${sm}.nii.gz
-		set std = `awk "BEGIN {print ${sm}/2.35482}"`    
-                #Note that fwhm = 2.35482 * std, fslmaths -s is in unit of mm, not voxel.
-		if(-e $output) then
-			echo "[native2mni]: $output already exists." |& tee -a $LF
-		else
-			if($?sm_mask) then
-				# if the user passes in a volume sm_mask, the procedure is
-				# 1. smooth volume data within sm_mask
-				# 2. smooth sm_mask within sm_mask
-				# 3. divide smoothed volume by smoothed sm_mask (deal with boundary problem)
-				set tmp1 = $frame_dir/tmp1_${fcount_str}.nii.gz
-				set tmp2 = $frame_dir/tmp2_${fcount_str}.nii.gz
-				
-				set cmd = (fslmaths $input -s $std -mas $sm_mask $tmp1)
-				echo $cmd |& tee -a $LF
-				eval $cmd
-				
-				set cmd = (fslmaths $sm_mask -s $std -mas $sm_mask $tmp2)
-				echo $cmd |& tee -a $LF
-				eval $cmd
-				
-				set cmd = (fslmaths $tmp1 -div $tmp2 $output)
-				echo $cmd |& tee -a $LF
-				eval $cmd
-			else
-				set cmd = (fslmaths $input -s $std $output)
-				echo $cmd |& tee -a $LF
-				eval $cmd
-			endif
-			
-			if(-e $output) then
-				echo "[native2mni]: smooth to $output finished." |& tee -a $LF
-			else
-				echo "ERROR: smooth to $output failed." |& tee -a $LF
-				exit 1;
-			endif
-		endif
-		
-		@ fcount = $fcount + 1
-	end
-	echo "" |& tee -a $LF
-	
-	######################
-	### combine frames
-	######################
-	echo "======== Combine frames for $runfolder ========" |& tee -a $LF
-	if($sm > 0) then
-		set cmd = (fslmerge -t $final_output $frame_dir/sm/*_MNI1mm_MNI2mm_sm${sm}.nii.gz)
-	else
-		set cmd = (fslmerge -t $final_output $frame_dir/*_MNI1mm_MNI2mm.nii.gz)
-	endif
-	echo $cmd |& tee -a $LF
-	eval $cmd
-	
-	# for some reason, the split-merge procedure will change TR in header information
-	# now change it back
-	set MRI_info = `mri_info $BOLD.nii.gz`
-	set TR = `echo $MRI_info | grep -o 'TR: \(.*\)' | awk -F " " '{print $2}'`
-	
-	set cmd = (mri_convert $final_output $final_output -tr $TR)
-	echo $cmd |& tee -a $LF
-	eval $cmd
-	
-	if(-e $final_output) then
-		echo "======== Combination of $runfolder finished ========" |& tee -a $LF
-	else
-		echo "======== Combination of $runfolder failed ========" |& tee -a $LF
-		exit 1;
-	endif
-	echo "" |& tee -a $LF
-	
-	#########################
-	### apply final mask
-	#########################
-	if( $?final_mask ) then
-		echo "======== Applying final mask for $runfolder ========" |& tee -a $LF
-		set input = $final_output
-		set output = $final_output_mask
-		
-		if( -e $output ) then
-			echo "[native2mni]: $output already exists" |& tee -a $LF
-		else		
-			set cmd = (fslmaths $input -mas ${final_mask} $output)
-			echo $cmd
-			eval $cmd
-
-			if( $nocleanup == 0 ) then
-				rm ${input}
-			endif
-			
-			if( -e $output ) then
-				echo "[native2mni]: Applying final mask finished. The output is $output" |& tee -a $LF
-			else
-				echo "ERROR: Applying final mask failed." |& tee -a $LF
-			endif			
-		endif
-	endif
-	
-	
-	#########################
-	### clean up
-	#########################
-	if( $nocleanup == 0 ) then
-		rm -R $frame_dir
-	endif
-	
-	
-	popd
-end
-
-
-#########################
-# Output last commit of current function 
-#########################
-# check if git exists
-which git
-if (! $status) then
-	echo "=======================Git: Last Commit of Current Function =======================" |& tee -a $LF
-	git -C ${CBIG_CODE_DIR} log -1 \
-        -- stable_projects/preprocessing/CBIG_fMRI_Preproc2016/CBIG_preproc_native2mni.csh >> $LF
-endif
-
-
-echo "****************************************************************" |& tee -a $LF
-echo "" |& tee -a $LF
-
-popd
-exit 0;
-
-
-#######################################
-##======pass the arguments
-#######################################
-parse_args:
-set cmdline = "$argv";
-while( $#argv != 0 )
-	set flag = $argv[1]; shift;
-	
-	switch($flag)
-		#subject name (required)
-		case "-s":
-			if ( $#argv == 0 ) goto arg1err;
-			set subject = $argv[1]; shift;
-			breaksw	
-		
-		#path to subject's folder (required)
-		case "-d":
-			if ( $#argv == 0 ) goto arg1err;
-			set sub_dir = $argv[1]; shift;
-			breaksw
-			
-		#anatomical directory (required)
-		case "-anat_d":
-			if ( $#argv == 0 ) goto arg1err;
-			set anat_dir = $argv[1]; shift;
-			breaksw
-		
-		#anatomical data (required)
-		case "-anat_s":
-			if ( $#argv == 0 ) goto arg1err;
-			set anat_s = $argv[1]; shift;
-			breaksw
-		
-		# bold number, like "002 003"	
-		case "-bld":
-			if ( $#argv == 0 ) goto argerr;
-			set bold = ($argv[1]); shift;
-			breaksw
-			
-		#MNI space smooth param
-		case "-sm":
-			if ( $#argv == 0 ) goto arg1err;
-			set sm = $argv[1]; shift;
-			breaksw
-			
-		#smooth mask
-		case "-sm_mask":
-			if ( $#argv == 0 ) goto arg1err;
-			set sm_mask = $argv[1]; shift;
-			breaksw
-		
-		#BOLDbase_suffix 
-		case "-BOLD_stem":
-			if ( $#argv == 0 ) goto arg1err;
-			set BOLD_stem = "$argv[1]"; shift;
-			breaksw
-			
-		#reg suffix (default rest_skip*_stc_mc_reg)
-		case "-REG_stem":
-			if ( $#argv == 0 ) goto arg1err;
-			set reg_stem = "$argv[1]"; shift;
-			breaksw
-		
-		# downsample flag, determine which MNI 2mm space the user wants to use
-		# "FSL_MNI_FS_2mm" for FreeSurfer 2mm space (128*128*128); "FSL_MNI_2mm" for FSL MNI 2mm space (91*109*91)
-		case "-down":
-			if ( $#argv == 0 ) goto arg1err;
-			set down = $argv[1]; shift;
-			breaksw
-			
-		# final mask (a loose MNI brain mask)
-		case "-final_mask":
-			if ( $#argv == 0 ) goto arg1err;
-			set final_mask = $argv[1]; shift;
-			breaksw
-			
-		# if nocleanup is turned on, it won't delete the folders with single frames, otherwise these folders will be removed
-		case "-nocleanup":
-			set nocleanup = 1
-			breaksw
-		
-		#update results, if exist then do not generate
-		case "-force":
-			set force = 1;
-			breaksw
-		
-		default:
-			echo ERROR: Flag $flag unrecognized.
-			echo $cmdline
-			exit 1
-			breaksw
-	endsw
-end
-goto parse_args_return;
-
-
-#############################################
-##======check passed parameters
-#############################################
-check_params:
-if ( $#subject == 0 ) then
-	echo "ERROR: subject not specified"
-	exit 1;
-endif
- 
-if ( $#sub_dir == 0 ) then
-	echo "ERROR: path to subject folder not specified"
-	exit 1;
-endif	
-
-if ( $#anat_dir == 0 ) then
-	echo "ERROR: anatomical directory not specified"
-	exit 1;
-endif
-
-if ( $#anat_s == 0 ) then
-	echo "ERROR: anatomical data not specified"
-	exit 1;
-endif
-
-if ( $#bold == 0 ) then
-	echo "ERROR: bold number not specified"
-	exit 1;
-endif
-
-if ( $#BOLD_stem == 0 ) then
-	echo "ERROR: BOLD stem not specified"
-	exit 1;
-endif
-
-if ( $#reg_stem == 0 ) then
-	echo "ERROR: reg stem not specified"
-	exit 1;
-endif
-
-# ${down} determine which downsample template will be used
-# FSL_MNI_FS_2mm (128x128x128) or FSL_MNI_2mm (91*109*91)
-if( $?down ) then
-	if( $down == "FSL_MNI_FS_2mm" ) then
-		set temp_2mm = ${FS_temp_2mm}
-	else if ( $down == "FSL_MNI_2mm" ) then
-		set temp_2mm = ${MNI_temp_2mm}
-	else
-		echo "ERROR: Wrong input for -down. Please choose from FSL_MNI_FS_2mm and FSL_MNI_2mm. Current down = $down"
-		exit 1;
-	endif
-endif
-				
-goto check_params_return;
-
-
-#########################################			
-##======Error message		
-#########################################
-arg1err:
-  echo "ERROR: flag $flag requires one argument"
-  exit 1
-
-arg2err:
-  echo "ERROR: flag $flag requires two arguments"
-  exit 1
-
-argerr:
-  echo "ERROR: flag $flag requires at least one argument"
-  exit 1
-
-
-#########################################
-# Usage exit
-#########################################
-BEGINHELP
-
-NAME:
-	CBIG_preproc_native2mni.csh
-	
-DESCRIPTION:
-	Project data from fMRI native space to MNI152 1mm space, downsample to MNI152 2mm space, and smooth.
-	
-	This function does the following steps:
-	    1. Project anatomical data to MNI152 1mm space for check purpose
-	    2. Project fMRI volumes to MNI152 1mm space
-	    3. Downsample the projected data to MNI152 2mm space (either FS 2mm or FSL 2mm, specified by -down)
-	    4. Smooth the downsampled data. The user can specify a mask for smoothing.
-	    5. Apply the final mask, if any.
-
-	Projection step uses mri_vol2vol to first project volume data to FreeSurfer nonlinear space and 
-	then project it to MNI152 1mm space. For more details, please refer to the command 
-	'CBIG_vol2vol_m3z.csh'.
-
-	For smoothing step, the users can pass in a mask (using -sm_mask flag). If the users specify a mask, 
-	then the program will smooth the volume within the mask, smooth the mask, and divide the smoothed 
-	volume by the smoothed mask (to deal with boundary problems).
-
-REQUIRED ARGUMENTS:
-	-s          subject   : fMRI subject id
-	-d          sub_dir   : absolute path to <subject>, all preprocessed data of this 
-	                        subject is assumed to be stored in <sub_dir>/<subject>
-	-anat_s     anat_s    : anatomical subject id (recon-all output subject name)
-	-anat_d     anat_dir  : absolute path to <anat_s>. All recon-all outputs of this 
-	                        subject is stored in <anat_dir>/<anat_s>.
-	-bld        bold      : all bold run numbers of this subject. Each number must be 
-	                        three digits. If this subject has multiple runs, use a space 
-	                        as delimiter, e.g. '002 003'. NOTE: quote sign is necessary.
-	-BOLD_stem  BOLD_stem : stem of input file, e.g. if the input file name is
-	                        Sub0001_Ses1_bld002_rest_stc_mc_cen_resid_cen_FDRMS0.2_DVARS50_bp_0_0.08.nii.gz,
-	                        then <BOLD_stem> = _rest_stc_mc_cen_resid_cen_FDRMS0.2_DVARS50_bp_0_0.08. 
-	                        This input file is assumed to be in <sub_dir>/<subject>/bold/<run_number>.
-	-REG_stem   reg_stem  : stem of T1-T2* registration file. E.g. if the registration 
-	                        file is Sub0001_Ses1_bld002_rest_skip4_stc_mc_reg.dat, then 
-	                        <REG_stem> = _rest_skip4_stc_mc_reg. The registration file 
-	                        is assumed to be stored in <sub_dir>/<subject>/bold/<run_number>.
-	                        
-OPTIONAL ARGUMENTS:
-	-sm         sm        : smooth fwhm (mm), e.g. 6. Even if the user does not use this option, 
-	                        the scripts will automatically smooth the volume by 6mm. If the user 
-	                        does not want to do smoothing, he/she needs to pass in -sm 0.
-	-sm_mask    sm_mask   : mask for smoothing (e.g. a grey matter mask in MNI152 2mm). An example 
-	                        of the smooth mask is: 
-	                        ${CBIG_CODE_DIR}/data/templates/volume/FSL_MNI152_masks/
-                                SubcorticalLooseMask_MNI1mm_sm6_MNI2mm_bin0.2.nii.gz
-	                        If <sm_mask> is not passed in, the smoothing step will smooth everything
-	                        by the FWHM as specified by -sm flag.
-	-down       down      : downsample space, choose from FSL_MNI_FS_2mm (size: 128 x 128 x 128)
-	                        or FSL_MNI_2mm (size: 91 x 109 x 91). Default is FSL_MNI_2mm
-	-final_mask final_mask: a loose mask in MNI152 2mm space applied to the volume in the
-	                        last step to reduce space. An example of the final mask is:
-	                        ${FSL_DIR}/data/standard/MNI152_T1_2mm_brain_mask_dil.nii.gz
-	-nocleanup            : do not remove intermediate results.
-	
-OUTPUTS:
-	(1) The anatomical volume projected to MNI152 1mm space (for checking):
-	    <sub_dir>/<subject>/vol/norm_MNI152_1mm.nii.gz
-	
-	(2) The fMRI volume after projection (in MNI152 1mm space):
-	    <sub_dir>/<subject>/vol/<subject>_bld<run_number><BOLD_stem>_MNI1mm.nii.gz
-	
-	(3) The fMRI volume after downsample (in MNI152 2mm space):
-	    <sub_dir>/<subject>/vol/<subject>_bld<run_number><BOLD_stem>_MNI1mm_MNI2mm.nii.gz
-	
-	(4) The fMRI volume after smooth:
-	    <sub_dir>/<subject>/vol/<subject>_bld<run_number><BOLD_stem>_MNI1mm_MNI2mm_sm<sm>.nii.gz
-	
-	(5) The fMRI volume after applying the final mask (if -final_mask is used):
-	    <sub_dir>/<subject>/vol/<subject>_bld<run_number><BOLD_stem>_MNI1mm_MNI2mm_sm<sm>_finalmask.nii.gz
-	
-	(6) Intermediate results (if -nocleanup is passed in):
-	    Folders <sub_dir>/<subject>/vol/<subject>_bld<run_number><BOLD_stem> including all intermediate 
-	    fMRI single frames. (The projection, downsample, and smoothing are done frame by frame to save 
-	    memory)
-	    <sub_dir>/<subject>/vol/FStmp.norm_MNI152_1mm.nii.gz is the anatomical volume project to FreeSurfer 
-	    nonlinear space.
-
-Example:
-	$CBIG_CODE_DIR/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/CBIG_preproc_native2mni.csh 
-	-s Sub0001_Ses1 -d ~/storage/fMRI_preprocess -anat_s Sub0001_Ses1_FS -anat_d ~/storage/sMRI_preprocess 
-	-bld '002 003' -BOLD_stem _rest_stc_mc_cen_resid_lp0.08 -REG_stem _rest_stc_mc_reg -down FSL_MNI_2mm -sm 6 -sm_mask
-	${CBIG_CODE_DIR}/data/templates/volume/FSL_MNI152_masks/SubcorticalLooseMask_MNI1mm_sm6_MNI2mm_bin0.2.nii.gz
-	-final_mask ${FSL_DIR}/data/standard/MNI152_T1_2mm_brain_mask_dil.nii.gz
-
-
diff --git a/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/CBIG_preproc_regression.csh b/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/CBIG_preproc_regression.csh
index 7c7fa71..6963aaf 100755
--- a/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/CBIG_preproc_regression.csh
+++ b/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/CBIG_preproc_regression.csh
@@ -23,14 +23,23 @@ set VERSION = '$Id: CBIG_preproc_regression.csh, v 1.0 2016/06/18 $'
 
 set n = `echo $argv | grep -e -help | wc -l`
 
-# if there is no arguments or there is -help option 
-if( $#argv == 0 || $n != 0 ) then
+# if there is -help option 
+if( $n != 0 ) then
 	echo $VERSION
 	# print help	
 	cat $0 | awk 'BEGIN{prt=0}{if(prt) print $0; if($1 == "BEGINHELP") prt = 1 }'
 	exit 0;
 endif
 
+# if there is no arguments
+if( $#argv == 0 ) then
+	echo $VERSION
+	# print help	
+	cat $0 | awk 'BEGIN{prt=0}{if(prt) print $0; if($1 == "BEGINHELP") prt = 1 }'
+	echo "WARNING: No input arguments. See above for a list of available input arguments."
+	exit 0;
+endif
+
 set n = `echo $argv | grep -e -version | wc -l`
 if($n != 0) then
 	echo $VERSION
@@ -60,8 +69,10 @@ set mt_diff_flag = 1;     # Default to include derivatives of motion parameters
 set aCompCor_diff_flag = 0 # Default to not include derivatives of aCompCor PCs
 set other_diff_flag = 1;   # Default to include derivatives of other regressors
 set polynomial_fit = 1    # Default demean and remove the linear trend
+set ext_regressor_stem = ""
 set per_run = 0			  # Default regress out all runs jointly
 set censor = 0			  # Default use all frames to do regression
+set save_beta = 0		# Default not save beta coefficients
 set detrend_method = "detrend" # Default use detrend method when creating motion regressor
 set force = 0
 
@@ -466,6 +477,18 @@ if (($all_regressor_exist_flag == 0) || ($force == 1)) then
 			paste $tmp1 > $all_regressor_file
 		endif
 		
+		# merg with external regressor
+		if ($ext_regressor_stem != "") then
+			set ext_regressor_file = "$regress_folder/$subject"_bld"${curr_bold}_${ext_regressor_stem}.txt"
+			echo ${ext_regressor_file} |& tee -a $LF 
+			if(! -e $ext_regressor_file) then
+			    echo "ERROR: The external regressor does not exist." |& tee -a $LF
+			    exit 1;
+		    endif
+			paste -d " " $all_regressor_file ${ext_regressor_file} > ${all_regressor_file}.tmp
+			mv ${all_regressor_file}.tmp ${all_regressor_file}
+		endif
+		
 		#rm $tmp1
 		set i = `expr $i + 1`
 	end
@@ -484,7 +507,7 @@ if ($motion12_itamar || $whole_brain || $wm || $csf || $aCompCor) then
 	if (($resid_exist_flag == 0) || ($force == 1)) then
 		set cmd = ( $MATLAB -nojvm -nodesktop -nodisplay -nosplash -r '"' 'addpath(fullfile('"'"$root_dir"'"','\
 "'"utilities"'"'))'; CBIG_glm_regress_vol "'"$fMRI_list"'" "'"$resid_list"'" "'"$all_regressors_list"'" \
-"'"$polynomial_fit"'" "'"$censor_list"'" "'"$per_run"'"; exit '"' )
+"'"$polynomial_fit"'" "'"$censor_list"'" "'"$per_run"'" "'"$save_beta"'"; exit '"' )
 		echo $cmd |& tee -a $LF
 		eval $cmd |& tee -a $LF
 	else
@@ -503,8 +526,10 @@ echo "=======================Regression done!=======================" |& tee -a
 which git
 if (! $status) then
 	echo "=======================Git: Last Commit of Current Function =======================" |& tee -a $LF
-	git -C ${CBIG_CODE_DIR} log -1 -- stable_projects/preprocessing/CBIG_fMRI_Preproc2016/CBIG_preproc_regression.csh \
+	pushd ${CBIG_CODE_DIR}
+	git log -1 -- ${CBIG_CODE_DIR}/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/CBIG_preproc_regression.csh \
 	>> $LF
+	popd
 endif
 
 echo "*********************************************************************" |& tee -a $LF
@@ -644,7 +669,13 @@ while( $#argv != 0 )
 			if ( $#argv == 0 ) goto arg1err;
 			set polynomial_fit = $argv[1]; shift;
 			breaksw
-
+			
+		#add external regressors
+		case "-ext_regressor_stem"
+			if ( $#argv == 0 ) goto arg1err;
+			set ext_regressor_stem = $argv[1]; shift;
+			breaksw
+			
 		#regress out the regressors for each run seperately	
 		case "-per_run":
 			set per_run = 1;
@@ -654,6 +685,11 @@ while( $#argv != 0 )
 		case "-censor"
 			set censor = 1; 
 			breaksw
+		
+		#save the beta coefficients of the regression
+		case "-save_beta"
+			set save_beta = 1; 
+			breaksw
 			
 		#use different detrend methods to detrend the motion regressors
 		case "-detrend_method"
@@ -824,9 +860,20 @@ OPTIONAL ARGUMENTS:
 	                                    [1,1,1...1]' will be added into the first column and a Mx1 matrix
 	                                    linspace(-1, 1, M)' will be added into the second column of the
 	                                    regressor matrix. See CBIG_glm_regress_matrix.m for details.
+	-ext_regressor_stem               : The stem of the external regressor files. Users can use this option to pass in
+	                                    one external regressor file for each run. We assume that the external regressors
+	                                    are stored in <subject_dir>/<subject_id>/bold/regression/ and the regressor
+	                                    files should have the filename 
+	                                    <subject_id>_bld<run_number>_<ext_regressor_stem>.txt
+	                                    E.g. subject1_bld001_task_regressors.txt when ext_regressor_stem=task_regressor
+	                                    The regressor file should be a .txt file containing numbers. Each row 
+	                                    corresponds to one frame in the current run and each column corresopnds to one
+	                                    regressor. The columns should be separated by space.
 	-per_run                          : If this option is used, regress out the regressors for each run separately. 
 	                                    Default is to regress all runs jointly.
 	-censor                           : fit beta coefficients without censored frames, then apply beta to all frames
+	-save_beta                        : If this option is used, the beta coefficients in the regression will be saved.
+	                                    Default is not to save beta
 	-force                            : update results, if output file exists then overwrite
 	-help                             : help
 	-version                          : version
@@ -841,6 +888,13 @@ OUTPUTS:
 	    or
 	    <sub_dir>/<subject_id>/bold/<run_number>/<subject_id>_bld<run_number><BOLD_stem>_residc.nii.gz 
 	    (if -censor is used)
+	    
+	(3) The beta coefficients of regression (if -save_beta is used)
+	    <sub_dir>/<subject_id>/bold/<run_number>/<subject_id>_bld<run_number><BOLD_stem>_resid_beta.nii.gz 
+	    (if -censor is not used)
+	    or
+	    <sub_dir>/<subject_id>/bold/<run_number>/<subject_id>_bld<run_number><BOLD_stem>_residc_beta.nii.gz 
+	    (if -censor is used)
 
 EXAMPLES:
 	1.
diff --git a/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/CBIG_preproc_skip.csh b/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/CBIG_preproc_skip.csh
index c353be2..9e6a9a5 100755
--- a/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/CBIG_preproc_skip.csh
+++ b/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/CBIG_preproc_skip.csh
@@ -6,10 +6,13 @@
 # AUTHOR ####################################
 # RU(BY) KONG 
 # 2016/06/09 
+# LYU XINGYU
+# 2022/01/14
 #############################################
 #############################################
 # In this script, we: 
-# 1) skip first several frames of fMRI data
+# 1) skip first several frames of fMRI data; In the case of multi-echo acquisition, 
+#    we will skip the same number of first few frames of each echo
 
 # Example: 
 #	$CBIG_CODE_DIR/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/CBIG_preproc_skip.csh 
@@ -19,17 +22,25 @@
 
 set VERSION = '$Id: CBIG_preproc_skip.csh, v 1.0 2016/06/18 $'
 
-
 set n = `echo $argv | grep -e -help | wc -l`
 
-# if there is no arguments or there is -help option 
-if( $#argv == 0 || $n != 0 ) then
+# if there is -help option 
+if( $n != 0 ) then
 	echo $VERSION
 	# print help	
 	cat $0 | awk 'BEGIN{prt=0}{if(prt) print $0; if($1 == "BEGINHELP") prt = 1 }'
 	exit 0;
 endif
 
+# if there is no arguments
+if( $#argv == 0 ) then
+	echo $VERSION
+	# print help	
+	cat $0 | awk 'BEGIN{prt=0}{if(prt) print $0; if($1 == "BEGINHELP") prt = 1 }'
+	echo "WARNING: No input arguments. See above for a list of available input arguments."
+	exit 0;
+endif
+
 set n = `echo $argv | grep -e -version | wc -l`
 if($n != 0) then
 	echo $VERSION
@@ -41,6 +52,8 @@ set subject_dir = ""
 set zpdbold = ""
 set BOLD_stem = ""
 set skip = 4 #Default skip first 4 frames
+set echo_number = 1	#echo number default to be 1
+set echo_stem = ""
 set force = 0 #Default if file exist, skip the step
 
 goto parse_args;
@@ -80,16 +93,30 @@ cd $boldfolder
 echo "=======================Skip frames=======================" |& tee -a $LF
 foreach curr_bold ($zpdbold)
 	pushd $curr_bold
-	set boldfile = $subject"_bld$curr_bold$BOLD_stem"
-	if ( (! -e $boldfile"_skip$skip.nii.gz") || ($force == 1) ) then
-		echo "[SKIP]: boldfile = $boldfile" |& tee -a $LF
-		@ numof_tps = `fslnvols $boldfile` - $skip
-		echo "[SKIP]: Deleting first $skip frames (fslroi) from $boldfile" |& tee -a $LF
-		fslroi $boldfile $boldfile"_skip$skip" $skip $numof_tps |& tee -a $LF
-		echo "[SKIP]: There are $numof_tps frames after skip $skip frames, output is $boldfile'_skip$skip.nii.gz'" |& tee -a $LF
-	else
-		echo "[SKIP]: $boldfile'_skip$skip.nii.gz' already exists!"
-	endif
+	@ j=1
+	while ( $j <= $echo_number)
+		if ( $echo_number > 1 ) then 
+			set echo_stem = _e$j
+		endif
+		set boldfile = $subject"_bld${curr_bold}${echo_stem}$BOLD_stem"
+		if ( (! -e $boldfile"_skip$skip.nii.gz") || ($force == 1) ) then
+			echo "[SKIP]: boldfile = $boldfile" |& tee -a $LF
+			@ numof_tps = `fslnvols $boldfile` - $skip
+			echo "[SKIP]: Deleting first $skip frames (fslroi) from $boldfile" |& tee -a $LF
+			fslroi $boldfile $boldfile"_skip$skip" $skip $numof_tps |& tee -a $LF
+			echo "[SKIP]: There are $numof_tps frames after skip $skip frames, output is \
+			 $boldfile'_skip$skip.nii.gz'" |& tee -a $LF
+			# change file name to be consistant if echo number is 1. 
+			if ($echo_number == 1) then
+				set cmd = "rsync $boldfile'_skip$skip.nii.gz' $subject"_bld$curr_bold$BOLD_stem"_skip$skip.nii.gz"
+				eval $cmd
+			endif
+		else
+			echo "[SKIP]: $boldfile'_skip$skip.nii.gz' already exists!"
+		endif
+
+		@ j++
+	end
 	popd
 end
 echo "=======================Skip done!=======================" |& tee -a $LF
@@ -102,11 +129,13 @@ echo "" |& tee -a $LF
 which git
 if (! $status) then
 	echo "=======================Git: Last Commit of Current Function =======================" |& tee -a $LF
-	git -C ${CBIG_CODE_DIR} log -1 -- stable_projects/preprocessing/CBIG_fMRI_Preproc2016/CBIG_preproc_skip.csh >> $LF
+	pushd ${CBIG_CODE_DIR}
+	git log -1 -- ${CBIG_CODE_DIR}/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/CBIG_preproc_skip.csh >> $LF
+	popd
 endif
 
 echo "****************************************************************" |& tee -a $LF
-exit 1;
+exit 0;
 
 ##########################################
 # Parse Arguments 
@@ -147,6 +176,12 @@ while( $#argv != 0 )
 			if ($#argv == 0) goto arg1err;
 			set skip = $argv[1]; shift;
 			breaksw
+
+		#echo number
+		case "-echo_number":
+			if ($#argv == 0) goto arg1err;
+			set echo_number = $argv[1]; shift;
+			breaksw
 			
 		#update results, if exist then overwrite	
 		case "-force":
@@ -162,7 +197,6 @@ while( $#argv != 0 )
 end
 goto parse_args_return;
 
-
 ##########################################
 # Check Parameters
 ##########################################
@@ -188,9 +222,9 @@ endif
 if ( $skip < 0 ) then
 	echo "ERROR: Can not skip negative frame"
 	exit 1;
-endif					
-goto check_params_return;
+endif
 
+goto check_params_return;
 
 ##########################################
 # ERROR message
@@ -213,7 +247,8 @@ NAME:
 	CBIG_preproc_skip.csh
 	
 DESCRIPTION:
-	This function removes the first several frames of fMRI data.
+	This function removes the first several frames of fMRI data. For multi-echo data, 
+	we will skip the first <num_frames> frames for each echo.
 
 REQUIRED ARGUMENTS:
 	-s  <subject_id>        : name of the subject, e.g. Sub0033_Ses1
@@ -227,10 +262,12 @@ REQUIRED ARGUMENTS:
 	                          Sub0001_Ses1_bld002_rest.nii.gz, the BOLD_stem will be _rest.
 	                          This input file should be stored in 
 	                          <subject_dir>/<subject_id>/bold/<run_number>/
+
 	                         
 OPTIONAL ARGUMENTS:
 	-skip  <num_frames>     : skip first several frames. Default is 4.
 	-force                  : update results, if exist then overwrite
+	-echo_number <echo_number> : number of echoes. For single echo data, default is 1.
 	-help                   : help
 	-version                : version
 
@@ -238,4 +275,7 @@ Example:
 	$CBIG_CODE_DIR/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/CBIG_preproc_skip.csh 
 	-s Sub0033_Ses1 -d ~/storage/fMRI_preprocess -bld '002 003' -BOLD_stem _rest -skip 4
 
-
+	For multi-echo case:
+	$CBIG_CODE_DIR/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/CBIG_preproc_skip.csh 
+	-s Sub005 -d ~/storage/fMRI_preprocess -bld '001' -BOLD_stem _rest 
+	-skip 4 -echo_number 3
diff --git a/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/CBIG_preproc_spatial_distortion_correction.csh b/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/CBIG_preproc_spatial_distortion_correction.csh
new file mode 100755
index 0000000..c5ed6e7
--- /dev/null
+++ b/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/CBIG_preproc_spatial_distortion_correction.csh
@@ -0,0 +1,856 @@
+#!/bin/csh -f
+
+#############################################
+# Spatial distortion correction with fieldmap
+#############################################
+#############################################
+# In this script, we:
+# 0) Assume the functional image has already been motion corrected and transformation matrices from
+#    motion correction are available
+# 1) Process the fieldmap based on the given image
+#    The fieldmap can have one of the following two forms:
+#    a. a phase difference image and a magnitude image
+#    b. two opposite phase encoding direction fieldmap images (e.g: AP and PA)
+# 2) Unwarp the functional image using FUGUE:
+#    This step applies the warping field generated from the processed fieldmaps to 
+#    the functional image
+# 3) In the case of multi-echo acquisition, distortion correction is only done on the first echo 
+#    and the warping field (combined with the transformation matrices from motion correction) 
+#    is applied to the rest of the echoes.
+# The unwarping method is taken from Midnight Scan Club (MSC) preprocessing pipeline, epi_unwarp_MSC,
+# which is written by Tyler Blazey 
+# (https://github.com/MidnightScanClub/MSCcodebase/blob/master/Processing/epi_unwarp_MSC).
+#############################################
+# Author: Shaoshi Zhang, Xingyu Lyu
+# Written by CBIG under MIT license: https://github.com/ThomasYeoLab/CBIG/blob/master/LICENSE.md
+
+set VERSION = '$Id: CBIG_preproc_spatial_distortion_correction.csh, v 1.0 2018/11/1 $'
+
+set n = `echo $argv | grep -e -help | wc -l`
+
+# if there is -help option 
+if( $n != 0 ) then
+	echo $VERSION
+	# print help	
+	cat $0 | awk 'BEGIN{prt=0}{if(prt) print $0; if($1 == "BEGINHELP") prt = 1 }'
+	exit 0;
+endif
+
+# if there is no arguments
+if( $#argv == 0 ) then
+	echo $VERSION
+	# print help	
+	cat $0 | awk 'BEGIN{prt=0}{if(prt) print $0; if($1 == "BEGINHELP") prt = 1 }'
+	echo "WARNING: No input arguments. See above for a list of available input arguments."
+	exit 0;
+endif
+
+set subject = ""
+set sub_dir = ""
+set zpdbold = ""
+set BOLD_stem = ""
+
+set fpm = ""                #fieldmap preocessing method (mag+phasediff/opposite PED)
+set mag = ""                #magnitude image absoulte path (for mag+phasediff)
+set phase = ""              #phase-differene image absolute path (for mag+phasediff)
+set delta_te = ""           #difference of te between two fieldmap magnitude image (for mag+phasediff)
+
+set j_plus = ""             #j+ direction image absolute path (for oppo PED)
+set j_minus = ""            #j- direction image absolute path (for oppo PED)
+set j_minus_trt = ""        #total readout time of j- image (for oppo PED, unit is in seconds)
+set j_plus_trt = ""         #toral readout time of j+ image (for oppo PED, unit is in seconds)
+
+set ees = ""                #effective echo spacing of fMRI image (for both, unit is in microseconds)
+set TE = ""                 #echo time of fMRI image (for both, unit is in microseconds)
+
+set ref = 0                 #reference frame, default is the first frame
+set prelude = 1             #unwrap the phase-difference image
+#do not change unit when processing the fieldmap if set to 1(will be set to 1 if fieldmap processing method is oppo PED)
+set no_unit_conversion = 0	
+set topup_config = ""       #config file for topup (use default if not specified)
+set sig_threshold = 0.9     #signal loss threshold. Default is 0.9
+set fmri_bet = 0.2          #BET fractional intensity threshold for fMRI image. Default is 0.2
+set mag_bet = 0.3           #BET fractional intensity threshold for magnitude image. Default is 0.3
+set echo_number = 1  	    #number of echos default to be 1
+set echo_stem = ""
+
+goto parse_args;
+parse_args_return:
+
+goto check_params;
+check_params_return:
+
+set root_dir = `python -c "import os; print(os.path.realpath('$0'))"`
+set root_dir = `dirname $root_dir`
+
+cd $sub_dir/$subject
+
+#############################################
+# BOLD Information
+#############################################
+
+set qc = $sub_dir/$subject"/qc"
+
+if (! -e $qc) then
+     mkdir -p $qc
+endif
+if (! -e logs) then
+     mkdir -p logs
+endif
+set LF = $sub_dir/$subject/logs/CBIG_preproc_spatial_distortion_correction.log
+if( -e $LF ) then
+	rm $LF
+endif
+touch $LF
+echo "[SDC]: logfile = $LF"
+echo "Spatial Distortion Correction" >> $LF
+echo "[CMD]: CBIG_preproc_spatial_distortion_correction.csh $cmdline"   >>$LF
+
+set boldfolder = "$sub_dir/$subject/bold"
+set sdc = "$boldfolder"/sdc
+if ( ! -e $sdc ) then
+     mkdir $sdc
+endif
+echo "[SDC]: boldfolder = $boldfolder" |& tee -a $LF
+echo "[SDC]: zpdbold = $zpdbold" |& tee -a $LF
+
+#############################################
+# Process fieldmap
+#############################################
+echo "=======================Processing input fieldmap images=======================" |& tee -a $LF
+
+cd $sdc
+#############################################
+# When fieldmaps are in magnitude and phasediff
+#############################################
+if ( $fpm == "mag+phasediff" ) then
+     if ( $mag == "" ) then
+          echo "ERROR: fieldmap magnitude image not specified. Exit." |& tee -a $LF
+          exit 1
+     endif
+     if ( $phase == "" ) then
+          echo "ERROR: fieldmap phase-difference image not specified. Exit." |& tee -a $LF
+          exit 1
+     endif
+     if ( $delta_te == "" ) then
+          echo "ERROR: delta TE not specified. Exit." |& tee -a $LF
+          exit 1
+     endif
+     rsync $mag $sdc/magnitude.nii.gz
+     rsync $phase $sdc/phase_difference.nii.gz
+     set mag = magnitude
+     set phase = phase_difference
+
+     # Create brain mask using magnitude image
+     set cmd = (bet $mag "$mag"_brain -f $mag_bet -m -R)
+     echo $cmd |& tee -a $LF
+     eval $cmd 
+     set mag = "$mag"_brain
+     set mag_brain_mask = "$mag"_mask
+
+	# Unit converstion to rad/s (and unwrapping) 
+	if ( $no_unit_conversion == 0 ) then
+		set range = `fslstats ${phase} -R`
+		set min = `echo $range[1] | cut -d '.' -f1`
+		set max = `echo $range[2] | cut -d '.' -f1`
+		set range = `echo $min $max`
+		if ( $range[1] >= -4096 && $range[2] <= 4094 ) then
+			set cmd = ( fslmaths $phase -div 4096 -mul 3.14159265 "$phase"_rad -odt float )
+		else if ( $range[1] == 0 && $range[2] == 4094 ) then
+			set cmd = ( fslmaths $phase -sub 2047 -div 2047 -mul 3.14159265 "$phase"_rad )
+			set cmd = ( $cmd -odt float )
+		else if ( $range[1] == 0 && $range[2] == 4095 ) then
+			set cmd = ( fslmaths $phase -sub 2047.5 -div 2047.5 -mul 3.14159265 "$phase"_rad )
+			set cmd = ( $cmd -odt float )
+		else
+			echo "Phase image has values that are not within expected range. Exit." |& tee -a $LF
+			exit 1
+		endif
+		echo $cmd |& tee -a $LF
+		eval $cmd
+		set phase = "$phase"_rad
+
+		#Unwrap phase image if prelude is set
+		if ( $prelude == 1 ) then
+			set cmd = ( prelude -p $phase -a $mag -o "$phase"_unwrap -m "$mag"_mask )
+			echo $cmd |& tee -a $LF
+			eval $cmd
+			set phase = "$phase"_unwrap
+		endif
+
+		#divide by delta TE 
+		set cmd = ( fslmaths $phase -div "$delta_te" "$phase"_sec )
+		echo $cmd |& tee -a $LF
+		eval $cmd
+		set phase = "$phase"_sec
+	endif
+	echo "Fieldmap magnitude image			$mag" |& tee -a $LF
+	echo "Fieldmap phase image				$phase" |& tee -a $LF
+	echo "Fieldmap magnitude brain mask		$mag_brain_mask" |& tee -a $LF
+
+#############################################
+# When two fieldmaps have opposite phase encoding directions
+#############################################
+else if ( $fpm == "oppo_PED" ) then
+	if ( $j_plus == "" ) then
+		echo "ERROR: j+ image not specified. Exit."|& tee -a $LF
+		exit 1
+	endif
+	if ( $j_minus == "" ) then
+		echo "ERROR: j- image not specified. Exit."|& tee -a $LF
+		exit 1
+	endif
+	if ( $j_minus_trt == "" || $j_plus_trt == "" ) then
+		echo "ERROR: Total readout time not specified. Exit. "|& tee -a $LF
+		exit 1
+	endif
+	#if user does not specify topup config file, use default config file
+	if ( $topup_config == "" ) then
+		echo "[WARNING] FSL TOPUP configuration file not specified. Use default topup config file."|& tee -a $LF
+		set topup_config = "$CBIG_FSLDIR"/src/topup/flirtsch/b02b0.cnf
+	endif
+
+	#create datain.txt
+	set datain = "$sdc"/datain.txt
+	if ( -e $datain ) then
+	    rm $datain 
+	endif
+	touch $datain
+	echo "0 -1 0 $j_minus_trt" >> $datain	#AP/j-
+	echo "0 1 0 $j_plus_trt" >> $datain	#PA/j+
+	echo "[SDC] datain.txt successfully created." |& tee -a $LF
+
+	#merge two opposite PED images (j- followed by j+)
+	set cmd = ( fslmerge -t AP_PA.nii.gz "$j_minus" "$j_plus" )
+	echo $cmd |& tee -a $LF
+	eval $cmd
+	#run TOPUP
+	set cmd = ( topup --imain=AP_PA.nii.gz --datain="$datain" --config="$topup_config" --fout=fmap_phase_hz.nii.gz  )
+	set cmd = ($cmd --iout=fmap_unwarped.nii.gz )
+	echo $cmd |& tee -a $LF
+	eval $cmd
+	#convert the unit to rad/s
+	set cmd = ( fslmaths fmap_phase_hz -mul 6.28 fmap_phase_rad_sec )
+	echo $cmd |& tee -a $LF
+	eval $cmd
+	set phase = fmap_phase_rad_sec
+	#average across magnitude images and brain extraction
+	set cmd = ( fslmaths fmap_unwarped -Tmean fmap_mag )
+	echo $cmd |& tee -a $LF
+	eval $cmd
+	set cmd = ( bet fmap_mag fmap_mag_brain -f $mag_bet -m -R )
+	echo $cmd |& tee -a $LF
+	eval $cmd
+	set mag = fmap_mag_brain
+	set mag_brain_mask = fmap_mag_brain_mask
+
+	echo "Fieldmap magnitude image 		$mag" |& tee -a $LF
+	echo "Fieldmap phase image	 		$phase" |& tee -a $LF
+	echo "Fieldmap magnitude brain mask	$mag_brain_mask" |& tee -a $LF
+
+# If the fieldmap proceesing method is neither 'mag+phasediff' nor 'oppo_PED', exit with error
+else 
+	echo "ERROR: Unknown fieldmap processing method. (fieldmap processing method should be either 'mag+phasediff' \
+	or 'oppo_PED'). Exit."|& tee -a $LF
+	exit 1
+endif
+
+echo "=======================Fieldmap processing done=======================" |& tee -a $LF
+echo "" |& tee -a $LF
+
+## For multi-echo case, here we do spatial distortion correction only on the first echo, 
+## then apply the warping to the rest of echoes.
+## set echo_stem based on echo number
+if ($echo_number != 1) then
+	set echo_stem = _e1
+endif
+
+##########################################
+# Unwarp BOLD images
+########################################## 
+foreach curr_bold ($zpdbold) 
+	cd $boldfolder/$curr_bold
+	set boldfile = "$subject"_bld"$curr_bold$echo_stem$BOLD_stem"
+#copy over processed magnitude, phase fieldmap image, and brain mask
+	set cmd = ( rsync $sdc/$mag_brain_mask.nii.gz fmap_magnitude_brain_mask.nii.gz )
+	eval $cmd
+	set cmd = ( rsync $sdc/$mag.nii.gz fmap_magnitude_brain.nii.gz )
+	eval $cmd
+	set cmd = ( rsync $sdc/$phase.nii.gz fmap_phase.nii.gz )
+	eval $cmd
+end
+
+foreach curr_bold ($zpdbold) 
+	cd $boldfolder/$curr_bold
+	set boldfile = "$subject"_bld"$curr_bold$echo_stem$BOLD_stem"
+	echo "=======================Create Brain Mask=======================" |& tee -a $LF
+
+	set mag_brain_mask = fmap_magnitude_brain_mask
+	set mag = fmap_magnitude_brain
+	set phase = fmap_phase
+
+	#Extract the reference frame
+	echo "Reference frame for $boldfile.nii.gz --> $ref" |& tee -a $LF
+	set cmd = ( fslroi $boldfile "$boldfile"_"$ref" $ref 1 )
+	echo $cmd |& tee -a $LF
+	eval $cmd
+
+	#fMRI brain extraction
+	set cmd = ( bet "$boldfile"_"$ref" "$boldfile"_"$ref"_brain -m -f $fmri_bet -R )
+	echo $cmd |& tee -a $LF
+	eval $cmd
+
+	#Create inverted field map brain mask
+	set cmd = ( fslmaths $phase -abs -bin -mas "$mag_brain_mask" -mul -1 -add 1 -bin "$phase"_inv_brain_mask )
+	echo $cmd |& tee -a $LF
+	eval $cmd
+			
+	#Cluster inverted brain mask
+	set cmd = ( cluster -i "$phase"_inv_brain_mask -t 0.5 --no_table -o "$phase"_inv_brain_mask_clust )
+	echo $cmd |& tee -a $LF
+	eval $cmd 
+			
+	#Save intensity of largest cluster 
+	set max = `fslstats "$phase"_inv_brain_mask_clust -R | awk '{print $2}'`
+
+	#Threshhold the image by max, then invert again. Get a new, tighter brain mask.
+	set cmd = ( fslmaths "$phase"_inv_brain_mask_clust -thr $max -bin -mul -1 -add 1 -bin )
+	set cmd = ( $cmd -mas "$mag_brain_mask" "$mag_brain_mask" )
+	echo $cmd |& tee -a $LF
+	eval $cmd 
+			
+	#Use the new brain mask on the phase image
+	set cmd = ( fslmaths "$phase" -mas "$mag_brain_mask" "$phase"_masked )
+	echo $cmd |& tee -a $LF
+	eval $cmd
+	set phase = "$phase"_masked 
+
+	#Get a 50% brain mask
+	set fifty = `fslstats "$mag" -P 98 | awk '{print ( $1 / 2 ) }'`
+	set cmd = ( fslmaths "$mag" -thr $fifty -bin "$mag"_fifty_mask )
+	echo $cmd |& tee -a $LF
+	eval $cmd 
+
+	#Erode the original brain mask
+	set cmd = ( fslmaths "$mag_brain_mask" -ero "$mag_brain_mask"_eroded )
+	echo $cmd |& tee -a $LF
+	eval $cmd 
+
+	#Add eroded and fifty masks
+	set cmd = ( fslmaths "$mag_brain_mask"_eroded -add "$mag"_fifty_mask -thr 0.5 -bin "$mag_brain_mask" )
+	echo $cmd |& tee -a $LF
+	eval $cmd 
+			
+	#Mask the phase image again
+	set cmd = ( fslmaths "$phase" -mas "$mag_brain_mask" "$phase" )
+	echo $cmd |& tee -a $LF
+	eval $cmd 
+
+	#Erode brain mask again
+	set cmd = ( fslmaths "$mag_brain_mask" -ero "$mag_brain_mask"_eroded )
+	echo $cmd |& tee -a $LF
+	eval $cmd 
+
+	echo "=======================Brain Mask Created=======================" |& tee -a $LF
+	echo "" |& tee -a $LF
+	echo "=======================Apply filetring on phase image=======================" |& tee -a $LF
+
+	#Create filter
+	set filter = "$phase"_filter_despike
+	set cmd = ( fugue --loadfmap="$phase" --mask="$mag_brain_mask" --despike --despikethreshold=2.1 --savefmap="$filter" )
+	echo $cmd |& tee -a $LF
+	eval $cmd 
+
+	#Apply the filter to brain edges
+	set cmd = ( fslmaths "$filter" -sub "$phase" -mas "$mag_brain_mask"_eroded -add "$phase" "$phase"_filtered )
+	echo $cmd |& tee -a $LF
+	eval $cmd 
+	set phase = "$phase"_filtered
+
+	#Shift median to 0
+	set median = `fslstats "$phase" -k "$mag_brain_mask" -P 50`
+	set cmd = ( fslmaths "$phase" -sub $median "$phase"_norm )
+	echo $cmd |& tee -a $LF
+	eval $cmd
+	set phase = "$phase"_norm
+	echo "=======================Filtering done=======================" |& tee -a $LF
+	echo "" |& tee -a $LF
+
+	echo "=======================Calculating warping field=======================" |& tee -a $LF
+	set xfm = "$boldfile"_"$ref"_brain_to_fmap_mag_brain_signal_lossed_distorted.mat
+	set inv_xfm = fmap_mag_brain_signal_lossed_distorted_to_"$boldfile"_"$ref"_brain.mat
+		
+	#Estimate signal loss from phase image. Range goes from 0 (no signal) to 1 (full signal)
+	set cmd = ( sigloss -i "$phase" --te="$TE" -m "$mag_brain_mask" -s "$phase"_signal_loss )
+	echo $cmd |& tee -a $LF 
+	eval $cmd 
+
+	#Multiply fieldmap magnitude image by signal loss image. Will result in a magnitude with areas of signal loss.
+	set cmd = ( fslmaths "$phase"_signal_loss -mul "$mag" fmap_mag_brain_signal_lossed -odt float )
+	echo $cmd |& tee -a $LF
+	eval $cmd 
+
+	#Run fugue on the signal lossed magnitude image. Will distort it according to the fieldmap phase image. 
+	set cmd = ( fugue -i fmap_mag_brain_signal_lossed --loadfmap="$phase" )
+	set cmd = ( $cmd --mask="$mag_brain_mask" -w fmap_mag_brain_signal_lossed_distorted )
+	set cmd = ( $cmd --nokspace --unwarpdir='y-' --dwell="$ees" )
+	echo $cmd |& tee -a $LF
+	eval $cmd 
+
+	#Do the same thing for the signal_loss phase image.
+	set cmd = ( fugue -i "$phase"_signal_loss --loadfmap="$phase" --dwell="$ees" )
+	set cmd = ( $cmd -w "$phase"_signal_loss_distorted --nokspace --unwarpdir='y-' )
+	set cmd = ( $cmd --mask="$mag_brain_mask" )
+	echo $cmd |& tee -a $LF
+	eval $cmd 
+
+	#Threshhold the distorted signal loss brain according to user chosen signal loss threshhold
+	set cmd = ( fslmaths "$phase"_signal_loss_distorted -thr "$sig_threshold" )
+	set cmd = ( $cmd "$phase"_signal_loss_distorted )
+	echo $cmd |& tee -a $LF
+	eval $cmd 
+
+	#Register the distorted magnitude to the distorted functional image.
+	#Generate func --> fmap_mag 
+	#Use the threshholded signal loss brain as weighting (areas with 0 will be ignored)
+	set cmd = ( flirt -ref fmap_mag_brain_signal_lossed_distorted -in "$boldfile"_"$ref"_brain )
+	set cmd = ( $cmd -omat $xfm -refweight "$phase"_signal_loss_distorted -dof 6 )
+	set cmd = ( $cmd -out "$boldfile"_"$ref"_brain_to_fmap_mag_brain_signal_lossed_distorted )
+	echo $cmd |& tee -a $LF
+	eval $cmd 
+
+	#Invert transformation to get fmap_mag --> func
+	set cmd = ( convert_xfm -omat $inv_xfm -inverse $xfm )
+	echo $cmd |& tee -a $LF
+	eval $cmd 
+
+	#Apply transformation to original magnitude image for QA purposes
+	set cmd = ( flirt -in "$mag" -ref "$boldfile"_"$ref"_brain -applyxfm -init )
+	set cmd = ( $cmd $inv_xfm -out fmap_mag_brain_to_"$boldfile"_"$ref"_brain )
+	echo $cmd |& tee -a $LF
+	eval $cmd 
+
+	#Apply transformation (fmap_mag --> func) to the field phase image, the result will be 
+	#phase image registered to functional image
+	set cmd = ( flirt -in "$phase" -ref "$boldfile"_"$ref"_brain -applyxfm )
+	set cmd = ( $cmd -init $inv_xfm -out "$phase"_to_"$boldfile"_"$ref"_brain )
+	echo $cmd |& tee -a $LF
+	eval $cmd 
+	set phase = "$phase"_to_"$boldfile"_"$ref"_brain
+
+	#Apply transform to mask
+	set cmd = ( flirt -in "$mag_brain_mask" -ref "$boldfile"_"$ref"_brain -applyxfm )
+	set cmd = ( $cmd -init $inv_xfm -out fmap_mag_brain_mask_to_"$boldfile"_"$ref"_brain )
+	echo $cmd |& tee -a $LF
+	eval $cmd  
+
+	#Rebinarize mask
+	set cmd = ( fslmaths fmap_mag_brain_mask_to_"$boldfile"_"$ref"_brain -thr 0.5 -bin )
+	set cmd = ( $cmd fmap_mag_brain_mask_to_"$boldfile"_"$ref"_brain )
+	echo $cmd |& tee -a $LF
+	eval $cmd |& tee 
+				
+	#dilate brain mask slightly in order to prevent erosion
+	set cmd = ( fslmaths fmap_mag_brain_mask_to_"$boldfile"_"$ref"_brain -dilM )
+	set cmd = ( $cmd -dilM -ero fmap_mag_brain_mask_to_"$boldfile"_"$ref"_brain )
+	echo $cmd |& tee -a $LF
+	eval $cmd  
+
+	#Run fugue using the registerted phase image on the distorted func. 
+	#Will unwarp the func reference frame and save the shift map that does this.
+	set cmd = ( fugue --loadfmap="$phase" --dwell=$ees -u "$boldfile"_"$ref"_unwarped )
+	set cmd = ( $cmd  -i "$boldfile"_"$ref" --saveshift="$boldfile"_"$ref"_unwarp_shift )
+	set cmd = ( $cmd --mask=fmap_mag_brain_mask_to_"$boldfile"_"$ref"_brain --unwarpdir='y-' )
+	echo $cmd |& tee -a $LF
+	eval $cmd 
+
+	#Convert the shiftwarp to an absolute warp
+	set cmd = ( convertwarp -s "$boldfile"_"$ref"_unwarp_shift -r "$boldfile"_"$ref" )
+	set cmd = ( $cmd --shiftdir='y-' -o "$boldfile"_"$ref"_unwarp_shift_warp ) 
+	echo $cmd |& tee -a $LF
+	eval $cmd 
+
+	echo "=======================Calculate warping field finished=======================" |& tee -a $LF
+	echo "" |& tee -a $LF
+	echo "=======================Unwarp BOLD image=======================" |& tee -a $LF
+	#check existence of relevant input images for applywarp
+	if ( ! -e "$boldfile"_"$ref"_unwarp_shift_warp.nii.gz ) then
+		echo "[ERROR] Warping field missing, please check if FSL version is 5.0.10 or above." |& tee -a $LF
+		exit 1
+	endif
+
+	if ( ! -e "$boldfile"_mc.cat ) then
+		echo "[ERROR] motion correction transformation matrices missing!" |& tee -a $LF
+		exit 1
+	endif
+	#apply motion correction transformation matrices and unwarping field at the same time to
+	#reduce the number of interpolation
+
+	set cmd = ( applywarp -i "$boldfile" -o "$boldfile"_mc_sdc -r "$boldfile" --abs )
+	set cmd = ( $cmd -w "$boldfile"_"$ref"_unwarp_shift_warp --premat="$boldfile"_mc.cat --interp=spline )
+	echo $cmd |& tee -a $LF
+	eval $cmd
+
+	echo "=======================Unwarping done!=======================" |& tee -a $LF
+	echo "" |& tee -a $LF
+
+	#########################
+	# apply warping on other echoes for multi-echo data
+	#########################
+	echo "====================== apply warp on other echos ======================" |& tee -a $LF
+	set i = 2
+	while ( $i <= $echo_number)
+		set cmd = ( applywarp -i $subject"_bld"${curr_bold}_e${i}${BOLD_stem}.nii.gz )
+		set cmd = ( $cmd -o "$subject"_bld"$curr_bold"_e$i"$BOLD_stem"_mc_sdc.nii.gz )
+		set cmd = ( $cmd -r "$subject"_bld"$curr_bold"_e${i}${BOLD_stem}.nii.gz --abs )
+		set cmd = ( $cmd -w "$subject"_bld"$curr_bold"_e1"$BOLD_stem"_"$ref"_unwarp_shift_warp.nii.gz )
+		set cmd = ( $cmd --premat="$subject"_bld"$curr_bold"_e1"$BOLD_stem"_mc.cat --interp=spline )
+		echo $cmd |& tee -a $LF
+		eval $cmd
+		@ i++
+	end
+	echo "====================== apply warp on other echos finished ======================" |& tee -a $LF
+
+	#tidy up the space
+	if ( ! -e unwarping ) then
+		mkdir warping
+	endif
+	mv fmap* warping/
+	mv "$boldfile"_"$ref"* warping/
+
+	#clean up intermediate files
+	if ( $nocleanup != 1 ) then
+		rm -r warping
+	endif
+end
+
+#########################
+# Output last commit of current function 
+#########################
+# check if git exists
+which git
+if (! $status) then
+	echo "=======================Git: Last Commit of Current Function =======================" |& tee -a $LF
+	pushd ${CBIG_CODE_DIR}
+	git log -1 --\
+	${CBIG_CODE_DIR}/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/CBIG_preproc_spatial_distortion_correction.csh \
+>> $LF
+	popd
+endif
+
+echo "******************************************************************************"
+echo ""
+
+exit 0
+
+##########################################
+# Parse Arguments 
+##########################################      
+
+parse_args:
+set cmdline = "$argv";
+
+while( $#argv != 0 )
+        set flag = $argv[1]; shift;
+
+        switch($flag)
+		#subject id
+		case "-s":
+			if ( $#argv == 0 ) goto argerr;
+			set subject = $argv[1]; shift;
+			breaksw
+
+		#subject folder
+		case "-d":
+			if ( $#argv == 0 ) goto argerr;
+			set sub_dir = $argv[1]; shift;
+			breaksw
+
+		#bold run number
+		case "-bld":
+			if ( $#argv == 0 ) goto argerr;
+			set zpdbold = ($argv[1]); shift;
+			breaksw
+		
+		#input file stem
+		case "-BOLD_stem":
+			if ( $#argv == 0 ) goto argerr;
+			set BOLD_stem = $argv[1]; shift;
+			breaksw
+		
+		#fieldmap processing method
+		case "-fpm":
+			if ( $#argv == 0 ) goto argerr;
+			set fpm = $argv[1]; shift;
+			breaksw
+
+		#magnitude image absolute path
+		case "-m":
+			set mag = $argv[1]; shift;
+			breaksw
+
+		#phase-difference image absolute path
+		case "-p":
+			set phase = $argv[1]; shift;
+			breaksw
+
+		#delta TE
+		case "-delta":
+			set delta_te = `echo "$argv[1]/1000" | bc -l`; shift;
+			breaksw
+		
+		#j+ image absolute path
+		case "-j_plus":
+			set j_plus = $argv[1]; shift;
+			breaksw
+
+		#j- image absolute path
+		case "-j_minus":
+			set j_minus = $argv[1]; shift;
+			breaksw
+
+		#total readout time j-
+		case "-j_minus_trt":
+			set j_minus_trt = $argv[1]; shift;
+			breaksw
+
+		#total readout time j-
+		case "-j_plus_trt":
+			set j_plus_trt = $argv[1]; shift;
+			breaksw
+		
+		#effective echo spacing
+		case "-ees":
+			if ( $#argv == 0 ) goto argerr;
+			set ees = `echo "$argv[1]/1000" | bc -l`; shift;
+			breaksw
+
+		#echo time
+		case "-te":
+			if ( $#argv == 0 ) goto argerr;
+			set TE = `echo "$argv[1]/1000" | bc -l`; shift;
+			breaksw
+
+		#reference frame
+		case "-ref":
+			set ref = $argv[1]; shift;
+			breaksw
+
+		#use prelude to unwrap phase image
+		case "-no_prelude":
+			set prelude = 0; shift;
+			breaksw
+		
+		#do not convert fieldmap unit (i.e. already in rad/s)
+		case "-no_unit_conversion":
+			set no_unit_conversion = 1; shift;
+			breaksw
+
+		#topup configuraion file absolute path
+		case "-topup_config":
+			set topup_config = $argv[1]; shift;
+			breaksw
+
+		#signal loss threshold
+		case "-sig":
+			set sig_threshold = $argv[1]; shift;
+			breaksw
+
+		#BET threshold for fMRI image
+		case "-fmri_bet":
+			set fmri_bet = $argv[1]; shift;
+			breaksw
+
+		#BET threshold for magnitude image
+		case "-mag_bet":
+			set mag_bet = $argv[1]; shift;
+			breaksw
+		#cleanup intermediate files
+		case "-nocleanup":
+			set nocleanup = 1;
+			breaksw
+
+		#echo number
+		case "-echo_number":
+			set echo_number = $argv[1]; shift;
+			breaksw
+
+
+                default:
+                        echo ERROR: Flag $flag unrecognized.
+                        echo $cmdline
+                        exit 1
+                        breaksw
+        endsw
+end
+goto parse_args_return;
+
+##########################################
+# Check Parameters
+##########################################
+
+check_params:
+
+if ( "$subject" == "" ) then
+	echo "ERROR: subject not specified"
+	exit 1;
+endif
+if ( "$sub_dir" == "" ) then
+	echo "ERROR: path to subject folder not specified"
+	exit 1;
+endif
+if ( "$zpdbold" == "" ) then
+	echo "ERROR: bold run not specified"
+	exit 1;
+endif
+if ( "$BOLD_stem" == "" ) then
+	echo "ERROR: input file stem not specified"
+	exit 1;
+endif	
+if ( "$fpm" == "" ) then
+	echo "ERROR: fieldmap processing method not specified"
+	exit 1;
+endif
+if ( "$ees" == "" ) then
+	echo "ERROR: effective echo spacing of fMRI image not specified"	
+	exit 1;
+endif
+if ( "$TE" == "" ) then
+	echo "ERROR: TE of fMRI image not specified"
+	exit 1;
+endif
+
+goto check_params_return;
+
+##########################################
+# ERROR message
+##########################################      
+
+argerr:
+  echo "ERROR: flag $flag requires one argument"
+  exit 1
+
+#####################################
+# Help
+#####################################
+BEGINHELP
+
+NAME:
+	CBIG_preproc_spatial_distortion_correction
+DESCRIPTION:
+	 This function:
+  	 0) assumes the fMRI image has already been motion corrected and transformation matrices available
+	 1) processes the filedmap based on the given image
+		1.1) If the input images are in the form of magnitude and phase-difference, this function will
+		     create a mask based on the magnitude image, and convert the unit of the phase-differene image 
+		     to rad/s. Unwrapping the phase image is optional.
+		1.2) If the input images are along opposite phase encoding direction, this function will run FSL TOPUP
+		     to unwarp the images and genreate an esimated field in HZ, the unit will be converted to rad/s. 
+		     Currently, only phase encoding directions along 'j-' and 'j' are supported. Ensure FSL version is at least 
+		     5.0.10, otherwise the output fieldmap image may have wrong orientation. For now, this script is only
+			 tested on FSL 5.0.10.
+			 [NOTE] Check the orientation of fieldmap to determine whether the phase encoding direction is 'j-' or 'j'.
+			 For example, if the orientation of fieldmap follows RAS convention, this means voxel position increases from
+			 posterior to anterior, therefore a phase encoding direction 'PA' is equivalent to 'j' and vice versa.
+	 2) Calculates warping field of the fMRI image using FUGUE
+		First, this function creates a brain mask based on the fieldmap magnitude image and applies it on the phase image.
+		Second, the phase image is further filetered by despiking, demeaned, and forward warped using FUGUE.
+		Third, this functions register phase image to fucntional image by the following step
+		Register the functional image to magnitude image and obtain the transformation
+		Inverse the above transformation and get the registration from magnitude image to functional image
+		Then apply the above transformation to phase image, such that phase image is registered to functional image
+		Fourth, run FUGUE using the registered phase image to obtain the warping field
+	 3) Unwarps the fMRI image
+	    fMRI image is unwarpped using FSL applywarp, this step requires the motion correction 
+	    transformation matrices beforehand. The matrices should be stored in a single file with name 
+	    <sub>_bld<bold_run>_<bold_stem>_mc.cat under <sub_dir>/<sub/>bold/<bold_run>.
+	    Warping field and motion correction transformation matrices will be applied together to 
+	    reduce the number of interpolation.
+	 4) In the case of multi-echo acquisition, distortion correction is only done on the first echo 
+	    and the warping field (combined with the transformation matrices from motion correction) is 
+		applied to the rest of the echoes.
+	    
+	 The method of calculating the warping field is taken from Midnight Scan Club (MSC) preprocessing pipeline,
+	 epi_unwarp_MSC, which is written by Tyler Blazey 
+	 (https://github.com/MidnightScanClub/MSCcodebase/blob/master/Processing/epi_unwarp_MSC).
+
+	 See spatial_distortion_correction_readme for more details. 
+
+REQUIRED ARGUMENTS:
+	-s  <subject_id>           			: subject's ID
+	-d  <subject_dir>         			: absolute path to <subject_id>. More specifically, processed data of 
+	                             	  	  this subject will be in folder <subject_dir>/<subject_id>
+	-bld  <bold_runs>          			: bold run numbers, each number must have three digits. If this 
+	                            	  	  subject has multiple runs, please use space as delimiter between 
+	                                  	  two run numbers (e.g. -bld "002 003"). NOTE: quote sign is necessary.
+	-BOLD_stem  <BOLD_stem>   			: specify the stem of input file. (e.g. if input file is 
+	                           		  	  Sub0001_bld002_rest_skip4_stc.nii.gz then the stem of this file is 
+	                           			  <BOLD_stem> = _rest_skip4_stc). This input file is assumed to be 
+	                           		  	  stored in <subject_dir>/<subject_id>/bold/<run_number>.
+	-fpm <fieldmap_processing_method>	: fieldmap processing method, can be mag+phasediff or oppo_PED
+	-ees <effective echo spacing>		: effective echo spacing of the functional image (ms)
+	-te <echo time>						: echo time of the functional image (ms)
+
+OPTIONAL ARGUMENTS:
+	-m <magnitude image>				: absolute path of the magnitude image
+	-p <phase image>					: absolute path of the phase difference image
+	-delta <delta_te>					: differene of echo time of two magnitude images (ms) 
+	-j_minus <j- image>					: absolute path of the j- image
+	-j_plus <j+ image>					: absolute paht of the j image
+	-j_minus_trt <total readout time>	: total readout time of j- image (s)
+	-j_plus_trt <total readout time>	: total readout time of j image (s)
+	-ref <ref>							: reference frame, default is the first frame (which starts with 0)
+	-no_unit_conversion					: do not perform unit conversion to rad/s
+	-no_prelude							: do not unwrap the phase image
+	-topup_config <config>				: absolute path of topup configuration file, use default if not specified
+	-sig <signal loss threshold>		: signal loss threshold, default is 0.1
+	-fmri_bet <fmri_bet>				: BET threshold for fMRI image, default is 0.2
+	-mag_bet <mag_bet>					: BET threshold for fieldmap magnitude image, default is 0.3
+	-echo_number <echo_number>			: number of echoes. For single echo data, default is 1.
+    -nocleanup                          : use this flag to keep all intermediate files
+	-help								: help
+	-version							: version
+
+OUTPUTS:
+	(1) A NIFTI volume after spatial distortion correction
+	    <sub_dir>/<subject>/bold/<bold_run>/<subject>_bld<bold_run>_<BOLD_stem>_mc_sdc.nii.gz
+		For multi-echo case, NIFTI volumes after spatial distortion correction for every echo
+		<sub_dir>/<subject>/bold/<bold_run>/<subject>_bld<bold_run>_e<echo_number>_<BOLD_stem>_mc_sdc.nii.gz
+	(2) Unwarping folder containins:
+		fmap_magnitude_brain		:brain extracted magnitude image, obtained from fieldmap and used for masking purpose
+		fmap_magnitude_brain_mask	:mask obtained from fmap_magnitude_brain
+		fmap_phase					:phase image obtained from fieldmap, unit is in rad/s
+		fmap_phase_masked			:phase image that is masked by fmap_magnitude_brain_mask
+		fmap_phase_masked_filtered_norm_signal_loss_distorted:
+						phase image that is masked, despiked, demeaned, signal loss estimated, and forward warped.
+						This image is further used as reference weight to register magnitude image to functional image
+		<sub>_bld<bold_run>_<BOLD_stem>_ref<ref>:
+						a reference frame from functional image
+		<sub>_bld<bold_run>_<BOLD_stem>_ref<ref>_unwarped:
+						an unwarped reference frame
+		<sub>_bld<bold_run>_<BOLD_stem>_ref<ref>_unwarp_shift:
+						a voxel shfit map obtained based on the unwarped frame
+		<sub>_bld<bold_run>_<BOLD_stem>_ref<ref>_unwarp_shift_warp:
+						the warping field used to unwarp all frames of functional image
+		fmap_mag_brain_to_<sub>_bld<bld_rin>_<BOLD_stem>_ref<ref>.nii.gz:
+						registration from magnitude image to functional image
+		fmap_phase_masked_filetered_norm_to_<sub>_bld<bld_rin>_<BOLD_stem>_ref<ref>.nii.gz:
+						registration from phase image to functional image
+		
+EXAMPLE:
+	./CBIG_preproc_spatial_distortion_correction -s sub-NDARAA536PTU -d ~/storage/fMRI_preprocess -bld '001' \
+	-BOLD_stem _rest -fpm "mag+phasediff" -m /data/HBN/rawData_release1_4/SI/sub-NDARAA536PTU/fmap/ \
+	sub-NDARAA536PTU_magnitude1.nii.gz -p /data/HBN/rawData_release_1_4/SI/sub-NDARAA536PTU/fmap/ \
+	sub-NDARAA536PTU_phasediff.nii.gz -delta 4.76 -ees 0.55 -te 40 
+
+	./CBIG_preproc_spatial_distortion_correction.csh -s sub-NDARWN691CG7 -d ~/storage/fMIR_preprocess -bld '001 002'\
+	-BOLD_stem _rest -fpm oppo_PED -j_minus /data/HBN/rawData_release1_4/RU/sub-NDARWN691CG7/fmap/ \
+	sub-NDARWN691CG7_dir-AP_acq-fMRI_epi.nii.gz -j_plus /data/HBN/rawData_release1_4/RU/sub-NDARWN691CG7/\
+	fmap/sub-NDARWN691CG7_dir-PA_acq-fMRI_epi.nii.gz -j_minus_trt 0.04565 -j_plus_trt 0.04565 -ees .580013000 -te 30.00
+
+Example for multi-echo case:
+	CBIG_preproc_spatial_distortion_correction.csh -s sub005 -d ~/storage/fMIR_preprocess -bld 001\
+	-echo_number 3 -BOLD_stem _rest_skip8_stc -fpm mag+phasediff\
+	-m /data/sub005/magnitude1.nii.gz -p /data/sub005/phase_diff.nii.gz -delta 2.46 -ees 0.25 -te 12
+
+
diff --git a/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/README.md b/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/README.md
index bc51d8b..4dd0730 100644
--- a/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/README.md
+++ b/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/README.md
@@ -10,11 +10,13 @@ Kong R, Li J, Orban C, Sabuncu MR, Liu H, Schaefer A, Sun N, Zuo XN, Holmes AJ,
 
 This folder contains a resting-state fMRI preprocessing pipeline written by CBIG group. Our preprocessing pipeline allows flexible preprocessing order by specifying the order of preprocessing steps in a configuration text file. The preprocessing steps include:
 - slice-time correction
-- motion correction
+- motion correction ([respiratory pseudomotion filtering](https://github.com/ThomasYeoLab/CBIG/blob/master/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/respiratory_pseudomotion_filtering.md))
+- [spatial distortion correction](https://github.com/ThomasYeoLab/CBIG/blob/master/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/spatial_distortion_correction_readme.md)
+- [multi-echo denoising](https://github.com/ThomasYeoLab/CBIG/blob/master/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/multi_echo_tedana_readme.md)
 - intra-subject registration between T1 and T2* images
 - nuisance regression
 - temporal interpolation of censored frames
-- bandpass filtering
+- bandpass filtering ([recommendation of bandpass censoring](https://github.com/ThomasYeoLab/CBIG/blob/master/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/Recommendation_of_bandpass_censoring.md))
 - projections to standard surface & volumetric spaces
 - functional connectivity (FC) matrix computation
 
@@ -42,14 +44,14 @@ Except for this project, if you want to use the code for other stable projects f
 - To download the version of the code that was last tested, you can either
 
   - visit this link:
-  [https://github.com/ThomasYeoLab/CBIG/releases/tag/v0.17.0-Fix_Absolute_Path](https://github.com/ThomasYeoLab/CBIG/releases/tag/v0.17.0-Fix_Absolute_Path)
+  [https://github.com/ThomasYeoLab/CBIG/releases/tag/v0.22.3-Add_multiecho](https://github.com/ThomasYeoLab/CBIG/releases/tag/v0.22.3-Add_multiecho)
   
   or
   
   - run the following command, if you have Git installed
   
   ```
-  git checkout -b CBIG_fMRI_Preprocessing v0.17.0-Fix_Absolute_Path
+  git checkout -b CBIG_fMRI_Preprocessing v0.22.3-Add_multiecho
   ```
 
 ### Usage 
@@ -82,7 +84,7 @@ Except for this project, if you want to use the code for other stable projects f
   
 - Software versions
   
-  The compulsory softwares include FreeSurfer (5.3 or 4.5), FSL (5.0.8), Matlab (2014a), and Python (2 or 3, only build-in functions are needed). If the user wants to use `CBIG_preproc_despiking` step, then AFNI is needed. If the user wants to use `CBIG_preproc_native2mni_ants` step, then ANTs (2.2.0) is needed.
+  The compulsory softwares include FreeSurfer (5.3 or 4.5), FSL (5.0.10), Matlab (2014a), and Python (2 or 3, only build-in functions are needed). If the user wants to use `CBIG_preproc_despiking` step, then AFNI is needed. If the user wants to use `CBIG_preproc_native2mni_ants` step, then ANTs (2.2.0) is needed.
 
   NOTE: There is a bug in early builds of ANTs (before Aug 2014) that causes resampling for timeseries to be wrong. We have tested that our
 codes would work on ANTs version 2.2.0. 
@@ -91,43 +93,54 @@ codes would work on ANTs version 2.2.0.
 
 ## Updates
 
-- Release v0.4.4 (20/10/2017): Initial release of CBIG fMRI preprocessing pipeline.
-- Release v0.4.5 (01/12/2017):
+- Release v0.22.3 (25/03/2022): Add multiecho denoising step into preprocessing pipeline.
 
-	1. Change motion correction (mcflirt) interpolation method from default **trilinear** to **spline**.
-	
-	2. Add an optional preprocessing step to perform despiking by **AFNI 3dDespike**.
-	
-	3. Add a preprocessing step to generate ROIs2ROIs functional connectivity matrix for input subject. 
-	
-- Release v0.4.6 (04/01/2018): 
+- Release v0.18.1 (20/01/2021):
+   1. Update unit test to accommodate to the new HPC.
+
+   2. Modify preprocessing scripts to make them compatible with the CSCHPC node structure.
+  
+- Release v0.17.2 (07/07/2020):
+	 1. Bug fix: Fix 'out-of-bound' error of `CBIG_preproc_fslmcflirt_outlier.csh` due to incorrect extraction of number of frames from `$boldfile"_mc_tmp.nii.gz"`.
+
+   2. Bug fix: Fix the threshold for ventricle mask erosion in functional space from `$num_vent` (number of voxels) to `$vent_vol` (volume).
+
+	 3. Add spatial distortion correction: CBIG_preproc_spatial_distortion_correction.csh.
+
+	 4. Spatial distortion correction step requires a newer FSL version. Update the default FSL verision to 5.0.10.
+ 
+- Release v0.17.0 (19/02/2020): Avoid using absolute paths. Add new environment variables to avoid possible problems caused by hard-coded absolute paths.
+​
+- Release v0.13.1 (19/07/2019): Update references in the readme.
+​
+- Release v0.9.8 (30/04/2019):
+    1. Bug fix: the script `$CBIG_CODE_DIR/utilities/scripts/CBIG_antsReg_vol2vol.sh` was supposed to be released in v0.9.6 but not released, causing crash of `CBIG_preproc_native2mni_ants` step. In this version, the updated `$CBIG_CODE_DIR/utilities/scripts/CBIG_antsReg_vol2vol.sh` will be released.
+​
+- Release v0.9.6 (12/04/2019):
+    1. Update censoring interpolation step to avoid crashing when there are vetices whose timeseries are all NaNs and to reduce run time if no frame needs to be censored.
     
-    1. Add functionality: projecting fMRI data from subject-specific space to MNI 2mm space using ANTs. 
+    2. Update QC greyplot step: global signal to be plotted is now computed from the input volume of the nuisance regression step (e.g. after T1-T2* registration and before censoring interpolation, if you use the default config file), whereas previously it was computed from the input volume of the QC greyplot step (e.g. after bandpass filtering, if you use the default config file).
     
-    2. Speed up censoring interpolation step by applying loose whole brain mask and optimizing the number of voxels processed each time. 
+    3. Fix a bug to avoid crashing when -final_mask option is not passed into `CBIG_preproc_native2mni.csh` and `CBIG_preproc_native2mni_ants.csh`
     
-    3. Add some functionality to generate more QC plots (plots of mcflirt parameters; grey plots reflecting signal intensity in grey matter). 
+    4. Save out motion correction transformation matrices for future distortion correction usage (distortion correction scripts have not been added in this release. They will be added in a future release.)
     
-    4. Force medial wall vertices to be NaN for the data in fsaverage surface space.
+    5. Change the rule-of-thumb of choosing bbregister transformation matrix. In previous versions, the registration matrix for each run was replaced with the registration matrix of the run who had the lowest BBR cost (i.e. the best run) in the same subject. From this release onwards, the BBR registration of the best run is applied to other runs only if the registration can improve the BBR cost of other runs. 
     
-- Release v0.4.7 (16/01/2018):
-
-    1. Add `config` and `unit_tests` folders.
+    6. Use the run with lowest BBR cost, instead of the first run, to create all the masks in the functional native volumetric space.
     
-    2. Add project-specific prefix `preproc` for preprocessing scripts.
-
-- Release v0.4.9 (31/01/2018):
-
-    1. Fix broken symbolic link under `bin` folder.
+    7. Remove `-censor` option in `CBIG_preproc_bandpass_fft.csh` and options of `-low_f` and `-high_f` in `CBIG_preproc_censor.csh`. Include a readme about bandpass filtering and censoring (i.e. `$CBIG_CODE_DIR/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/Recommendation_of_bandpass_censoring.md`).
     
-    2. Add preprocessing scripts to plot QC-FC correlation versus ROIs to ROIs distance.
+- Release v0.6.2 (15/07/2018):
+​
+    1. Update README.md for creating stand-alone repo.
     
-    3. Add an option to specify maximal memory usage in censoring interpolation step.
+    2. Add unit test: check correctness of 419x419 function connectivity matrix.
     
-    4. Add `examples` folder.
+    3. Add scripts for all unit tests.
     
 - Release v0.4.11 (21/03/2018):
-
+​
     1. Fix a bug: ventricles mask was not generated when the ventricles segmentation in anantomical space is <=100 voxels.
     
     2. Change the constraints of minimal number of voxels in ventricles/wm masks to be constraints of total volume in ventricles/wm masks.
@@ -136,38 +149,44 @@ codes would work on ANTs version 2.2.0.
     
     4. In regression step, remove the exact zero columns of regressors.
     
-- Release v0.6.2 (15/07/2018):
-
-    1. Update README.md for creating stand-alone repo.
-    
-    2. Add unit test: check correctness of 419x419 function connectivity matrix.
+- Release v0.4.9 (31/01/2018):
+​
+    1. Fix broken symbolic link under `bin` folder.
     
-    3. Add scripts for all unit tests.
+    2. Add preprocessing scripts to plot QC-FC correlation versus ROIs to ROIs distance.
     
-- Release v0.9.6 (12/04/2019):
-    1. Update censoring interpolation step to avoid crashing when there are vetices whose timeseries are all NaNs and to reduce run time if no frame needs to be censored.
+    3. Add an option to specify maximal memory usage in censoring interpolation step.
     
-    2. Update QC greyplot step: global signal to be plotted is now computed from the input volume of the nuisance regression step (e.g. after T1-T2* registration and before censoring interpolation, if you use the default config file), whereas previously it was computed from the input volume of the QC greyplot step (e.g. after bandpass filtering, if you use the default config file).
+    4. Add `examples` folder.
     
-    3. Fix a bug to avoid crashing when -final_mask option is not passed into `CBIG_preproc_native2mni.csh` and `CBIG_preproc_native2mni_ants.csh`
+- Release v0.4.7 (16/01/2018):
+​
+    1. Add `config` and `unit_tests` folders.
     
-    4. Save out motion correction transformation matrices for future distortion correction usage (distortion correction scripts have not been added in this release. They will be added in a future release.)
+    2. Add project-specific prefix `preproc` for preprocessing scripts.
     
-    5. Change the rule-of-thumb of choosing bbregister transformation matrix. In previous versions, the registration matrix for each run was replaced with the registration matrix of the run who had the lowest BBR cost (i.e. the best run) in the same subject. From this release onwards, the BBR registration of the best run is applied to other runs only if the registration can improve the BBR cost of other runs. 
+- Release v0.4.6 (04/01/2018): 
     
-    6. Use the run with lowest BBR cost, instead of the first run, to create all the masks in the functional native volumetric space.
+    1. Add functionality: projecting fMRI data from subject-specific space to MNI 2mm space using ANTs. 
     
-    7. Remove `-censor` option in `CBIG_preproc_bandpass_fft.csh` and options of `-low_f` and `-high_f` in `CBIG_preproc_censor.csh`. Include a readme about bandpass filtering and censoring (i.e. `$CBIG_CODE_DIR/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/Recommendation_of_bandpass_censoring.md`).
+    2. Speed up censoring interpolation step by applying loose whole brain mask and optimizing the number of voxels processed each time. 
     
-- Release v0.9.8 (30/04/2019):
-    1. Bug fix: the script `$CBIG_CODE_DIR/utilities/scripts/CBIG_antsReg_vol2vol.sh` was supposed to be released in v0.9.6 but not released, causing crash of `CBIG_preproc_native2mni_ants` step. In this version, the updated `$CBIG_CODE_DIR/utilities/scripts/CBIG_antsReg_vol2vol.sh` will be released.
+    3. Add some functionality to generate more QC plots (plots of mcflirt parameters; grey plots reflecting signal intensity in grey matter). 
     
-- Release v0.13.1 (19/07/2019): Update references in the readme.
+    4. Force medial wall vertices to be NaN for the data in fsaverage surface space.
     
-- Release v0.17.0 (19/02/2020): Avoid using absolute paths. Add new environment variables to avoid possible problems caused by hard-coded absolute paths.
-
+- Release v0.4.5 (01/12/2017):
+​
+  	1. Change motion correction (mcflirt) interpolation method from default **trilinear** to **spline**.
+	
+  	2. Add an optional preprocessing step to perform despiking by **AFNI 3dDespike**.
+	
+  	3. Add a preprocessing step to generate ROIs2ROIs functional connectivity matrix for input subject. 
+​
+- Release v0.4.4 (20/10/2017): Initial release of CBIG fMRI preprocessing pipeline.
+                       
 ----
 
 ## Bugs and Questions
 
-Please contact Ru(by) Kong at roo.cone@gmail.com, Jingwei Li at jingweili.sjtu.nus@gmail.com, Nanbo Sun at sun464879934@gmail.com and Thomas Yeo at yeoyeo02@gmail.com.
+Please contact Ru(by) Kong at roo.cone@gmail.com, Jingwei Li at jingweili.sjtu.nus@gmail.com, Lyu Xingyu at lvxingyuyuyu@gmail.com, Shaoshi Zhang at 0zhangshaoshi0@gmail.com and Thomas Yeo at yeoyeo02@gmail.com.
diff --git a/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/config/CBIG_preproc_tested_config.sh b/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/config/CBIG_preproc_tested_config.sh
index f8cc760..70ff34f 100755
--- a/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/config/CBIG_preproc_tested_config.sh
+++ b/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/config/CBIG_preproc_tested_config.sh
@@ -1,5 +1,5 @@
 #! /bin/sh
-# Last successfully run on Jan 12nd, 2018
+# Last successfully run on Mar 20, 2022
 # Written by CBIG under MIT license: https://github.com/ThomasYeoLab/CBIG/blob/master/LICENSE.md
 
 # DO NOT CHANGE: This clears old freesurfer variables if they previously exists
@@ -8,32 +8,31 @@ if [ -n "$FREESURFER_HOME" ]; then
 fi
 
 # PLEASE CHANGE: Please specify location of CBIG repository
-export CBIG_CODE_DIR=/data/users/jingweil/storage/CBIG_private
+export CBIG_CODE_DIR=$HOME/storage/CBIG_private
 
 # PLEASE CHANGE: define locations for these libraries
-export FREESURFER_HOME=/apps/arch/Linux_x86_64/freesurfer/5.3.0
-export CBIG_MATLAB_DIR=/apps/arch/Linux_x86_64/matlab/R2014a
-export CBIG_SPM_DIR=/apps/arch/Linux_x86_64/spm/spm12
-export CBIG_AFNI_DIR=/apps/arch/Linux_x86_64/afni/20150126/linux_openmp_64
-export CBIG_ANTS_DIR=/apps/arch/Linux_x86_64/ants/ants_v2.2.0/BUILD/bin/
-export CBIG_WB_DIR=/apps/arch/Linux_x86_64/HCP/workbench/
-export CBIG_CARET_DIR=/apps/arch/Linux_x86_64/caret/
-export CBIG_FSLDIR=/apps/arch/Linux_x86_64/fsl/5.0.8
+export FREESURFER_HOME=/apps/freesurfer/5.3.0
+export CBIG_MATLAB_DIR=/apps/matlab/R2018b
+export CBIG_SPM_DIR=/apps/spm/spm12
+export CBIG_AFNI_DIR=/apps/afni/AFNI_2011_12_21_1014/linux_openmp_64
+export CBIG_ANTS_DIR=/apps/ants/ants_v2.2.0/BUILD/bin/
+export CBIG_WB_DIR=/apps/HCP/workbench-1.1.1/
+export CBIG_FSLDIR=/apps/fsl/5.0.10
 
 # DO NOT CHANGE: define locations for unit tests data and replication data
-export CBIG_TESTDATA_DIR=/mnt/eql/yeo1/CBIG_test_data/unit_tests
-export CBIG_REPDATA_DIR=NA
-export CBIG_preproc_REP_GSP_DIR=/mnt/eql/yeo3/data/GSP2016
+export CBIG_TESTDATA_DIR=/mnt/isilon/CSC1/Yeolab/CodeMaintenance/UnitTestData
+export CBIG_REPDATA_DIR=/mnt/isilon/CSC1/Yeolab/CodeMaintenance/ReplicationData
 
 # DO NOT CHANGE: define scheduler location
-export CBIG_SCHEDULER_DIR=/apps/sysapps/TORQUE/bin
+export CBIG_SCHEDULER_DIR=/opt/pbs/bin
 
 # DO NOT CHANGE: set up your environment with the configurations above
 SETUP_PATH=$CBIG_CODE_DIR/setup/CBIG_generic_setup.sh
 source $SETUP_PATH
 
-# DO NOT CHANGE: set up temporary directory for MRIread from FS6.0
-export TMPDIR=/tmpstore
+# DO NOT CHANGE: set up temporary directory for MRIread from FS6.0 for CBIG 
+# members using the HPC, Other users should comment this out
+export TMPDIR=/tmp
 
 # Do NOT CHANGE: set up MATLABPATH so that MATLAB can find startup.m in our repo 
 export MATLABPATH=$CBIG_CODE_DIR/setup
diff --git a/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/example_config.txt b/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/example_config.txt
index fc2c5ff..4a8839f 100644
--- a/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/example_config.txt
+++ b/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/example_config.txt
@@ -12,4 +12,4 @@ CBIG_preproc_bandpass -low_f 0.009 -high_f 0.08 -detrend
 CBIG_preproc_QC_greyplot -FD_th 0.2 -DV_th 50
 CBIG_preproc_native2fsaverage -proj fsaverage6 -sm 6 -down fsaverage5
 CBIG_preproc_FC_metrics -Pearson_r -censor
-CBIG_preproc_native2mni_ants -sm_mask ${CBIG_CODE_DIR}/data/templates/volume/FSL_MNI152_masks/SubcorticalLooseMask_MNI1mm_sm6_MNI2mm_bin0.2.nii.gz -final_mask ${FSL_DIR}/data/standard/MNI152_T1_2mm_brain_mask_dil.nii.gz
+CBIG_preproc_native2mni_ants -final_mask ${FSL_DIR}/data/standard/MNI152_T1_2mm_brain_mask_dil.nii.gz
diff --git a/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/example_with_distortion_correction_config.txt b/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/example_with_distortion_correction_config.txt
new file mode 100644
index 0000000..66c48ae
--- /dev/null
+++ b/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/example_with_distortion_correction_config.txt
@@ -0,0 +1,18 @@
+###CBIG fMRI preprocessing configuration file
+###The order of preprocess steps is listed below
+###Change: swap bandpass and regress order, regress_new (use BOLD_stem as MASK_stem), per_run, detrend (not trendout), censor
+CBIG_preproc_skip -skip 4
+### Caution: Change your slice timing file based on your data !!! The example slice timing file is a fake one.
+CBIG_preproc_fslslicetimer -slice_timing ${CBIG_CODE_DIR}/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/example_slice_timing.txt
+CBIG_preproc_fslmcflirt_outliers -FD_th 0.2 -DV_th 50 -discard-run 50 -rm-seg 5 -spline_final
+### Caution: In the case of spatial distortion correction using opposite phase encoding directions, please change the path of j- and j+ image accordingly. If the voxel postion increases from posterior to anterior (for example, RAS, LAS orientation), j+ corresponds to PA and j- corresponds to AP direction.
+### Total readout time (trt), effective echo spacing (ees) and echo time (TE) should be based on your data!!!
+CBIG_preproc_spatial_distortion_correction -fpm oppo_PED -j_minus <j_minus_image_path> -j_plus <j_plus_image_path> -j_minus_trt 0.04565 -j_plus_trt 0.04565 -ees .580013 -te 30.00
+CBIG_preproc_bbregister
+CBIG_preproc_regress -whole_brain -wm -csf -motion12_itamar -detrend_method detrend -per_run -censor -polynomial_fit 1
+CBIG_preproc_censor -max_mem NONE
+CBIG_preproc_bandpass -low_f 0.009 -high_f 0.08 -detrend 
+CBIG_preproc_QC_greyplot -FD_th 0.2 -DV_th 50
+CBIG_preproc_native2fsaverage -proj fsaverage6 -sm 6 -down fsaverage5
+CBIG_preproc_FC_metrics -Pearson_r -censor
+CBIG_preproc_native2mni_ants -sm_mask ${CBIG_CODE_DIR}/data/templates/volume/FSL_MNI152_masks/SubcorticalLooseMask_MNI1mm_sm6_MNI2mm_bin0.2.nii.gz -final_mask ${FSL_DIR}/data/standard/MNI152_T1_2mm_brain_mask_dil.nii.gz
diff --git a/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/example_with_multi_echo_config.txt b/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/example_with_multi_echo_config.txt
new file mode 100644
index 0000000..9821ac6
--- /dev/null
+++ b/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/example_with_multi_echo_config.txt
@@ -0,0 +1,18 @@
+###CBIG fMRI preprocessing configuration file
+###The order of preprocess steps is listed below
+CBIG_preproc_skip -skip 4
+### Caution: Change your slice timing file based on your data. The example slice timing file is a fake one.
+CBIG_preproc_fslslicetimer -slice_timing ${CBIG_CODE_DIR}/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/example_slice_timing_e1.txt,${CBIG_CODE_DIR}/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/example_slice_timing_e2.txt,${CBIG_CODE_DIR}/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/example_slice_timing_e3.txt
+CBIG_preproc_fslmcflirt_outliers -FD_th 0.3 -DV_th 60 -discard-run 50 -rm-seg 5
+### Total readout time (trt), effective echo spacing (ees) and echo time (TE) should be based on your data.
+CBIG_preproc_spatial_distortion_correction -fpm "mag+phasediff" -m /mnt/isilon/CSC2/Yeolab/Data/MBME/process/sub005_MCGILL_OC+MEICA_d1s1/sub005/fmap/magnitude1.nii.gz -p /mnt/isilon/CSC2/Yeolab/Data/MBME/process/sub005_MCGILL_OC+MEICA_d1s1/sub005/fmap/phase_diff.nii.gz -delta 2.46 -ees 0.25 -te 12
+### Caution: Change your echo time based on your data from json in milliseconds. This is only an example.
+CBIG_preproc_multiecho_denoise -echo_time 12,30.11,48.22 
+CBIG_preproc_bbregister
+CBIG_preproc_regress -whole_brain -wm -csf -motion12_itamar -detrend_method detrend -per_run -censor -polynomial_fit 1
+CBIG_preproc_censor
+CBIG_preproc_bandpass -low_f 0.009 -high_f 0.08 -detrend 
+CBIG_preproc_QC_greyplot -FD_th 0.3 -DV_th 60
+CBIG_preproc_native2fsaverage -proj fsaverage6 -sm 6 -down fsaverage5
+CBIG_preproc_FC_metrics -Pearson_r -censor
+
diff --git a/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/multi_echo_tedana_readme.md b/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/multi_echo_tedana_readme.md
new file mode 100644
index 0000000..5e27e0d
--- /dev/null
+++ b/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/multi_echo_tedana_readme.md
@@ -0,0 +1,34 @@
+# Multi Echo Preprocessing (ME) README
+
+## Overview
+Multi-echo (ME) fMRI refers to collecting data at multiple echo times, resulting in multiple volumes with varying levels of contrast acquired per radio frequency pulse. By collecting multi-echo data, we can compare results across different echoes, more importantly combine the results by weighted averaging and denoise the data based on information contained in the echoes. 'Tedana' is an ICA-based denoising pipeline built especially for multi-echo data. Rather than analyzing single-echo time series separately, tedana combines them into an “optimally combined time series”, and then denoising the data based on information contained in the echoes using a multi-echo ICA-based denoising method. For more detailed information about 'tedana', please refer to their website: https://tedana.readthedocs.io/en/stable/index.html
+
+
+## Preparation
+
+In order to run tedana, please make sure that the following packages are available under conda environment with name tedana:
+
+* nilearn
+* nibabel
+* numpy
+* scikit-learn
+* scipy
+* tedana
+* duecredit (optional) 'duecredit' is a python package that is used, but not required by 'tedana'. These warnings do not affect any of the processing within the 'tedana'. To avoid this warning, you can install 'duecredit' with 'pip install duecredit'.
+
+If the user has installed CBIG_py3 environment, the above list of packages are already installed. For more detailed information about our CBIG_py3 envrionment, please refer to:
+https://github.com/ThomasYeoLab/CBIG/tree/master/setup/python_env_setup#quick-installation-for-linux
+
+And also please make sure that echo times for each echo are available.
+
+
+## How to run the ME script?
+An example command is shown as the following:
+
+`./CBIG_preproc_multiecho_denoise.csh -s sub005 -d ~/fmri_preprocess -bld 001 -BOLD_stem _rest_skip4_stc_mc_sdc -echo_number 3 -echo_time 12,30.11,48.22`
+
+**[IMPORTANT]**: Please note that echo time must be in milleseconds, and echo time should be separated by comma and should be set in an ascending order.
+
+## Quality Control (QC)
+
+Two grey plots, which are before and after denoising, will be generated in QC of tedana. By right, the one which is after denoising should be more clean and consistent. After MEICA, global artefact should become more pronounced while local artefacts are removed. QC result will be in `$sub_dir/$subject/qc` folder.
diff --git a/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/quality_control_readme.md b/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/quality_control_readme.md
index 422561f..babc9ba 100644
--- a/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/quality_control_readme.md
+++ b/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/quality_control_readme.md
@@ -116,3 +116,11 @@ help CBIG_preproc_plot_QC_RSFC_corr_vs_distance_wrapper.m
 rmpath([getenv('CBIG_CODE_DIR') '/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/utilities']);
 ```
   Notice that `$CBIG_CODE_DIR/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/utilities/CBIG_preproc_plot_QC_RSFC_corr_vs_distance_wrapper.m` is specific to our preprocessing pipeline because it depends on the assumed folder structures. If the users want to plot this figure for some data not processed by our pipeline, they need to write their own wrappers to read in data and call `$CBIG_CODE_DIR/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/utilities/CBIG_plot_QC_RSFC_corr_vs_distance_matrix.m` to do the plotting.
+
+## Spatial distortion correction
+
+  If spatial distortion correction is performed as one of the preprocessing steps, the spatial distortion correction should be performed after motion corection step and before BBR step. QC is conducted by comparing the registration costs between image with spatial distortion corrected and image without spatial distortion correction. By right, image with distortion correction should have a lower registration cost. If spatial distortion correction is done, there should be two columns in `${sub_dir}/${subject}/qc/CBIG_preproc_bbregister_intra_sub_reg.cost`, where each row corresponds to one run. The first column lists the registration cost(s) with distortion correction, the second column lists the registration cost(s) without distortion correction. The cost(s) in the first column should not be greater than that in the second column. 
+  Also, if there is at least one run where the reigstration cost becomes higher after doing spatial distortion correction, a warning will be generated in `${sub_dir}/${subject}/logs/CBIG_preproc_fMRI_preprocess.log` 
+
+## Multi-echo preprocessing
+  If tedana is performed in the whole pipeline, two greyplots will be generated. QC is comparing the two grey plots before and after denoising. By right, the one which is after denoising should be more clean and consistent. After MEICA, global artefact should become more pronounced while local artefacts are removed. Result will be stored at `$sub_dir/$subject/qc` folder.
diff --git a/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/respiratory_pseudomotion_filtering.md b/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/respiratory_pseudomotion_filtering.md
new file mode 100644
index 0000000..84d1fbd
--- /dev/null
+++ b/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/respiratory_pseudomotion_filtering.md
@@ -0,0 +1,49 @@
+## Background
+* Head motion in the fMRI scanner corrupts fMRI data
+* To minimize the quality degradation due to head motion, motion censoring (removing high motion frames from fMRI data) is commonly used
+* In motion censoring, we typically compute the framewise motion estimates and use the motion estimates to identify high motion frames
+* However, respiration could inflate the motion estimates, thus resulting in unwanted censoring of good-quality frames
+* Our processing pipeline allows users to remove the respiratory pseudomotion from motion estimates (respiratory pseudomotion filtering)
+
+## What is respiratory pseudomotion (Power et.al. 2019)
+* Chest movement during respiration generate small perturbations of main magnetic field(B0) of scanner
+* This perturbation of B0 causes shift in reconstructed image in the phase encoding direction
+* This problem gets worse in multiband scanners for their higher sampling frequencies
+* This reconstruction shift is different from true motion, as in it doesn't cause imaging quality issues like true motion
+* Thus, we would like to filter out respiratory pseudomotion from motion estimates to save more data
+
+## Filtering of respiratory pseudomotion (multi-band)
+* For multi-band data, we just apply a bandstop filtering on the motion estimates (Fair et.al. 2020). For example, if we know the respiratory frequency lies between 0.31 to 0.43 Hz, we can set the stopband to be 0.31 to 0.43 Hz
+* The stopband should vary for different datasets because different population could have different respiration frequency. For example, children have higher respiration rates than adults
+* Ideally, the stopband should be calculated using respiration data. For example, Fair et.al. 2020 used respiration data of ABCD participants, plotted the histogram of the respiration frequency, and defined the stopband as between 2nd and 3rd quantiles of the respiration frequency histogram
+* Alternatively, the stopband could be inferred from the age of participants given that respiration rates varies with age. Fleming et.al. 2011 listed the respiration rates for children of different age groups in Supplementary Table 4
+
+## Filtering of respiratory pseudomotion (single-band)
+* Single-band data usually have lower sampling frequency (i.e., higher TR). As a result, the Nyquist frequency could be lower than respiration frequency and the respiration frequency motion aliases into other frequency bands
+* Gratton et.al. 2020 proposed to use a low-pass filter and remove motion frequency > 0.1 Hz (high frequency motion)
+
+## Implementation in CBIG preprocessing pipeline
+* In CBIG preprocessing pipeline, we have options to add respiratory pseudomotion filtering during the motion correction
+* To perform respiratory pseudomotion filtering, the users need to add flags -low_f in the CBIG_preproc_fslmcflirt_outliers.csh, the function will then perform bandstop/low-pass filtering, depending on if -high_f is used
+  - If -low_f is passed in but -high_f is empty, we use low pass filter and -low_f is the stop frequency;
+  - If both -low_f and -high_f are provided we use bandstop filter and the stopband is [low_f,high_f]
+  - If -low_f is not provided we don't perform respiratory pseudomotion filtering
+* Example for bandstop filtering: $CBIG_CODE_DIR/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/CBIG_preproc_fslmcflirt_outliers.csh 
+	-s ABCD_sub1 -d ~/storage/FMRI_preprocess -bld '002 003' -BOLD_stem _rest_skip4_stc -nframe 0 
+	-FD_th 0.2 -DVARS 50 -discard-run 50 -rm-seg 5 -low_f 0.31 -high_f 0.43
+* Example for lowpass filtering: $CBIG_CODE_DIR/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/CBIG_preproc_fslmcflirt_outliers.csh 
+	-s ABCD_sub1 -d ~/storage/FMRI_preprocess -bld '002 003' -BOLD_stem _rest_skip4_stc -nframe 0 
+	-FD_th 0.2 -DVARS 50 -discard-run 50 -rm-seg 5 -low_f 0.1
+	
+## References
+
+Fleming, S., Thompson, M., Stevens, R., Heneghan, C., Plüddemann, A., Maconochie, I., Tarassenko, L., and Mant, D., 2011. Normal ranges of heart rate and respiratory rate in children from birth to 18 years of age: a systematic review of observational studies. The Lancet, 377 (9770), 1011-1018.
+
+
+Power, J.D., Lynch, C.J., Silver, B.M., Dubin, M.J., Martin, A., and Jones, R.M., 2019. Distinctions among real and apparent respiratory motions in human fMRI data. NeuroImage, 201, 116041.
+
+
+Fair, D.A., Miranda-Dominguez, O., Snyder, A.Z., Perrone, A., Earl, E.A., Van, A.N., Koller, J.M., Feczko, E., Tisdall, M.D., van der Kouwe, A., Klein, R.L., Mirro, A.E., Hampton, J.M., Adeyemo, B., Laumann, T.O., Gratton, C., Greene, D.J., Schlaggar, B.L., Hagler, D.J., Jr, Watts, R., Garavan, H., Barch, D.M., Nigg, J.T., Petersen, S.E., Dale, A.M., Feldstein-Ewing, S.W., Nagel, B.J., and Dosenbach, N.U.F., 2020. Correction of respiratory artifacts in MRI head motion estimates. NeuroImage, 208, 116400.
+
+
+Gratton, C., Dworetsky, A., Coalson, R.S., Adeyemo, B., Laumann, T.O., Wig, G.S., Kong, T.S., Gratton, G., Fabiani, M., Barch, D.M., Tranel, D., Miranda-Dominguez, O., Fair, D.A., Dosenbach, N.U.F., Snyder, A.Z., Perlmutter, J.S., Petersen, S.E., and Campbell, M.C., 2020. Removal of high frequency contamination from motion estimates in single-band fMRI saves data without biasing functional connectivity. NeuroImage, 217, 116866.
diff --git a/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/spatial_distortion_correction_readme.md b/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/spatial_distortion_correction_readme.md
new file mode 100644
index 0000000..ec984d0
--- /dev/null
+++ b/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/spatial_distortion_correction_readme.md
@@ -0,0 +1,73 @@
+# Spatial Distortion Correction (SDC) README
+
+## Overview
+
+**Spatial distortion correction (SDC) is one of the preprocessing steps that aim to remove the distortion in EPI functional images caused by magnetic field inhomogeneities.** These magnetic field inhomogeneities are due to different magnetic susceptibilities of tissues within the head. The results of these magnetic field inhomogenieties include spatial distortions and signal loss, particularly in inferior frontal and temporal regions. SDC utilizes the information of **fieldmaps** to unwarp the distorted functional images. If you consider running SDC as one of the preprocessing steps, please note that SDC should be run after motion correction and before registration step (See `example_with_distortion_correction_config.txt`for an example configuration file).
+
+## Preparation
+
+In order to run SDC, please make sure that the following images and information are available:
+
+* EPI functional image
+* Fieldmaps (as described in the next section)
+* Echo time (TE) of the functional image (in ms)
+* Effective echo spacing (EES) of the fucntional image (in ms)
+* Motion correction transformation matrices
+
+TE and EES of the functional image can be typically found in the JSON file of the associated functional image if the dataset follows BIDS format.
+
+Motion correction transformation matrices should be available if motion correction step is run successfully. For our CBIG preprocessing pipeline, the transformation matrices file is named as `<subject_id>/bold/<run_number>/<bold_stem>_mc.cat`.
+
+## Fieldmaps
+
+There are two main types of fieldmaps, the fieldmaps are typically located under `/fmap` directoies if the dataset follows Brain Imaging Data Structure (BIDS) format. These two types of fieldmaps are as following:
+
+* Two magnitude images with different echo times and one phase-difference image (**mag+phasediff**).
+* Two images with opposite phase encoding directions (**oppo_PED**). Note that we only support 'j+' and 'j-' phase encoding directions for now.
+
+## How to run the SDC script?
+
+### mag+phasediff
+
+If the fieldmaps include 2 magnitude images and 1 phase difference image, besides the above-mentioned images and information (as described in Preparation section), you will also need the difference in echo time between 2 magnitude images (in ms). As for the magnitude image, you can choose either one as the input image. An example command is shown as the following:
+
+`./CBIG_preproc_spatial_distortion_correction -s sub-NDARAA536PTU -d ~/storage/fMRI_preprocess -bld '001' -BOLD_stem _rest -fpm "mag+phasediff" -m /data/HBN/rawData_release1_4/SI/sub-NDARAA536PTU/fmap/ sub-NDARAA536PTU_magnitude1.nii.gz -p /data/HBN/rawData_release_1_4/SI/sub-NDARAA536PTU/fmap/sub-NDARAA536PTU_phasediff.nii.gz -delta 4.76 -ees 0.55 -te 40`
+
+More specifically,
+
+* `-fpm` is for fieldmap processing method, the processing method here is "mag+phasediff"
+* `-m` is the path to one of the magnitude images
+* `-p` is the path to the phase difference image
+* `-delta` is the absolute difference in echo time between 2 magnitude images (in ms)
+* `-ees` is the effective echo spacing of the functional image (in ms)
+* `-te` is the echo time of the functional image (in ms)
+
+### oppo_PED
+
+If the fieldmaps are in opposite phase encoding directions,  besides the above-mentioned images and information (as described in Preparation section), you will also need the total readout time (TRT) of 2 fieldmaps (in seconds). 
+
+**[IMPORTANT]**: Please note that we only support 'j+' and 'j-' phase encoding directions for now. To find out what are the phase encoding directions of the fieldmaps, please check the orientation of the fieldmaps by running `mri_info <fielmap>`. For example, if the orientation is RAS, then it means Anterior (also Right and Superior) is the postive directions. Therefore, under RAS orientation, if a fieldmap has a phase encoding direction of PA, then it corresponds to 'j+' as the voxel coordinate increases from Posterior to Anterior. On the other hand, if a fieldmap has a phase encoding direction of AP, then it corresponds to 'j-' as the voxel coordinate decreases from Anterior to Posterior. Double check with the JSON files associated with the fieldmaps if the dataset follows BIDS format.
+
+An example command is shown as the following:
+
+`./CBIG_preproc_spatial_distortion_correction.csh -s sub-NDARWN691CG7 -d ~/storage/fMIR_preprocess -bld '001 002' -BOLD_stem _rest -fpm "oppo_PED" -j_minus /data/HBN/rawData_release1_4/RU/sub-NDARWN691CG7/fmap/sub-NDARWN691CG7_dir-AP_acq-fMRI_epi.nii.gz -j_plus /data/HBN/rawData_release1_4/RU/sub-NDARWN691CG7/fmap/sub-NDARWN691CG7_dir-PA_acq-fMRI_epi.nii.gz -j_minus_trt 0.04565 -j_plus_trt 0.04565 -ees .580013000 -te 30.00`
+
+More specifically,
+
+* `-fpm` is for fieldmap processing method, the processing method here is "oppo_PED"
+* `-j_minus` is the path to `j-` fieldmap
+* `-j_plus` is the path to `j+` fieldmap
+* `-j_minus_trt` is the total readout time of `j-` fieldmap (in seconds)
+* `-j_plus_trt` is the total readout time of `j+` fieldmap (in seconds)
+* `-ees` is the effective echo spacing of the functional image (in ms)
+* `-te` is the echo time of the functional image (in ms)
+
+Total readout time can be typically found in the JSON files of the associated fieldmaps if the dataset follows BIDS format.
+
+## Quality Control (QC)
+
+There are two ways to check if SDC has done its job. 
+
+The qulitative way is to visually compare the functional images before and after SDC. The result after distortion correction should be more similar to the structrual image, especially in frontal and temporal regoins. 
+
+The quantitative way, which is also the way we adopt for QC is to compare the BBR costs with and without SDC. By right, the BBR cost should be lower with SDC (See `quality_control_readme.md` for more details).
diff --git a/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/unit_tests/100subjects_clustering/CBIG_preproc_100subjects_clustering_unit_test.m b/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/unit_tests/100subjects_clustering/CBIG_preproc_100subjects_clustering_unit_test.m
new file mode 100755
index 0000000..35c6fe6
--- /dev/null
+++ b/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/unit_tests/100subjects_clustering/CBIG_preproc_100subjects_clustering_unit_test.m
@@ -0,0 +1,113 @@
+classdef CBIG_preproc_100subjects_clustering_unit_test < matlab.unittest.TestCase
+%
+% Target project:
+%                 CBIG_fMRI_Preproc2016
+%
+% Case design:
+%                 CBIG_fMRI_Preproc2016 already have unit tests, here we
+%                 call its "100subjects_clustering" unit test and automatically
+%                 make judgement on whether the unit test is passed or
+%                 failed
+%
+%                 For now, the stable projects' unit tests in our repo
+%                 require manual check of the output txt files or images,
+%                 making it incovenient for wrapper function to call them
+%                 and automatically draw conclusions. As a result, we write
+%                 some simple matlab test functions for these stable
+%                 projects' unit tests.
+%
+% Written by Yang Qing, Shaoshi Zhang and CBIG under MIT license: https://github.com/ThomasYeoLab/CBIG/blob/master/LICENSE.md
+
+    methods (Test)
+        function test_100_subjects_Case(testCase)
+            %% path setting
+            addpath(fullfile(getenv('CBIG_CODE_DIR'), 'stable_projects', ...
+            'preprocessing', 'CBIG_fMRI_Preproc2016', 'utilities')); 
+            addpath(fullfile(getenv('CBIG_CODE_DIR'), 'stable_projects', ...
+                'preprocessing', 'CBIG_fMRI_Preproc2016', 'unit_tests', '100subjects_clustering'))
+            UnitTestDir = fullfile(getenv('CBIG_CODE_DIR'), 'stable_projects',...
+                'preprocessing', 'CBIG_fMRI_Preproc2016', 'unit_tests');
+            OutputDir = fullfile(UnitTestDir, 'output', '100_subjects_Case'); 
+            load(fullfile(getenv('CBIG_CODE_DIR'), 'unit_tests', 'replace_unittest_flag'));
+            
+            %create output dir (IMPORTANT)
+            if(exist(OutputDir, 'dir'))
+                rmdir(OutputDir, 's')
+            end
+            mkdir(OutputDir);
+			%% generate fmrinii list
+			cmd = [fullfile(UnitTestDir, '100subjects_clustering', ...
+				'CBIG_preproc_unit_tests_generate_fmrinii_list.sh'), ' ', OutputDir];
+			system(cmd);
+            
+            %% call CBIG_fMRI_Preproc2016 100 subjects unit test script to preprocess subjects
+            cmd = [fullfile(UnitTestDir, '100subjects_clustering', ...
+                'CBIG_preproc_unit_tests_preprocess_100subjects.csh'), ' ', OutputDir];
+            system(cmd); % this will submit a bunch of jobs to HPC
+            
+            %% periodically check whether the job has finished or not             
+            cmdout = 1;
+            while(cmdout ~= 0)
+                cmd = 'ssh headnode "qstat | grep prep_100sub_ut | grep `whoami` | wc -l"';
+                [~, cmdout] = system(cmd);
+                % after job finishes, cmdout should be 0
+                cmdout = str2num(cmdout(1: end-1));
+                pause(60); % sleep for 1min and check again
+            end
+            
+            %% call CBIG_fMRI_Preproc2016 100 subjects unit test script to obtain clustering results
+            cmd = [fullfile(UnitTestDir, '100subjects_clustering', ...
+                'CBIG_preproc_unit_tests_general_cluster_GSP_80_low_motion+20_w_censor.csh'), ...
+                ' ', OutputDir, ' ', OutputDir];
+            system(cmd);
+            
+            %% periodically check whether the job has finished or not             
+            cmdout = 1;
+            while(cmdout ~= 0)
+                cmd = 'ssh headnode "qstat | grep clust_100sub_ut | grep `whoami` | wc -l"';
+                [~, cmdout] = system(cmd);
+                cmdout = str2num(cmdout(1: end-1));
+                pause(60);
+            end
+            
+            if(replace_unittest_flag)
+                disp('Replacing 100 subjects clustering unit test results...')
+                disp('Make sure that the refernece directory and its parent directory have write permission!')
+                preproc_ref_dir = fullfile(getenv('CBIG_TESTDATA_DIR'), 'stable_projects', 'preprocessing', ...
+                    'CBIG_fMRI_Preproc2016', '100subjects_clustering', 'preproc_out');
+                clustering_ref_dir = fullfile(getenv('CBIG_TESTDATA_DIR'), 'stable_projects' ,'preprocessing', ...
+                    'CBIG_fMRI_Preproc2016', '100subjects_clustering', 'clustering');
+                clustering_output_dir = fullfile(getenv('CBIG_CODE_DIR'), 'stable_projects', 'preprocessing', ...
+                    'CBIG_fMRI_Preproc2016/unit_tests', 'output', '100_subjects_Case', 'clustering');
+                % replace clustering results
+                movefile(clustering_output_dir, clustering_ref_dir);
+               
+                % load subject list and replace preprocessing results
+                fid = fopen(fullfile(getenv('CBIG_TESTDATA_DIR'), 'stable_projects', 'preprocessing', ...
+                    'CBIG_fMRI_Preproc2016', '100subjects_clustering', 'subject_list.txt'));
+                subject_list = textscan(fid, '%s');
+                subject_list = subject_list{1};
+                for i = 1:length(subject_list)
+                    subject_id = subject_list{i};
+                    preproc_out_dir = fullfile(getenv('CBIG_CODE_DIR'), 'stable_projects', 'preprocessing', ...
+                        'CBIG_fMRI_Preproc2016/unit_tests', 'output', '100_subjects_Case', subject_id);
+                    movefile(preproc_out_dir, fullfile(preproc_ref_dir, subject_id))                    
+                end
+            else
+                %% check clustering results
+                CBIG_preproc_unit_tests_cmp_clusters(fullfile(OutputDir, ...
+                    'clustering/GSP_80_low_mt_20_w_censor_clusters017_scrub.mat'), OutputDir);
+            end
+            
+            % remove intermediate output data (IMPORTANT)
+            rmdir(OutputDir, 's');
+            rmpath(fullfile(getenv('CBIG_CODE_DIR'), 'stable_projects', ...
+            'preprocessing', 'CBIG_fMRI_Preproc2016', 'utilities')); 
+            rmpath(fullfile(getenv('CBIG_CODE_DIR'), 'stable_projects', ...
+                'preprocessing', 'CBIG_fMRI_Preproc2016', 'unit_tests', '100subjects_clustering'))
+            
+        end
+        
+        
+    end
+end
diff --git a/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/unit_tests/100subjects_clustering/CBIG_preproc_unit_tests_cmp_clusters.m b/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/unit_tests/100subjects_clustering/CBIG_preproc_unit_tests_cmp_clusters.m
index 6bae103..367cd53 100644
--- a/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/unit_tests/100subjects_clustering/CBIG_preproc_unit_tests_cmp_clusters.m
+++ b/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/unit_tests/100subjects_clustering/CBIG_preproc_unit_tests_cmp_clusters.m
@@ -29,7 +29,7 @@ input_labels = load(input_file);
 
 dice_message = [sprintf('Dice overlap: \n'), num2str(dice_overlap)];
 cost_message = [sprintf('\nCost: \n'), num2str(cost)];
-assert((min(dice_overlap) > 0.95 && cost < -18000), ...
+assert((min(dice_overlap) > 0.99 && cost < -18000), ...
     [sprintf('ERROR: Clustering result was too different from ground truth. \n'), dice_message, cost_message])
 disp([sprintf('Clustering result was replicated. \n'), dice_message, cost_message])
 save(fullfile(cmp_dir, 'your_overlap_with_groundtruth.mat'), 'cost', 'dice_overlap')
diff --git a/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/unit_tests/100subjects_clustering/CBIG_preproc_unit_tests_general_cluster_GSP_80_low_motion+20_w_censor.csh b/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/unit_tests/100subjects_clustering/CBIG_preproc_unit_tests_general_cluster_GSP_80_low_motion+20_w_censor.csh
index 787bc79..6b63bd4 100755
--- a/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/unit_tests/100subjects_clustering/CBIG_preproc_unit_tests_general_cluster_GSP_80_low_motion+20_w_censor.csh
+++ b/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/unit_tests/100subjects_clustering/CBIG_preproc_unit_tests_general_cluster_GSP_80_low_motion+20_w_censor.csh
@@ -37,24 +37,23 @@ endif
 
 cd $work_dir
 
+set log_file = "${out_dir}/clust_100sub_ut.log"
 
 if( $scrub_flag == 1 ) then
-	set cmd = "cd ${curr_dir}; ${code_dir}/CBIG_Yeo2011_general_cluster_fcMRI_surf2surf_profiles.csh -sd"
+	set cmd = "${code_dir}/CBIG_Yeo2011_general_cluster_fcMRI_surf2surf_profiles.csh -sd"
 	set cmd = "$cmd ${your_subject_dir} -sub_ls ${subject_list} -surf_stem ${surf_stem} -n ${num_clusters} -out_dir"
 	set cmd = "$cmd ${out_dir} -cluster_out ${out_dir}/GSP_80_low_mt_20_w_censor_clusters${formated_cluster}_scrub"
 	set cmd = "$cmd -tries 1000 -outlier_stem ${outlier_stem}"
-	echo "$cmd" | $CBIG_SCHEDULER_DIR/qsub -V -q circ-spool -l walltime=20:00:00,mem=2GB \
-          -m ae -N clust_100sub_ut
-
 else
-	set cmd = "cd ${curr_dir}; ${code_dir}/CBIG_Yeo2011_general_cluster_fcMRI_surf2surf_profiles.csh -sd" 
+	set cmd = "${code_dir}/CBIG_Yeo2011_general_cluster_fcMRI_surf2surf_profiles.csh -sd" 
 	set cmd = "$cmd ${your_subject_dir} -sub_ls ${subject_list} -surf_stem ${surf_stem} -n ${num_clusters} -out_dir"
 	set cmd = "$cmd ${out_dir} -cluster_out \
           ${out_dir}/GSP_80_low_mt_20_w_censor_clusters${formated_cluster}_noscrub"
 	set cmd = "$cmd -tries 1000 "
-	echo "$cmd" | $CBIG_SCHEDULER_DIR/qsub -V -q circ-spool -l walltime=20:00:00,mem=2GB \
-          -m ae -N clust_100sub_ut
 endif
 
+set cmd = "$cmd | tee -a ${log_file}"
+$CBIG_CODE_DIR/setup/CBIG_pbsubmit -cmd "$cmd" -walltime 20:00:00 -mem 2G -name "clust_100sub_ut" 
+
 
 
diff --git a/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/unit_tests/100subjects_clustering/CBIG_preproc_unit_tests_generate_fmrinii_list.sh b/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/unit_tests/100subjects_clustering/CBIG_preproc_unit_tests_generate_fmrinii_list.sh
new file mode 100755
index 0000000..20d90ef
--- /dev/null
+++ b/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/unit_tests/100subjects_clustering/CBIG_preproc_unit_tests_generate_fmrinii_list.sh
@@ -0,0 +1,35 @@
+#!/bin/sh
+# Written by Jingwei Li, Shaoshi Zhang and CBIG under MIT license: https://github.com/ThomasYeoLab/CBIG/blob/master/LICENSE.md
+
+output_dir=$1
+fmrinii_dir=${output_dir}/fmrinii
+
+if [ ! -d $fmrinii_dir ]
+then
+	mkdir -p $fmrinii_dir
+else
+	rm -r $fmrinii_dir
+	mkdir $fmrinii_dir
+fi
+
+subject_list=${CBIG_CODE_DIR}/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/unit_tests
+subject_list=${subject_list}/100subjects_clustering/GSP_80_low_motion+20_w_censor.txt
+
+for subject in `cat ${subject_list}`
+do
+	if [ -e ${fmrinii_dir}/${subject}.fmrinii ]
+	then
+		rm ${fmrinii_dir}/${subject}.fmrinii
+	fi
+
+	cmd=${CBIG_TESTDATA_DIR}/stable_projects/preprocessing/CBIG_fMRI_Preproc2016
+	cmd=${cmd}/100subjects_clustering/preproc_out/${subject}/bold
+	cd ${cmd}
+
+	for i in 00?
+	do
+		echo "$i ${CBIG_TESTDATA_DIR}/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/100subjects_clustering/preproc_out/${subject}/bold/$i/${subject}_bld${i}_rest.nii.gz" >> ${fmrinii_dir}/${subject}.fmrinii
+	done
+done
+
+exit 0
diff --git a/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/unit_tests/100subjects_clustering/CBIG_preproc_unit_tests_preprocess_100subjects.csh b/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/unit_tests/100subjects_clustering/CBIG_preproc_unit_tests_preprocess_100subjects.csh
index 8884461..d30d4ce 100755
--- a/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/unit_tests/100subjects_clustering/CBIG_preproc_unit_tests_preprocess_100subjects.csh
+++ b/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/unit_tests/100subjects_clustering/CBIG_preproc_unit_tests_preprocess_100subjects.csh
@@ -2,8 +2,7 @@
 # Written by Jingwei Li and CBIG under MIT license: https://github.com/ThomasYeoLab/CBIG/blob/master/LICENSE.md
 
 set outdir = $1
-set fmrinii_dir = "$CBIG_CODE_DIR/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/unit_tests"
-set fmrinii_dir = "${fmrinii_dir}/100subjects_clustering/fmrinii"
+set fmrinii_dir = ${outdir}/fmrinii
 set anat_dir = "$CBIG_TESTDATA_DIR/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/100subjects_clustering"
 set anat_dir = "$anat_dir/recon_all"
 set config_file = "$CBIG_CODE_DIR/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/unit_tests"
@@ -24,14 +23,13 @@ endif
 
 cd $work_dir
 
-
 foreach curr_sub ("`cat $sub_list`")
 	echo "curr_sub = $curr_sub"
-	
-	set cmd = "CBIG_preproc_fMRI_preprocess.csh -s $curr_sub -output_d $outdir -anat_s ${curr_sub}_FS"
+	set log_file = "${outdir}/prep_100sub_ut_${curr_sub}.log"
+	set cmd = "${CBIG_CODE_DIR}/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/CBIG_preproc_fMRI_preprocess.csh"
+	set cmd = "$cmd -s $curr_sub -output_d $outdir -anat_s ${curr_sub}_FS"
 	set cmd = "$cmd -anat_d ${anat_dir} -fmrinii ${fmrinii_dir}/$curr_sub.fmrinii -config ${config_file}"
-	echo $cmd | $CBIG_SCHEDULER_DIR/qsub -V -q circ-spool -l walltime=3:00:00,mem=4GB \
-          -m ae -N prep_100sub_ut
+        set cmd = "$cmd | tee -a ${log_file}"
+        $CBIG_CODE_DIR/setup/CBIG_pbsubmit -cmd "$cmd" -walltime 3:00:00 -mem 4G -name "prep_100sub_ut" 
 	sleep 3s
-	
 end
diff --git a/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/unit_tests/100subjects_clustering/README.md b/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/unit_tests/100subjects_clustering/README.md
index 6755d40..4d126e1 100644
--- a/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/unit_tests/100subjects_clustering/README.md
+++ b/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/unit_tests/100subjects_clustering/README.md
@@ -43,14 +43,12 @@ $CBIG_CODE_DIR/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/unit_tests/10
 - fmrinii lists
 The preprocessing scripts requires an fmrinii list per subject to identify the location of the raw fMRI data.
 
-The fmrinii lists for the 100 subjects utilized in this unit test were stored in 
+The fmrinii lists for the 100 subjects are generated using the following script:
 
 ```
-$CBIG_CODE_DIR/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/unit_tests/100subjects_clustering/fmrinii
+$CBIG_CODE_DIR/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/unit_tests/100subjects_clustering/CBIG_preproc_unit_tests_generate_fmrinii_list.sh
 ```
 
-And they were generated by [this script](https://github.com/YeoPrivateLab/GSP_scripts/blob/init_release/2016_GSR_cen_FD0.2_DVARS50_bp_0.008_0.09/GSP_single_session/preprocessing/scripts/1_generate_fmrinii_list.sh). (Note: this link points to a private GitHub repository under YeoPrivateLab account. Only CBIG members have access to this repository.)
-
 ----
 
 ## Code
diff --git a/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/unit_tests/100subjects_clustering/fmrinii/Sub0033_Ses1.fmrinii b/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/unit_tests/100subjects_clustering/fmrinii/Sub0033_Ses1.fmrinii
deleted file mode 100755
index 5bb784c..0000000
--- a/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/unit_tests/100subjects_clustering/fmrinii/Sub0033_Ses1.fmrinii
+++ /dev/null
@@ -1,2 +0,0 @@
-002 /share/users/imganalysis/yeolab/data/GSP_release/Sub0033_Ses1/bold/002/Sub0033_Ses1_bld002_rest.nii.gz
-003 /share/users/imganalysis/yeolab/data/GSP_release/Sub0033_Ses1/bold/003/Sub0033_Ses1_bld003_rest.nii.gz
diff --git a/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/unit_tests/100subjects_clustering/fmrinii/Sub0085_Ses1.fmrinii b/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/unit_tests/100subjects_clustering/fmrinii/Sub0085_Ses1.fmrinii
deleted file mode 100755
index 0401d7f..0000000
--- a/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/unit_tests/100subjects_clustering/fmrinii/Sub0085_Ses1.fmrinii
+++ /dev/null
@@ -1,2 +0,0 @@
-002 /share/users/imganalysis/yeolab/data/GSP_release/Sub0085_Ses1/bold/002/Sub0085_Ses1_bld002_rest.nii.gz
-003 /share/users/imganalysis/yeolab/data/GSP_release/Sub0085_Ses1/bold/003/Sub0085_Ses1_bld003_rest.nii.gz
diff --git a/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/unit_tests/100subjects_clustering/fmrinii/Sub0102_Ses1.fmrinii b/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/unit_tests/100subjects_clustering/fmrinii/Sub0102_Ses1.fmrinii
deleted file mode 100755
index 6887699..0000000
--- a/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/unit_tests/100subjects_clustering/fmrinii/Sub0102_Ses1.fmrinii
+++ /dev/null
@@ -1,2 +0,0 @@
-002 /share/users/imganalysis/yeolab/data/GSP_release/Sub0102_Ses1/bold/002/Sub0102_Ses1_bld002_rest.nii.gz
-003 /share/users/imganalysis/yeolab/data/GSP_release/Sub0102_Ses1/bold/003/Sub0102_Ses1_bld003_rest.nii.gz
diff --git a/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/unit_tests/100subjects_clustering/fmrinii/Sub0128_Ses1.fmrinii b/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/unit_tests/100subjects_clustering/fmrinii/Sub0128_Ses1.fmrinii
deleted file mode 100755
index a27db23..0000000
--- a/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/unit_tests/100subjects_clustering/fmrinii/Sub0128_Ses1.fmrinii
+++ /dev/null
@@ -1,2 +0,0 @@
-002 /share/users/imganalysis/yeolab/data/GSP_release/Sub0128_Ses1/bold/002/Sub0128_Ses1_bld002_rest.nii.gz
-003 /share/users/imganalysis/yeolab/data/GSP_release/Sub0128_Ses1/bold/003/Sub0128_Ses1_bld003_rest.nii.gz
diff --git a/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/unit_tests/100subjects_clustering/fmrinii/Sub0134_Ses1.fmrinii b/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/unit_tests/100subjects_clustering/fmrinii/Sub0134_Ses1.fmrinii
deleted file mode 100755
index 9c7f97a..0000000
--- a/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/unit_tests/100subjects_clustering/fmrinii/Sub0134_Ses1.fmrinii
+++ /dev/null
@@ -1,2 +0,0 @@
-002 /share/users/imganalysis/yeolab/data/GSP_release/Sub0134_Ses1/bold/002/Sub0134_Ses1_bld002_rest.nii.gz
-003 /share/users/imganalysis/yeolab/data/GSP_release/Sub0134_Ses1/bold/003/Sub0134_Ses1_bld003_rest.nii.gz
diff --git a/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/unit_tests/100subjects_clustering/fmrinii/Sub0169_Ses1.fmrinii b/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/unit_tests/100subjects_clustering/fmrinii/Sub0169_Ses1.fmrinii
deleted file mode 100755
index 72d8c86..0000000
--- a/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/unit_tests/100subjects_clustering/fmrinii/Sub0169_Ses1.fmrinii
+++ /dev/null
@@ -1,2 +0,0 @@
-002 /share/users/imganalysis/yeolab/data/GSP_release/Sub0169_Ses1/bold/002/Sub0169_Ses1_bld002_rest.nii.gz
-003 /share/users/imganalysis/yeolab/data/GSP_release/Sub0169_Ses1/bold/003/Sub0169_Ses1_bld003_rest.nii.gz
diff --git a/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/unit_tests/100subjects_clustering/fmrinii/Sub0189_Ses1.fmrinii b/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/unit_tests/100subjects_clustering/fmrinii/Sub0189_Ses1.fmrinii
deleted file mode 100755
index 73f8183..0000000
--- a/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/unit_tests/100subjects_clustering/fmrinii/Sub0189_Ses1.fmrinii
+++ /dev/null
@@ -1 +0,0 @@
-002 /share/users/imganalysis/yeolab/data/GSP_release/Sub0189_Ses1/bold/002/Sub0189_Ses1_bld002_rest.nii.gz
diff --git a/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/unit_tests/100subjects_clustering/fmrinii/Sub0195_Ses1.fmrinii b/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/unit_tests/100subjects_clustering/fmrinii/Sub0195_Ses1.fmrinii
deleted file mode 100755
index 7398c96..0000000
--- a/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/unit_tests/100subjects_clustering/fmrinii/Sub0195_Ses1.fmrinii
+++ /dev/null
@@ -1,2 +0,0 @@
-002 /share/users/imganalysis/yeolab/data/GSP_release/Sub0195_Ses1/bold/002/Sub0195_Ses1_bld002_rest.nii.gz
-003 /share/users/imganalysis/yeolab/data/GSP_release/Sub0195_Ses1/bold/003/Sub0195_Ses1_bld003_rest.nii.gz
diff --git a/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/unit_tests/100subjects_clustering/fmrinii/Sub0241_Ses1.fmrinii b/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/unit_tests/100subjects_clustering/fmrinii/Sub0241_Ses1.fmrinii
deleted file mode 100755
index 366625a..0000000
--- a/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/unit_tests/100subjects_clustering/fmrinii/Sub0241_Ses1.fmrinii
+++ /dev/null
@@ -1 +0,0 @@
-002 /share/users/imganalysis/yeolab/data/GSP_release/Sub0241_Ses1/bold/002/Sub0241_Ses1_bld002_rest.nii.gz
diff --git a/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/unit_tests/100subjects_clustering/fmrinii/Sub0247_Ses1.fmrinii b/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/unit_tests/100subjects_clustering/fmrinii/Sub0247_Ses1.fmrinii
deleted file mode 100755
index d17a860..0000000
--- a/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/unit_tests/100subjects_clustering/fmrinii/Sub0247_Ses1.fmrinii
+++ /dev/null
@@ -1,2 +0,0 @@
-002 /share/users/imganalysis/yeolab/data/GSP_release/Sub0247_Ses1/bold/002/Sub0247_Ses1_bld002_rest.nii.gz
-003 /share/users/imganalysis/yeolab/data/GSP_release/Sub0247_Ses1/bold/003/Sub0247_Ses1_bld003_rest.nii.gz
diff --git a/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/unit_tests/100subjects_clustering/fmrinii/Sub0266_Ses1.fmrinii b/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/unit_tests/100subjects_clustering/fmrinii/Sub0266_Ses1.fmrinii
deleted file mode 100755
index 5382f43..0000000
--- a/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/unit_tests/100subjects_clustering/fmrinii/Sub0266_Ses1.fmrinii
+++ /dev/null
@@ -1,2 +0,0 @@
-002 /share/users/imganalysis/yeolab/data/GSP_release/Sub0266_Ses1/bold/002/Sub0266_Ses1_bld002_rest.nii.gz
-003 /share/users/imganalysis/yeolab/data/GSP_release/Sub0266_Ses1/bold/003/Sub0266_Ses1_bld003_rest.nii.gz
diff --git a/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/unit_tests/100subjects_clustering/fmrinii/Sub0279_Ses1.fmrinii b/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/unit_tests/100subjects_clustering/fmrinii/Sub0279_Ses1.fmrinii
deleted file mode 100755
index 500ff29..0000000
--- a/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/unit_tests/100subjects_clustering/fmrinii/Sub0279_Ses1.fmrinii
+++ /dev/null
@@ -1,2 +0,0 @@
-002 /share/users/imganalysis/yeolab/data/GSP_release/Sub0279_Ses1/bold/002/Sub0279_Ses1_bld002_rest.nii.gz
-003 /share/users/imganalysis/yeolab/data/GSP_release/Sub0279_Ses1/bold/003/Sub0279_Ses1_bld003_rest.nii.gz
diff --git a/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/unit_tests/100subjects_clustering/fmrinii/Sub0287_Ses1.fmrinii b/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/unit_tests/100subjects_clustering/fmrinii/Sub0287_Ses1.fmrinii
deleted file mode 100755
index 092c784..0000000
--- a/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/unit_tests/100subjects_clustering/fmrinii/Sub0287_Ses1.fmrinii
+++ /dev/null
@@ -1,2 +0,0 @@
-002 /share/users/imganalysis/yeolab/data/GSP_release/Sub0287_Ses1/bold/002/Sub0287_Ses1_bld002_rest.nii.gz
-003 /share/users/imganalysis/yeolab/data/GSP_release/Sub0287_Ses1/bold/003/Sub0287_Ses1_bld003_rest.nii.gz
diff --git a/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/unit_tests/100subjects_clustering/fmrinii/Sub0291_Ses1.fmrinii b/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/unit_tests/100subjects_clustering/fmrinii/Sub0291_Ses1.fmrinii
deleted file mode 100755
index 460c591..0000000
--- a/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/unit_tests/100subjects_clustering/fmrinii/Sub0291_Ses1.fmrinii
+++ /dev/null
@@ -1,2 +0,0 @@
-002 /share/users/imganalysis/yeolab/data/GSP_release/Sub0291_Ses1/bold/002/Sub0291_Ses1_bld002_rest.nii.gz
-003 /share/users/imganalysis/yeolab/data/GSP_release/Sub0291_Ses1/bold/003/Sub0291_Ses1_bld003_rest.nii.gz
diff --git a/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/unit_tests/100subjects_clustering/fmrinii/Sub0295_Ses1.fmrinii b/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/unit_tests/100subjects_clustering/fmrinii/Sub0295_Ses1.fmrinii
deleted file mode 100755
index a44d38f..0000000
--- a/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/unit_tests/100subjects_clustering/fmrinii/Sub0295_Ses1.fmrinii
+++ /dev/null
@@ -1 +0,0 @@
-002 /share/users/imganalysis/yeolab/data/GSP_release/Sub0295_Ses1/bold/002/Sub0295_Ses1_bld002_rest.nii.gz
diff --git a/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/unit_tests/100subjects_clustering/fmrinii/Sub0300_Ses1.fmrinii b/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/unit_tests/100subjects_clustering/fmrinii/Sub0300_Ses1.fmrinii
deleted file mode 100755
index 344e245..0000000
--- a/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/unit_tests/100subjects_clustering/fmrinii/Sub0300_Ses1.fmrinii
+++ /dev/null
@@ -1 +0,0 @@
-002 /share/users/imganalysis/yeolab/data/GSP_release/Sub0300_Ses1/bold/002/Sub0300_Ses1_bld002_rest.nii.gz
diff --git a/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/unit_tests/100subjects_clustering/fmrinii/Sub0363_Ses1.fmrinii b/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/unit_tests/100subjects_clustering/fmrinii/Sub0363_Ses1.fmrinii
deleted file mode 100755
index 7c0c5b1..0000000
--- a/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/unit_tests/100subjects_clustering/fmrinii/Sub0363_Ses1.fmrinii
+++ /dev/null
@@ -1,2 +0,0 @@
-002 /share/users/imganalysis/yeolab/data/GSP_release/Sub0363_Ses1/bold/002/Sub0363_Ses1_bld002_rest.nii.gz
-003 /share/users/imganalysis/yeolab/data/GSP_release/Sub0363_Ses1/bold/003/Sub0363_Ses1_bld003_rest.nii.gz
diff --git a/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/unit_tests/100subjects_clustering/fmrinii/Sub0377_Ses1.fmrinii b/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/unit_tests/100subjects_clustering/fmrinii/Sub0377_Ses1.fmrinii
deleted file mode 100755
index e6dd36d..0000000
--- a/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/unit_tests/100subjects_clustering/fmrinii/Sub0377_Ses1.fmrinii
+++ /dev/null
@@ -1,2 +0,0 @@
-002 /share/users/imganalysis/yeolab/data/GSP_release/Sub0377_Ses1/bold/002/Sub0377_Ses1_bld002_rest.nii.gz
-003 /share/users/imganalysis/yeolab/data/GSP_release/Sub0377_Ses1/bold/003/Sub0377_Ses1_bld003_rest.nii.gz
diff --git a/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/unit_tests/100subjects_clustering/fmrinii/Sub0378_Ses1.fmrinii b/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/unit_tests/100subjects_clustering/fmrinii/Sub0378_Ses1.fmrinii
deleted file mode 100755
index 487ae99..0000000
--- a/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/unit_tests/100subjects_clustering/fmrinii/Sub0378_Ses1.fmrinii
+++ /dev/null
@@ -1,2 +0,0 @@
-002 /share/users/imganalysis/yeolab/data/GSP_release/Sub0378_Ses1/bold/002/Sub0378_Ses1_bld002_rest.nii.gz
-003 /share/users/imganalysis/yeolab/data/GSP_release/Sub0378_Ses1/bold/003/Sub0378_Ses1_bld003_rest.nii.gz
diff --git a/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/unit_tests/100subjects_clustering/fmrinii/Sub0393_Ses1.fmrinii b/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/unit_tests/100subjects_clustering/fmrinii/Sub0393_Ses1.fmrinii
deleted file mode 100755
index 0a83124..0000000
--- a/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/unit_tests/100subjects_clustering/fmrinii/Sub0393_Ses1.fmrinii
+++ /dev/null
@@ -1,2 +0,0 @@
-002 /share/users/imganalysis/yeolab/data/GSP_release/Sub0393_Ses1/bold/002/Sub0393_Ses1_bld002_rest.nii.gz
-003 /share/users/imganalysis/yeolab/data/GSP_release/Sub0393_Ses1/bold/003/Sub0393_Ses1_bld003_rest.nii.gz
diff --git a/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/unit_tests/100subjects_clustering/fmrinii/Sub0414_Ses1.fmrinii b/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/unit_tests/100subjects_clustering/fmrinii/Sub0414_Ses1.fmrinii
deleted file mode 100755
index d55c91c..0000000
--- a/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/unit_tests/100subjects_clustering/fmrinii/Sub0414_Ses1.fmrinii
+++ /dev/null
@@ -1 +0,0 @@
-002 /share/users/imganalysis/yeolab/data/GSP_release/Sub0414_Ses1/bold/002/Sub0414_Ses1_bld002_rest.nii.gz
diff --git a/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/unit_tests/100subjects_clustering/fmrinii/Sub0416_Ses1.fmrinii b/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/unit_tests/100subjects_clustering/fmrinii/Sub0416_Ses1.fmrinii
deleted file mode 100755
index 078bc5d..0000000
--- a/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/unit_tests/100subjects_clustering/fmrinii/Sub0416_Ses1.fmrinii
+++ /dev/null
@@ -1,2 +0,0 @@
-002 /share/users/imganalysis/yeolab/data/GSP_release/Sub0416_Ses1/bold/002/Sub0416_Ses1_bld002_rest.nii.gz
-003 /share/users/imganalysis/yeolab/data/GSP_release/Sub0416_Ses1/bold/003/Sub0416_Ses1_bld003_rest.nii.gz
diff --git a/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/unit_tests/100subjects_clustering/fmrinii/Sub0424_Ses1.fmrinii b/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/unit_tests/100subjects_clustering/fmrinii/Sub0424_Ses1.fmrinii
deleted file mode 100755
index 7d6566d..0000000
--- a/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/unit_tests/100subjects_clustering/fmrinii/Sub0424_Ses1.fmrinii
+++ /dev/null
@@ -1,2 +0,0 @@
-002 /share/users/imganalysis/yeolab/data/GSP_release/Sub0424_Ses1/bold/002/Sub0424_Ses1_bld002_rest.nii.gz
-003 /share/users/imganalysis/yeolab/data/GSP_release/Sub0424_Ses1/bold/003/Sub0424_Ses1_bld003_rest.nii.gz
diff --git a/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/unit_tests/100subjects_clustering/fmrinii/Sub0426_Ses1.fmrinii b/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/unit_tests/100subjects_clustering/fmrinii/Sub0426_Ses1.fmrinii
deleted file mode 100755
index 7f99181..0000000
--- a/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/unit_tests/100subjects_clustering/fmrinii/Sub0426_Ses1.fmrinii
+++ /dev/null
@@ -1,2 +0,0 @@
-002 /share/users/imganalysis/yeolab/data/GSP_release/Sub0426_Ses1/bold/002/Sub0426_Ses1_bld002_rest.nii.gz
-003 /share/users/imganalysis/yeolab/data/GSP_release/Sub0426_Ses1/bold/003/Sub0426_Ses1_bld003_rest.nii.gz
diff --git a/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/unit_tests/100subjects_clustering/fmrinii/Sub0431_Ses1.fmrinii b/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/unit_tests/100subjects_clustering/fmrinii/Sub0431_Ses1.fmrinii
deleted file mode 100755
index e92c779..0000000
--- a/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/unit_tests/100subjects_clustering/fmrinii/Sub0431_Ses1.fmrinii
+++ /dev/null
@@ -1,2 +0,0 @@
-002 /share/users/imganalysis/yeolab/data/GSP_release/Sub0431_Ses1/bold/002/Sub0431_Ses1_bld002_rest.nii.gz
-003 /share/users/imganalysis/yeolab/data/GSP_release/Sub0431_Ses1/bold/003/Sub0431_Ses1_bld003_rest.nii.gz
diff --git a/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/unit_tests/100subjects_clustering/fmrinii/Sub0432_Ses1.fmrinii b/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/unit_tests/100subjects_clustering/fmrinii/Sub0432_Ses1.fmrinii
deleted file mode 100755
index 954384e..0000000
--- a/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/unit_tests/100subjects_clustering/fmrinii/Sub0432_Ses1.fmrinii
+++ /dev/null
@@ -1,2 +0,0 @@
-002 /share/users/imganalysis/yeolab/data/GSP_release/Sub0432_Ses1/bold/002/Sub0432_Ses1_bld002_rest.nii.gz
-003 /share/users/imganalysis/yeolab/data/GSP_release/Sub0432_Ses1/bold/003/Sub0432_Ses1_bld003_rest.nii.gz
diff --git a/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/unit_tests/100subjects_clustering/fmrinii/Sub0449_Ses1.fmrinii b/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/unit_tests/100subjects_clustering/fmrinii/Sub0449_Ses1.fmrinii
deleted file mode 100755
index 164805b..0000000
--- a/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/unit_tests/100subjects_clustering/fmrinii/Sub0449_Ses1.fmrinii
+++ /dev/null
@@ -1 +0,0 @@
-002 /share/users/imganalysis/yeolab/data/GSP_release/Sub0449_Ses1/bold/002/Sub0449_Ses1_bld002_rest.nii.gz
diff --git a/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/unit_tests/100subjects_clustering/fmrinii/Sub0465_Ses1.fmrinii b/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/unit_tests/100subjects_clustering/fmrinii/Sub0465_Ses1.fmrinii
deleted file mode 100755
index edcbfa2..0000000
--- a/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/unit_tests/100subjects_clustering/fmrinii/Sub0465_Ses1.fmrinii
+++ /dev/null
@@ -1,2 +0,0 @@
-002 /share/users/imganalysis/yeolab/data/GSP_release/Sub0465_Ses1/bold/002/Sub0465_Ses1_bld002_rest.nii.gz
-003 /share/users/imganalysis/yeolab/data/GSP_release/Sub0465_Ses1/bold/003/Sub0465_Ses1_bld003_rest.nii.gz
diff --git a/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/unit_tests/100subjects_clustering/fmrinii/Sub0466_Ses1.fmrinii b/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/unit_tests/100subjects_clustering/fmrinii/Sub0466_Ses1.fmrinii
deleted file mode 100755
index e19440b..0000000
--- a/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/unit_tests/100subjects_clustering/fmrinii/Sub0466_Ses1.fmrinii
+++ /dev/null
@@ -1,2 +0,0 @@
-002 /share/users/imganalysis/yeolab/data/GSP_release/Sub0466_Ses1/bold/002/Sub0466_Ses1_bld002_rest.nii.gz
-003 /share/users/imganalysis/yeolab/data/GSP_release/Sub0466_Ses1/bold/003/Sub0466_Ses1_bld003_rest.nii.gz
diff --git a/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/unit_tests/100subjects_clustering/fmrinii/Sub0534_Ses1.fmrinii b/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/unit_tests/100subjects_clustering/fmrinii/Sub0534_Ses1.fmrinii
deleted file mode 100755
index 044f064..0000000
--- a/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/unit_tests/100subjects_clustering/fmrinii/Sub0534_Ses1.fmrinii
+++ /dev/null
@@ -1 +0,0 @@
-002 /share/users/imganalysis/yeolab/data/GSP_release/Sub0534_Ses1/bold/002/Sub0534_Ses1_bld002_rest.nii.gz
diff --git a/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/unit_tests/100subjects_clustering/fmrinii/Sub0550_Ses1.fmrinii b/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/unit_tests/100subjects_clustering/fmrinii/Sub0550_Ses1.fmrinii
deleted file mode 100755
index a0d7aae..0000000
--- a/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/unit_tests/100subjects_clustering/fmrinii/Sub0550_Ses1.fmrinii
+++ /dev/null
@@ -1,2 +0,0 @@
-002 /share/users/imganalysis/yeolab/data/GSP_release/Sub0550_Ses1/bold/002/Sub0550_Ses1_bld002_rest.nii.gz
-003 /share/users/imganalysis/yeolab/data/GSP_release/Sub0550_Ses1/bold/003/Sub0550_Ses1_bld003_rest.nii.gz
diff --git a/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/unit_tests/100subjects_clustering/fmrinii/Sub0569_Ses1.fmrinii b/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/unit_tests/100subjects_clustering/fmrinii/Sub0569_Ses1.fmrinii
deleted file mode 100755
index 618f38a..0000000
--- a/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/unit_tests/100subjects_clustering/fmrinii/Sub0569_Ses1.fmrinii
+++ /dev/null
@@ -1 +0,0 @@
-002 /share/users/imganalysis/yeolab/data/GSP_release/Sub0569_Ses1/bold/002/Sub0569_Ses1_bld002_rest.nii.gz
diff --git a/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/unit_tests/100subjects_clustering/fmrinii/Sub0570_Ses1.fmrinii b/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/unit_tests/100subjects_clustering/fmrinii/Sub0570_Ses1.fmrinii
deleted file mode 100755
index 23ec52a..0000000
--- a/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/unit_tests/100subjects_clustering/fmrinii/Sub0570_Ses1.fmrinii
+++ /dev/null
@@ -1,2 +0,0 @@
-002 /share/users/imganalysis/yeolab/data/GSP_release/Sub0570_Ses1/bold/002/Sub0570_Ses1_bld002_rest.nii.gz
-003 /share/users/imganalysis/yeolab/data/GSP_release/Sub0570_Ses1/bold/003/Sub0570_Ses1_bld003_rest.nii.gz
diff --git a/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/unit_tests/100subjects_clustering/fmrinii/Sub0586_Ses1.fmrinii b/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/unit_tests/100subjects_clustering/fmrinii/Sub0586_Ses1.fmrinii
deleted file mode 100755
index 49ab400..0000000
--- a/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/unit_tests/100subjects_clustering/fmrinii/Sub0586_Ses1.fmrinii
+++ /dev/null
@@ -1,2 +0,0 @@
-002 /share/users/imganalysis/yeolab/data/GSP_release/Sub0586_Ses1/bold/002/Sub0586_Ses1_bld002_rest.nii.gz
-003 /share/users/imganalysis/yeolab/data/GSP_release/Sub0586_Ses1/bold/003/Sub0586_Ses1_bld003_rest.nii.gz
diff --git a/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/unit_tests/100subjects_clustering/fmrinii/Sub0587_Ses1.fmrinii b/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/unit_tests/100subjects_clustering/fmrinii/Sub0587_Ses1.fmrinii
deleted file mode 100755
index b597399..0000000
--- a/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/unit_tests/100subjects_clustering/fmrinii/Sub0587_Ses1.fmrinii
+++ /dev/null
@@ -1 +0,0 @@
-002 /share/users/imganalysis/yeolab/data/GSP_release/Sub0587_Ses1/bold/002/Sub0587_Ses1_bld002_rest.nii.gz
diff --git a/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/unit_tests/100subjects_clustering/fmrinii/Sub0594_Ses1.fmrinii b/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/unit_tests/100subjects_clustering/fmrinii/Sub0594_Ses1.fmrinii
deleted file mode 100755
index b8ceae4..0000000
--- a/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/unit_tests/100subjects_clustering/fmrinii/Sub0594_Ses1.fmrinii
+++ /dev/null
@@ -1,2 +0,0 @@
-002 /share/users/imganalysis/yeolab/data/GSP_release/Sub0594_Ses1/bold/002/Sub0594_Ses1_bld002_rest.nii.gz
-003 /share/users/imganalysis/yeolab/data/GSP_release/Sub0594_Ses1/bold/003/Sub0594_Ses1_bld003_rest.nii.gz
diff --git a/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/unit_tests/100subjects_clustering/fmrinii/Sub0595_Ses1.fmrinii b/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/unit_tests/100subjects_clustering/fmrinii/Sub0595_Ses1.fmrinii
deleted file mode 100755
index aa2b17c..0000000
--- a/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/unit_tests/100subjects_clustering/fmrinii/Sub0595_Ses1.fmrinii
+++ /dev/null
@@ -1,2 +0,0 @@
-002 /share/users/imganalysis/yeolab/data/GSP_release/Sub0595_Ses1/bold/002/Sub0595_Ses1_bld002_rest.nii.gz
-003 /share/users/imganalysis/yeolab/data/GSP_release/Sub0595_Ses1/bold/003/Sub0595_Ses1_bld003_rest.nii.gz
diff --git a/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/unit_tests/100subjects_clustering/fmrinii/Sub0607_Ses1.fmrinii b/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/unit_tests/100subjects_clustering/fmrinii/Sub0607_Ses1.fmrinii
deleted file mode 100755
index e207f9c..0000000
--- a/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/unit_tests/100subjects_clustering/fmrinii/Sub0607_Ses1.fmrinii
+++ /dev/null
@@ -1,2 +0,0 @@
-002 /share/users/imganalysis/yeolab/data/GSP_release/Sub0607_Ses1/bold/002/Sub0607_Ses1_bld002_rest.nii.gz
-003 /share/users/imganalysis/yeolab/data/GSP_release/Sub0607_Ses1/bold/003/Sub0607_Ses1_bld003_rest.nii.gz
diff --git a/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/unit_tests/100subjects_clustering/fmrinii/Sub0618_Ses1.fmrinii b/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/unit_tests/100subjects_clustering/fmrinii/Sub0618_Ses1.fmrinii
deleted file mode 100755
index a320c46..0000000
--- a/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/unit_tests/100subjects_clustering/fmrinii/Sub0618_Ses1.fmrinii
+++ /dev/null
@@ -1 +0,0 @@
-002 /share/users/imganalysis/yeolab/data/GSP_release/Sub0618_Ses1/bold/002/Sub0618_Ses1_bld002_rest.nii.gz
diff --git a/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/unit_tests/100subjects_clustering/fmrinii/Sub0636_Ses1.fmrinii b/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/unit_tests/100subjects_clustering/fmrinii/Sub0636_Ses1.fmrinii
deleted file mode 100755
index 20d4b59..0000000
--- a/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/unit_tests/100subjects_clustering/fmrinii/Sub0636_Ses1.fmrinii
+++ /dev/null
@@ -1,2 +0,0 @@
-002 /share/users/imganalysis/yeolab/data/GSP_release/Sub0636_Ses1/bold/002/Sub0636_Ses1_bld002_rest.nii.gz
-003 /share/users/imganalysis/yeolab/data/GSP_release/Sub0636_Ses1/bold/003/Sub0636_Ses1_bld003_rest.nii.gz
diff --git a/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/unit_tests/100subjects_clustering/fmrinii/Sub0652_Ses1.fmrinii b/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/unit_tests/100subjects_clustering/fmrinii/Sub0652_Ses1.fmrinii
deleted file mode 100755
index 4f4eeb9..0000000
--- a/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/unit_tests/100subjects_clustering/fmrinii/Sub0652_Ses1.fmrinii
+++ /dev/null
@@ -1,2 +0,0 @@
-002 /share/users/imganalysis/yeolab/data/GSP_release/Sub0652_Ses1/bold/002/Sub0652_Ses1_bld002_rest.nii.gz
-003 /share/users/imganalysis/yeolab/data/GSP_release/Sub0652_Ses1/bold/003/Sub0652_Ses1_bld003_rest.nii.gz
diff --git a/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/unit_tests/100subjects_clustering/fmrinii/Sub0655_Ses1.fmrinii b/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/unit_tests/100subjects_clustering/fmrinii/Sub0655_Ses1.fmrinii
deleted file mode 100755
index 39b1a0a..0000000
--- a/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/unit_tests/100subjects_clustering/fmrinii/Sub0655_Ses1.fmrinii
+++ /dev/null
@@ -1,2 +0,0 @@
-002 /share/users/imganalysis/yeolab/data/GSP_release/Sub0655_Ses1/bold/002/Sub0655_Ses1_bld002_rest.nii.gz
-003 /share/users/imganalysis/yeolab/data/GSP_release/Sub0655_Ses1/bold/003/Sub0655_Ses1_bld003_rest.nii.gz
diff --git a/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/unit_tests/100subjects_clustering/fmrinii/Sub0666_Ses1.fmrinii b/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/unit_tests/100subjects_clustering/fmrinii/Sub0666_Ses1.fmrinii
deleted file mode 100755
index 1493364..0000000
--- a/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/unit_tests/100subjects_clustering/fmrinii/Sub0666_Ses1.fmrinii
+++ /dev/null
@@ -1 +0,0 @@
-002 /share/users/imganalysis/yeolab/data/GSP_release/Sub0666_Ses1/bold/002/Sub0666_Ses1_bld002_rest.nii.gz
diff --git a/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/unit_tests/100subjects_clustering/fmrinii/Sub0690_Ses1.fmrinii b/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/unit_tests/100subjects_clustering/fmrinii/Sub0690_Ses1.fmrinii
deleted file mode 100755
index d42a53f..0000000
--- a/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/unit_tests/100subjects_clustering/fmrinii/Sub0690_Ses1.fmrinii
+++ /dev/null
@@ -1,2 +0,0 @@
-002 /share/users/imganalysis/yeolab/data/GSP_release/Sub0690_Ses1/bold/002/Sub0690_Ses1_bld002_rest.nii.gz
-003 /share/users/imganalysis/yeolab/data/GSP_release/Sub0690_Ses1/bold/003/Sub0690_Ses1_bld003_rest.nii.gz
diff --git a/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/unit_tests/100subjects_clustering/fmrinii/Sub0692_Ses1.fmrinii b/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/unit_tests/100subjects_clustering/fmrinii/Sub0692_Ses1.fmrinii
deleted file mode 100755
index 8e745bd..0000000
--- a/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/unit_tests/100subjects_clustering/fmrinii/Sub0692_Ses1.fmrinii
+++ /dev/null
@@ -1,2 +0,0 @@
-002 /share/users/imganalysis/yeolab/data/GSP_release/Sub0692_Ses1/bold/002/Sub0692_Ses1_bld002_rest.nii.gz
-003 /share/users/imganalysis/yeolab/data/GSP_release/Sub0692_Ses1/bold/003/Sub0692_Ses1_bld003_rest.nii.gz
diff --git a/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/unit_tests/100subjects_clustering/fmrinii/Sub0694_Ses1.fmrinii b/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/unit_tests/100subjects_clustering/fmrinii/Sub0694_Ses1.fmrinii
deleted file mode 100755
index 5de269c..0000000
--- a/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/unit_tests/100subjects_clustering/fmrinii/Sub0694_Ses1.fmrinii
+++ /dev/null
@@ -1,2 +0,0 @@
-002 /share/users/imganalysis/yeolab/data/GSP_release/Sub0694_Ses1/bold/002/Sub0694_Ses1_bld002_rest.nii.gz
-003 /share/users/imganalysis/yeolab/data/GSP_release/Sub0694_Ses1/bold/003/Sub0694_Ses1_bld003_rest.nii.gz
diff --git a/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/unit_tests/100subjects_clustering/fmrinii/Sub0697_Ses1.fmrinii b/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/unit_tests/100subjects_clustering/fmrinii/Sub0697_Ses1.fmrinii
deleted file mode 100755
index c63c027..0000000
--- a/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/unit_tests/100subjects_clustering/fmrinii/Sub0697_Ses1.fmrinii
+++ /dev/null
@@ -1 +0,0 @@
-002 /share/users/imganalysis/yeolab/data/GSP_release/Sub0697_Ses1/bold/002/Sub0697_Ses1_bld002_rest.nii.gz
diff --git a/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/unit_tests/100subjects_clustering/fmrinii/Sub0705_Ses1.fmrinii b/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/unit_tests/100subjects_clustering/fmrinii/Sub0705_Ses1.fmrinii
deleted file mode 100755
index 4bb336b..0000000
--- a/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/unit_tests/100subjects_clustering/fmrinii/Sub0705_Ses1.fmrinii
+++ /dev/null
@@ -1,2 +0,0 @@
-002 /share/users/imganalysis/yeolab/data/GSP_release/Sub0705_Ses1/bold/002/Sub0705_Ses1_bld002_rest.nii.gz
-003 /share/users/imganalysis/yeolab/data/GSP_release/Sub0705_Ses1/bold/003/Sub0705_Ses1_bld003_rest.nii.gz
diff --git a/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/unit_tests/100subjects_clustering/fmrinii/Sub0718_Ses1.fmrinii b/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/unit_tests/100subjects_clustering/fmrinii/Sub0718_Ses1.fmrinii
deleted file mode 100755
index 92c2749..0000000
--- a/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/unit_tests/100subjects_clustering/fmrinii/Sub0718_Ses1.fmrinii
+++ /dev/null
@@ -1,2 +0,0 @@
-002 /share/users/imganalysis/yeolab/data/GSP_release/Sub0718_Ses1/bold/002/Sub0718_Ses1_bld002_rest.nii.gz
-003 /share/users/imganalysis/yeolab/data/GSP_release/Sub0718_Ses1/bold/003/Sub0718_Ses1_bld003_rest.nii.gz
diff --git a/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/unit_tests/100subjects_clustering/fmrinii/Sub0728_Ses1.fmrinii b/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/unit_tests/100subjects_clustering/fmrinii/Sub0728_Ses1.fmrinii
deleted file mode 100755
index 5408fe0..0000000
--- a/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/unit_tests/100subjects_clustering/fmrinii/Sub0728_Ses1.fmrinii
+++ /dev/null
@@ -1,2 +0,0 @@
-002 /share/users/imganalysis/yeolab/data/GSP_release/Sub0728_Ses1/bold/002/Sub0728_Ses1_bld002_rest.nii.gz
-003 /share/users/imganalysis/yeolab/data/GSP_release/Sub0728_Ses1/bold/003/Sub0728_Ses1_bld003_rest.nii.gz
diff --git a/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/unit_tests/100subjects_clustering/fmrinii/Sub0759_Ses1.fmrinii b/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/unit_tests/100subjects_clustering/fmrinii/Sub0759_Ses1.fmrinii
deleted file mode 100755
index 1987cff..0000000
--- a/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/unit_tests/100subjects_clustering/fmrinii/Sub0759_Ses1.fmrinii
+++ /dev/null
@@ -1 +0,0 @@
-002 /share/users/imganalysis/yeolab/data/GSP_release/Sub0759_Ses1/bold/002/Sub0759_Ses1_bld002_rest.nii.gz
diff --git a/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/unit_tests/100subjects_clustering/fmrinii/Sub0793_Ses1.fmrinii b/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/unit_tests/100subjects_clustering/fmrinii/Sub0793_Ses1.fmrinii
deleted file mode 100755
index 42fa2e7..0000000
--- a/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/unit_tests/100subjects_clustering/fmrinii/Sub0793_Ses1.fmrinii
+++ /dev/null
@@ -1 +0,0 @@
-002 /share/users/imganalysis/yeolab/data/GSP_release/Sub0793_Ses1/bold/002/Sub0793_Ses1_bld002_rest.nii.gz
diff --git a/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/unit_tests/100subjects_clustering/fmrinii/Sub0809_Ses1.fmrinii b/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/unit_tests/100subjects_clustering/fmrinii/Sub0809_Ses1.fmrinii
deleted file mode 100755
index 3f104d1..0000000
--- a/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/unit_tests/100subjects_clustering/fmrinii/Sub0809_Ses1.fmrinii
+++ /dev/null
@@ -1,2 +0,0 @@
-002 /share/users/imganalysis/yeolab/data/GSP_release/Sub0809_Ses1/bold/002/Sub0809_Ses1_bld002_rest.nii.gz
-003 /share/users/imganalysis/yeolab/data/GSP_release/Sub0809_Ses1/bold/003/Sub0809_Ses1_bld003_rest.nii.gz
diff --git a/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/unit_tests/100subjects_clustering/fmrinii/Sub0813_Ses1.fmrinii b/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/unit_tests/100subjects_clustering/fmrinii/Sub0813_Ses1.fmrinii
deleted file mode 100755
index 135dab6..0000000
--- a/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/unit_tests/100subjects_clustering/fmrinii/Sub0813_Ses1.fmrinii
+++ /dev/null
@@ -1,2 +0,0 @@
-002 /share/users/imganalysis/yeolab/data/GSP_release/Sub0813_Ses1/bold/002/Sub0813_Ses1_bld002_rest.nii.gz
-003 /share/users/imganalysis/yeolab/data/GSP_release/Sub0813_Ses1/bold/003/Sub0813_Ses1_bld003_rest.nii.gz
diff --git a/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/unit_tests/100subjects_clustering/fmrinii/Sub0823_Ses1.fmrinii b/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/unit_tests/100subjects_clustering/fmrinii/Sub0823_Ses1.fmrinii
deleted file mode 100755
index 171637e..0000000
--- a/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/unit_tests/100subjects_clustering/fmrinii/Sub0823_Ses1.fmrinii
+++ /dev/null
@@ -1,2 +0,0 @@
-002 /share/users/imganalysis/yeolab/data/GSP_release/Sub0823_Ses1/bold/002/Sub0823_Ses1_bld002_rest.nii.gz
-003 /share/users/imganalysis/yeolab/data/GSP_release/Sub0823_Ses1/bold/003/Sub0823_Ses1_bld003_rest.nii.gz
diff --git a/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/unit_tests/100subjects_clustering/fmrinii/Sub0862_Ses1.fmrinii b/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/unit_tests/100subjects_clustering/fmrinii/Sub0862_Ses1.fmrinii
deleted file mode 100755
index 93f6f22..0000000
--- a/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/unit_tests/100subjects_clustering/fmrinii/Sub0862_Ses1.fmrinii
+++ /dev/null
@@ -1,2 +0,0 @@
-002 /share/users/imganalysis/yeolab/data/GSP_release/Sub0862_Ses1/bold/002/Sub0862_Ses1_bld002_rest.nii.gz
-003 /share/users/imganalysis/yeolab/data/GSP_release/Sub0862_Ses1/bold/003/Sub0862_Ses1_bld003_rest.nii.gz
diff --git a/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/unit_tests/100subjects_clustering/fmrinii/Sub0875_Ses1.fmrinii b/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/unit_tests/100subjects_clustering/fmrinii/Sub0875_Ses1.fmrinii
deleted file mode 100755
index acea3c7..0000000
--- a/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/unit_tests/100subjects_clustering/fmrinii/Sub0875_Ses1.fmrinii
+++ /dev/null
@@ -1,2 +0,0 @@
-002 /share/users/imganalysis/yeolab/data/GSP_release/Sub0875_Ses1/bold/002/Sub0875_Ses1_bld002_rest.nii.gz
-003 /share/users/imganalysis/yeolab/data/GSP_release/Sub0875_Ses1/bold/003/Sub0875_Ses1_bld003_rest.nii.gz
diff --git a/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/unit_tests/100subjects_clustering/fmrinii/Sub0896_Ses1.fmrinii b/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/unit_tests/100subjects_clustering/fmrinii/Sub0896_Ses1.fmrinii
deleted file mode 100755
index dd7590f..0000000
--- a/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/unit_tests/100subjects_clustering/fmrinii/Sub0896_Ses1.fmrinii
+++ /dev/null
@@ -1 +0,0 @@
-002 /share/users/imganalysis/yeolab/data/GSP_release/Sub0896_Ses1/bold/002/Sub0896_Ses1_bld002_rest.nii.gz
diff --git a/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/unit_tests/100subjects_clustering/fmrinii/Sub0964_Ses1.fmrinii b/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/unit_tests/100subjects_clustering/fmrinii/Sub0964_Ses1.fmrinii
deleted file mode 100755
index 7aae9f6..0000000
--- a/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/unit_tests/100subjects_clustering/fmrinii/Sub0964_Ses1.fmrinii
+++ /dev/null
@@ -1,2 +0,0 @@
-002 /share/users/imganalysis/yeolab/data/GSP_release/Sub0964_Ses1/bold/002/Sub0964_Ses1_bld002_rest.nii.gz
-003 /share/users/imganalysis/yeolab/data/GSP_release/Sub0964_Ses1/bold/003/Sub0964_Ses1_bld003_rest.nii.gz
diff --git a/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/unit_tests/100subjects_clustering/fmrinii/Sub0968_Ses1.fmrinii b/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/unit_tests/100subjects_clustering/fmrinii/Sub0968_Ses1.fmrinii
deleted file mode 100755
index 77e9c64..0000000
--- a/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/unit_tests/100subjects_clustering/fmrinii/Sub0968_Ses1.fmrinii
+++ /dev/null
@@ -1,2 +0,0 @@
-002 /share/users/imganalysis/yeolab/data/GSP_release/Sub0968_Ses1/bold/002/Sub0968_Ses1_bld002_rest.nii.gz
-003 /share/users/imganalysis/yeolab/data/GSP_release/Sub0968_Ses1/bold/003/Sub0968_Ses1_bld003_rest.nii.gz
diff --git a/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/unit_tests/100subjects_clustering/fmrinii/Sub0973_Ses1.fmrinii b/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/unit_tests/100subjects_clustering/fmrinii/Sub0973_Ses1.fmrinii
deleted file mode 100755
index d419d0e..0000000
--- a/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/unit_tests/100subjects_clustering/fmrinii/Sub0973_Ses1.fmrinii
+++ /dev/null
@@ -1,2 +0,0 @@
-002 /share/users/imganalysis/yeolab/data/GSP_release/Sub0973_Ses1/bold/002/Sub0973_Ses1_bld002_rest.nii.gz
-003 /share/users/imganalysis/yeolab/data/GSP_release/Sub0973_Ses1/bold/003/Sub0973_Ses1_bld003_rest.nii.gz
diff --git a/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/unit_tests/100subjects_clustering/fmrinii/Sub0979_Ses1.fmrinii b/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/unit_tests/100subjects_clustering/fmrinii/Sub0979_Ses1.fmrinii
deleted file mode 100755
index d52d001..0000000
--- a/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/unit_tests/100subjects_clustering/fmrinii/Sub0979_Ses1.fmrinii
+++ /dev/null
@@ -1,2 +0,0 @@
-002 /share/users/imganalysis/yeolab/data/GSP_release/Sub0979_Ses1/bold/002/Sub0979_Ses1_bld002_rest.nii.gz
-003 /share/users/imganalysis/yeolab/data/GSP_release/Sub0979_Ses1/bold/003/Sub0979_Ses1_bld003_rest.nii.gz
diff --git a/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/unit_tests/100subjects_clustering/fmrinii/Sub0981_Ses1.fmrinii b/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/unit_tests/100subjects_clustering/fmrinii/Sub0981_Ses1.fmrinii
deleted file mode 100755
index 7c53ee8..0000000
--- a/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/unit_tests/100subjects_clustering/fmrinii/Sub0981_Ses1.fmrinii
+++ /dev/null
@@ -1,2 +0,0 @@
-002 /share/users/imganalysis/yeolab/data/GSP_release/Sub0981_Ses1/bold/002/Sub0981_Ses1_bld002_rest.nii.gz
-003 /share/users/imganalysis/yeolab/data/GSP_release/Sub0981_Ses1/bold/003/Sub0981_Ses1_bld003_rest.nii.gz
diff --git a/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/unit_tests/100subjects_clustering/fmrinii/Sub0983_Ses1.fmrinii b/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/unit_tests/100subjects_clustering/fmrinii/Sub0983_Ses1.fmrinii
deleted file mode 100755
index 7bb3e73..0000000
--- a/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/unit_tests/100subjects_clustering/fmrinii/Sub0983_Ses1.fmrinii
+++ /dev/null
@@ -1 +0,0 @@
-002 /share/users/imganalysis/yeolab/data/GSP_release/Sub0983_Ses1/bold/002/Sub0983_Ses1_bld002_rest.nii.gz
diff --git a/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/unit_tests/100subjects_clustering/fmrinii/Sub1011_Ses1.fmrinii b/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/unit_tests/100subjects_clustering/fmrinii/Sub1011_Ses1.fmrinii
deleted file mode 100755
index 5257863..0000000
--- a/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/unit_tests/100subjects_clustering/fmrinii/Sub1011_Ses1.fmrinii
+++ /dev/null
@@ -1,2 +0,0 @@
-002 /share/users/imganalysis/yeolab/data/GSP_release/Sub1011_Ses1/bold/002/Sub1011_Ses1_bld002_rest.nii.gz
-003 /share/users/imganalysis/yeolab/data/GSP_release/Sub1011_Ses1/bold/003/Sub1011_Ses1_bld003_rest.nii.gz
diff --git a/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/unit_tests/100subjects_clustering/fmrinii/Sub1027_Ses1.fmrinii b/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/unit_tests/100subjects_clustering/fmrinii/Sub1027_Ses1.fmrinii
deleted file mode 100755
index 6dfba29..0000000
--- a/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/unit_tests/100subjects_clustering/fmrinii/Sub1027_Ses1.fmrinii
+++ /dev/null
@@ -1,2 +0,0 @@
-002 /share/users/imganalysis/yeolab/data/GSP_release/Sub1027_Ses1/bold/002/Sub1027_Ses1_bld002_rest.nii.gz
-003 /share/users/imganalysis/yeolab/data/GSP_release/Sub1027_Ses1/bold/003/Sub1027_Ses1_bld003_rest.nii.gz
diff --git a/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/unit_tests/100subjects_clustering/fmrinii/Sub1089_Ses1.fmrinii b/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/unit_tests/100subjects_clustering/fmrinii/Sub1089_Ses1.fmrinii
deleted file mode 100755
index 17c4b34..0000000
--- a/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/unit_tests/100subjects_clustering/fmrinii/Sub1089_Ses1.fmrinii
+++ /dev/null
@@ -1,2 +0,0 @@
-002 /share/users/imganalysis/yeolab/data/GSP_release/Sub1089_Ses1/bold/002/Sub1089_Ses1_bld002_rest.nii.gz
-003 /share/users/imganalysis/yeolab/data/GSP_release/Sub1089_Ses1/bold/003/Sub1089_Ses1_bld003_rest.nii.gz
diff --git a/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/unit_tests/100subjects_clustering/fmrinii/Sub1098_Ses1.fmrinii b/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/unit_tests/100subjects_clustering/fmrinii/Sub1098_Ses1.fmrinii
deleted file mode 100755
index 57b77a6..0000000
--- a/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/unit_tests/100subjects_clustering/fmrinii/Sub1098_Ses1.fmrinii
+++ /dev/null
@@ -1,2 +0,0 @@
-002 /share/users/imganalysis/yeolab/data/GSP_release/Sub1098_Ses1/bold/002/Sub1098_Ses1_bld002_rest.nii.gz
-003 /share/users/imganalysis/yeolab/data/GSP_release/Sub1098_Ses1/bold/003/Sub1098_Ses1_bld003_rest.nii.gz
diff --git a/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/unit_tests/100subjects_clustering/fmrinii/Sub1107_Ses1.fmrinii b/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/unit_tests/100subjects_clustering/fmrinii/Sub1107_Ses1.fmrinii
deleted file mode 100755
index cf435b6..0000000
--- a/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/unit_tests/100subjects_clustering/fmrinii/Sub1107_Ses1.fmrinii
+++ /dev/null
@@ -1,2 +0,0 @@
-002 /share/users/imganalysis/yeolab/data/GSP_release/Sub1107_Ses1/bold/002/Sub1107_Ses1_bld002_rest.nii.gz
-003 /share/users/imganalysis/yeolab/data/GSP_release/Sub1107_Ses1/bold/003/Sub1107_Ses1_bld003_rest.nii.gz
diff --git a/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/unit_tests/100subjects_clustering/fmrinii/Sub1115_Ses1.fmrinii b/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/unit_tests/100subjects_clustering/fmrinii/Sub1115_Ses1.fmrinii
deleted file mode 100755
index 056d731..0000000
--- a/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/unit_tests/100subjects_clustering/fmrinii/Sub1115_Ses1.fmrinii
+++ /dev/null
@@ -1 +0,0 @@
-002 /share/users/imganalysis/yeolab/data/GSP_release/Sub1115_Ses1/bold/002/Sub1115_Ses1_bld002_rest.nii.gz
diff --git a/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/unit_tests/100subjects_clustering/fmrinii/Sub1123_Ses1.fmrinii b/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/unit_tests/100subjects_clustering/fmrinii/Sub1123_Ses1.fmrinii
deleted file mode 100755
index 4382de4..0000000
--- a/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/unit_tests/100subjects_clustering/fmrinii/Sub1123_Ses1.fmrinii
+++ /dev/null
@@ -1 +0,0 @@
-002 /share/users/imganalysis/yeolab/data/GSP_release/Sub1123_Ses1/bold/002/Sub1123_Ses1_bld002_rest.nii.gz
diff --git a/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/unit_tests/100subjects_clustering/fmrinii/Sub1142_Ses1.fmrinii b/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/unit_tests/100subjects_clustering/fmrinii/Sub1142_Ses1.fmrinii
deleted file mode 100755
index 6324759..0000000
--- a/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/unit_tests/100subjects_clustering/fmrinii/Sub1142_Ses1.fmrinii
+++ /dev/null
@@ -1 +0,0 @@
-002 /share/users/imganalysis/yeolab/data/GSP_release/Sub1142_Ses1/bold/002/Sub1142_Ses1_bld002_rest.nii.gz
diff --git a/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/unit_tests/100subjects_clustering/fmrinii/Sub1150_Ses1.fmrinii b/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/unit_tests/100subjects_clustering/fmrinii/Sub1150_Ses1.fmrinii
deleted file mode 100755
index 1e05ae3..0000000
--- a/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/unit_tests/100subjects_clustering/fmrinii/Sub1150_Ses1.fmrinii
+++ /dev/null
@@ -1,2 +0,0 @@
-002 /share/users/imganalysis/yeolab/data/GSP_release/Sub1150_Ses1/bold/002/Sub1150_Ses1_bld002_rest.nii.gz
-003 /share/users/imganalysis/yeolab/data/GSP_release/Sub1150_Ses1/bold/003/Sub1150_Ses1_bld003_rest.nii.gz
diff --git a/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/unit_tests/100subjects_clustering/fmrinii/Sub1170_Ses1.fmrinii b/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/unit_tests/100subjects_clustering/fmrinii/Sub1170_Ses1.fmrinii
deleted file mode 100755
index 8a40238..0000000
--- a/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/unit_tests/100subjects_clustering/fmrinii/Sub1170_Ses1.fmrinii
+++ /dev/null
@@ -1,2 +0,0 @@
-002 /share/users/imganalysis/yeolab/data/GSP_release/Sub1170_Ses1/bold/002/Sub1170_Ses1_bld002_rest.nii.gz
-003 /share/users/imganalysis/yeolab/data/GSP_release/Sub1170_Ses1/bold/003/Sub1170_Ses1_bld003_rest.nii.gz
diff --git a/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/unit_tests/100subjects_clustering/fmrinii/Sub1184_Ses1.fmrinii b/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/unit_tests/100subjects_clustering/fmrinii/Sub1184_Ses1.fmrinii
deleted file mode 100755
index be96fdc..0000000
--- a/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/unit_tests/100subjects_clustering/fmrinii/Sub1184_Ses1.fmrinii
+++ /dev/null
@@ -1 +0,0 @@
-002 /share/users/imganalysis/yeolab/data/GSP_release/Sub1184_Ses1/bold/002/Sub1184_Ses1_bld002_rest.nii.gz
diff --git a/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/unit_tests/100subjects_clustering/fmrinii/Sub1187_Ses1.fmrinii b/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/unit_tests/100subjects_clustering/fmrinii/Sub1187_Ses1.fmrinii
deleted file mode 100755
index 8a28697..0000000
--- a/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/unit_tests/100subjects_clustering/fmrinii/Sub1187_Ses1.fmrinii
+++ /dev/null
@@ -1 +0,0 @@
-002 /share/users/imganalysis/yeolab/data/GSP_release/Sub1187_Ses1/bold/002/Sub1187_Ses1_bld002_rest.nii.gz
diff --git a/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/unit_tests/100subjects_clustering/fmrinii/Sub1228_Ses1.fmrinii b/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/unit_tests/100subjects_clustering/fmrinii/Sub1228_Ses1.fmrinii
deleted file mode 100755
index 5a4f2fe..0000000
--- a/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/unit_tests/100subjects_clustering/fmrinii/Sub1228_Ses1.fmrinii
+++ /dev/null
@@ -1,2 +0,0 @@
-002 /share/users/imganalysis/yeolab/data/GSP_release/Sub1228_Ses1/bold/002/Sub1228_Ses1_bld002_rest.nii.gz
-003 /share/users/imganalysis/yeolab/data/GSP_release/Sub1228_Ses1/bold/003/Sub1228_Ses1_bld003_rest.nii.gz
diff --git a/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/unit_tests/100subjects_clustering/fmrinii/Sub1256_Ses1.fmrinii b/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/unit_tests/100subjects_clustering/fmrinii/Sub1256_Ses1.fmrinii
deleted file mode 100755
index ec6e09a..0000000
--- a/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/unit_tests/100subjects_clustering/fmrinii/Sub1256_Ses1.fmrinii
+++ /dev/null
@@ -1,2 +0,0 @@
-002 /share/users/imganalysis/yeolab/data/GSP_release/Sub1256_Ses1/bold/002/Sub1256_Ses1_bld002_rest.nii.gz
-003 /share/users/imganalysis/yeolab/data/GSP_release/Sub1256_Ses1/bold/003/Sub1256_Ses1_bld003_rest.nii.gz
diff --git a/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/unit_tests/100subjects_clustering/fmrinii/Sub1258_Ses1.fmrinii b/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/unit_tests/100subjects_clustering/fmrinii/Sub1258_Ses1.fmrinii
deleted file mode 100755
index 2ea4c55..0000000
--- a/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/unit_tests/100subjects_clustering/fmrinii/Sub1258_Ses1.fmrinii
+++ /dev/null
@@ -1 +0,0 @@
-002 /share/users/imganalysis/yeolab/data/GSP_release/Sub1258_Ses1/bold/002/Sub1258_Ses1_bld002_rest.nii.gz
diff --git a/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/unit_tests/100subjects_clustering/fmrinii/Sub1296_Ses1.fmrinii b/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/unit_tests/100subjects_clustering/fmrinii/Sub1296_Ses1.fmrinii
deleted file mode 100755
index 1ee6ae3..0000000
--- a/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/unit_tests/100subjects_clustering/fmrinii/Sub1296_Ses1.fmrinii
+++ /dev/null
@@ -1 +0,0 @@
-002 /share/users/imganalysis/yeolab/data/GSP_release/Sub1296_Ses1/bold/002/Sub1296_Ses1_bld002_rest.nii.gz
diff --git a/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/unit_tests/100subjects_clustering/fmrinii/Sub1305_Ses1.fmrinii b/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/unit_tests/100subjects_clustering/fmrinii/Sub1305_Ses1.fmrinii
deleted file mode 100755
index 21ecdc8..0000000
--- a/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/unit_tests/100subjects_clustering/fmrinii/Sub1305_Ses1.fmrinii
+++ /dev/null
@@ -1 +0,0 @@
-002 /share/users/imganalysis/yeolab/data/GSP_release/Sub1305_Ses1/bold/002/Sub1305_Ses1_bld002_rest.nii.gz
diff --git a/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/unit_tests/100subjects_clustering/fmrinii/Sub1306_Ses1.fmrinii b/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/unit_tests/100subjects_clustering/fmrinii/Sub1306_Ses1.fmrinii
deleted file mode 100755
index 541a191..0000000
--- a/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/unit_tests/100subjects_clustering/fmrinii/Sub1306_Ses1.fmrinii
+++ /dev/null
@@ -1,2 +0,0 @@
-002 /share/users/imganalysis/yeolab/data/GSP_release/Sub1306_Ses1/bold/002/Sub1306_Ses1_bld002_rest.nii.gz
-003 /share/users/imganalysis/yeolab/data/GSP_release/Sub1306_Ses1/bold/003/Sub1306_Ses1_bld003_rest.nii.gz
diff --git a/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/unit_tests/100subjects_clustering/fmrinii/Sub1308_Ses1.fmrinii b/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/unit_tests/100subjects_clustering/fmrinii/Sub1308_Ses1.fmrinii
deleted file mode 100755
index 063893e..0000000
--- a/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/unit_tests/100subjects_clustering/fmrinii/Sub1308_Ses1.fmrinii
+++ /dev/null
@@ -1,2 +0,0 @@
-002 /share/users/imganalysis/yeolab/data/GSP_release/Sub1308_Ses1/bold/002/Sub1308_Ses1_bld002_rest.nii.gz
-003 /share/users/imganalysis/yeolab/data/GSP_release/Sub1308_Ses1/bold/003/Sub1308_Ses1_bld003_rest.nii.gz
diff --git a/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/unit_tests/100subjects_clustering/fmrinii/Sub1331_Ses1.fmrinii b/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/unit_tests/100subjects_clustering/fmrinii/Sub1331_Ses1.fmrinii
deleted file mode 100755
index 026fdc5..0000000
--- a/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/unit_tests/100subjects_clustering/fmrinii/Sub1331_Ses1.fmrinii
+++ /dev/null
@@ -1,2 +0,0 @@
-002 /share/users/imganalysis/yeolab/data/GSP_release/Sub1331_Ses1/bold/002/Sub1331_Ses1_bld002_rest.nii.gz
-003 /share/users/imganalysis/yeolab/data/GSP_release/Sub1331_Ses1/bold/003/Sub1331_Ses1_bld003_rest.nii.gz
diff --git a/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/unit_tests/100subjects_clustering/fmrinii/Sub1336_Ses1.fmrinii b/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/unit_tests/100subjects_clustering/fmrinii/Sub1336_Ses1.fmrinii
deleted file mode 100755
index 517502d..0000000
--- a/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/unit_tests/100subjects_clustering/fmrinii/Sub1336_Ses1.fmrinii
+++ /dev/null
@@ -1,2 +0,0 @@
-002 /share/users/imganalysis/yeolab/data/GSP_release/Sub1336_Ses1/bold/002/Sub1336_Ses1_bld002_rest.nii.gz
-003 /share/users/imganalysis/yeolab/data/GSP_release/Sub1336_Ses1/bold/003/Sub1336_Ses1_bld003_rest.nii.gz
diff --git a/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/unit_tests/100subjects_clustering/fmrinii/Sub1338_Ses1.fmrinii b/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/unit_tests/100subjects_clustering/fmrinii/Sub1338_Ses1.fmrinii
deleted file mode 100755
index dbbaa14..0000000
--- a/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/unit_tests/100subjects_clustering/fmrinii/Sub1338_Ses1.fmrinii
+++ /dev/null
@@ -1,2 +0,0 @@
-002 /share/users/imganalysis/yeolab/data/GSP_release/Sub1338_Ses1/bold/002/Sub1338_Ses1_bld002_rest.nii.gz
-003 /share/users/imganalysis/yeolab/data/GSP_release/Sub1338_Ses1/bold/003/Sub1338_Ses1_bld003_rest.nii.gz
diff --git a/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/unit_tests/100subjects_clustering/fmrinii/Sub1339_Ses1.fmrinii b/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/unit_tests/100subjects_clustering/fmrinii/Sub1339_Ses1.fmrinii
deleted file mode 100755
index 16f2885..0000000
--- a/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/unit_tests/100subjects_clustering/fmrinii/Sub1339_Ses1.fmrinii
+++ /dev/null
@@ -1,2 +0,0 @@
-002 /share/users/imganalysis/yeolab/data/GSP_release/Sub1339_Ses1/bold/002/Sub1339_Ses1_bld002_rest.nii.gz
-003 /share/users/imganalysis/yeolab/data/GSP_release/Sub1339_Ses1/bold/003/Sub1339_Ses1_bld003_rest.nii.gz
diff --git a/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/unit_tests/100subjects_clustering/fmrinii/Sub1346_Ses1.fmrinii b/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/unit_tests/100subjects_clustering/fmrinii/Sub1346_Ses1.fmrinii
deleted file mode 100755
index 0085ed6..0000000
--- a/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/unit_tests/100subjects_clustering/fmrinii/Sub1346_Ses1.fmrinii
+++ /dev/null
@@ -1 +0,0 @@
-002 /share/users/imganalysis/yeolab/data/GSP_release/Sub1346_Ses1/bold/002/Sub1346_Ses1_bld002_rest.nii.gz
diff --git a/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/unit_tests/100subjects_clustering/fmrinii/Sub1350_Ses1.fmrinii b/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/unit_tests/100subjects_clustering/fmrinii/Sub1350_Ses1.fmrinii
deleted file mode 100755
index 108c05f..0000000
--- a/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/unit_tests/100subjects_clustering/fmrinii/Sub1350_Ses1.fmrinii
+++ /dev/null
@@ -1,2 +0,0 @@
-002 /share/users/imganalysis/yeolab/data/GSP_release/Sub1350_Ses1/bold/002/Sub1350_Ses1_bld002_rest.nii.gz
-003 /share/users/imganalysis/yeolab/data/GSP_release/Sub1350_Ses1/bold/003/Sub1350_Ses1_bld003_rest.nii.gz
diff --git a/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/unit_tests/100subjects_clustering/fmrinii/Sub1380_Ses1.fmrinii b/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/unit_tests/100subjects_clustering/fmrinii/Sub1380_Ses1.fmrinii
deleted file mode 100755
index 63bcb96..0000000
--- a/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/unit_tests/100subjects_clustering/fmrinii/Sub1380_Ses1.fmrinii
+++ /dev/null
@@ -1,2 +0,0 @@
-002 /share/users/imganalysis/yeolab/data/GSP_release/Sub1380_Ses1/bold/002/Sub1380_Ses1_bld002_rest.nii.gz
-003 /share/users/imganalysis/yeolab/data/GSP_release/Sub1380_Ses1/bold/003/Sub1380_Ses1_bld003_rest.nii.gz
diff --git a/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/unit_tests/100subjects_clustering/fmrinii/Sub1404_Ses1.fmrinii b/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/unit_tests/100subjects_clustering/fmrinii/Sub1404_Ses1.fmrinii
deleted file mode 100755
index 54a356a..0000000
--- a/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/unit_tests/100subjects_clustering/fmrinii/Sub1404_Ses1.fmrinii
+++ /dev/null
@@ -1,2 +0,0 @@
-002 /share/users/imganalysis/yeolab/data/GSP_release/Sub1404_Ses1/bold/002/Sub1404_Ses1_bld002_rest.nii.gz
-003 /share/users/imganalysis/yeolab/data/GSP_release/Sub1404_Ses1/bold/003/Sub1404_Ses1_bld003_rest.nii.gz
diff --git a/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/unit_tests/100subjects_clustering/fmrinii/Sub1405_Ses1.fmrinii b/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/unit_tests/100subjects_clustering/fmrinii/Sub1405_Ses1.fmrinii
deleted file mode 100755
index 38a9108..0000000
--- a/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/unit_tests/100subjects_clustering/fmrinii/Sub1405_Ses1.fmrinii
+++ /dev/null
@@ -1,2 +0,0 @@
-002 /share/users/imganalysis/yeolab/data/GSP_release/Sub1405_Ses1/bold/002/Sub1405_Ses1_bld002_rest.nii.gz
-003 /share/users/imganalysis/yeolab/data/GSP_release/Sub1405_Ses1/bold/003/Sub1405_Ses1_bld003_rest.nii.gz
diff --git a/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/unit_tests/100subjects_clustering/fmrinii/Sub1417_Ses1.fmrinii b/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/unit_tests/100subjects_clustering/fmrinii/Sub1417_Ses1.fmrinii
deleted file mode 100755
index fb8ef19..0000000
--- a/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/unit_tests/100subjects_clustering/fmrinii/Sub1417_Ses1.fmrinii
+++ /dev/null
@@ -1,2 +0,0 @@
-002 /share/users/imganalysis/yeolab/data/GSP_release/Sub1417_Ses1/bold/002/Sub1417_Ses1_bld002_rest.nii.gz
-003 /share/users/imganalysis/yeolab/data/GSP_release/Sub1417_Ses1/bold/003/Sub1417_Ses1_bld003_rest.nii.gz
diff --git a/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/unit_tests/100subjects_clustering/fmrinii/Sub1441_Ses1.fmrinii b/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/unit_tests/100subjects_clustering/fmrinii/Sub1441_Ses1.fmrinii
deleted file mode 100755
index 92cb187..0000000
--- a/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/unit_tests/100subjects_clustering/fmrinii/Sub1441_Ses1.fmrinii
+++ /dev/null
@@ -1,2 +0,0 @@
-002 /share/users/imganalysis/yeolab/data/GSP_release/Sub1441_Ses1/bold/002/Sub1441_Ses1_bld002_rest.nii.gz
-003 /share/users/imganalysis/yeolab/data/GSP_release/Sub1441_Ses1/bold/003/Sub1441_Ses1_bld003_rest.nii.gz
diff --git a/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/unit_tests/100subjects_clustering/fmrinii/Sub1525_Ses1.fmrinii b/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/unit_tests/100subjects_clustering/fmrinii/Sub1525_Ses1.fmrinii
deleted file mode 100755
index 9f329d7..0000000
--- a/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/unit_tests/100subjects_clustering/fmrinii/Sub1525_Ses1.fmrinii
+++ /dev/null
@@ -1,2 +0,0 @@
-002 /share/users/imganalysis/yeolab/data/GSP_release/Sub1525_Ses1/bold/002/Sub1525_Ses1_bld002_rest.nii.gz
-003 /share/users/imganalysis/yeolab/data/GSP_release/Sub1525_Ses1/bold/003/Sub1525_Ses1_bld003_rest.nii.gz
diff --git a/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/unit_tests/100subjects_clustering/fmrinii/Sub1529_Ses1.fmrinii b/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/unit_tests/100subjects_clustering/fmrinii/Sub1529_Ses1.fmrinii
deleted file mode 100755
index 1ecb05f..0000000
--- a/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/unit_tests/100subjects_clustering/fmrinii/Sub1529_Ses1.fmrinii
+++ /dev/null
@@ -1,2 +0,0 @@
-002 /share/users/imganalysis/yeolab/data/GSP_release/Sub1529_Ses1/bold/002/Sub1529_Ses1_bld002_rest.nii.gz
-003 /share/users/imganalysis/yeolab/data/GSP_release/Sub1529_Ses1/bold/003/Sub1529_Ses1_bld003_rest.nii.gz
diff --git a/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/unit_tests/100subjects_clustering/fmrinii/Sub1530_Ses1.fmrinii b/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/unit_tests/100subjects_clustering/fmrinii/Sub1530_Ses1.fmrinii
deleted file mode 100755
index b5d7dc6..0000000
--- a/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/unit_tests/100subjects_clustering/fmrinii/Sub1530_Ses1.fmrinii
+++ /dev/null
@@ -1 +0,0 @@
-002 /share/users/imganalysis/yeolab/data/GSP_release/Sub1530_Ses1/bold/002/Sub1530_Ses1_bld002_rest.nii.gz
diff --git a/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/unit_tests/100subjects_clustering/fmrinii/Sub1537_Ses1.fmrinii b/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/unit_tests/100subjects_clustering/fmrinii/Sub1537_Ses1.fmrinii
deleted file mode 100755
index b684ee6..0000000
--- a/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/unit_tests/100subjects_clustering/fmrinii/Sub1537_Ses1.fmrinii
+++ /dev/null
@@ -1 +0,0 @@
-002 /share/users/imganalysis/yeolab/data/GSP_release/Sub1537_Ses1/bold/002/Sub1537_Ses1_bld002_rest.nii.gz
diff --git a/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/unit_tests/100subjects_clustering/fmrinii/Sub1548_Ses1.fmrinii b/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/unit_tests/100subjects_clustering/fmrinii/Sub1548_Ses1.fmrinii
deleted file mode 100755
index cac158d..0000000
--- a/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/unit_tests/100subjects_clustering/fmrinii/Sub1548_Ses1.fmrinii
+++ /dev/null
@@ -1 +0,0 @@
-002 /share/users/imganalysis/yeolab/data/GSP_release/Sub1548_Ses1/bold/002/Sub1548_Ses1_bld002_rest.nii.gz
diff --git a/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/unit_tests/100subjects_clustering/fmrinii/Sub1553_Ses1.fmrinii b/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/unit_tests/100subjects_clustering/fmrinii/Sub1553_Ses1.fmrinii
deleted file mode 100755
index 2cf093b..0000000
--- a/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/unit_tests/100subjects_clustering/fmrinii/Sub1553_Ses1.fmrinii
+++ /dev/null
@@ -1,2 +0,0 @@
-002 /share/users/imganalysis/yeolab/data/GSP_release/Sub1553_Ses1/bold/002/Sub1553_Ses1_bld002_rest.nii.gz
-003 /share/users/imganalysis/yeolab/data/GSP_release/Sub1553_Ses1/bold/003/Sub1553_Ses1_bld003_rest.nii.gz
diff --git a/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/unit_tests/CBIG_preproc_100subjects_clustering_unit_test.m b/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/unit_tests/CBIG_preproc_100subjects_clustering_unit_test.m
deleted file mode 100755
index 514463b..0000000
--- a/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/unit_tests/CBIG_preproc_100subjects_clustering_unit_test.m
+++ /dev/null
@@ -1,83 +0,0 @@
-classdef CBIG_preproc_100subjects_clustering_unit_test < matlab.unittest.TestCase
-%
-% Target project:
-%                 CBIG_fMRI_Preproc2016
-%
-% Case design:
-%                 CBIG_fMRI_Preproc2016 already have unit tests, here we
-%                 call its "100subjects_clustering" unit test and automatically
-%                 make judgement on whether the unit test is passed or
-%                 failed
-%
-%                 For now, the stable projects' unit tests in our repo
-%                 require manual check of the output txt files or images,
-%                 making it incovenient for wrapper function to call them
-%                 and automatically draw conclusions. As a result, we write
-%                 some simple matlab test functions for these stable
-%                 projects' unit tests.
-%
-% Written by Yang Qing and CBIG under MIT license: https://github.com/ThomasYeoLab/CBIG/blob/master/LICENSE.md
-
-    methods (Test)
-        function test_100_subjects_Case(testCase)
-            %% path setting
-            addpath(fullfile(getenv('CBIG_CODE_DIR'), 'stable_projects', ...
-            'preprocessing', 'CBIG_fMRI_Preproc2016', 'utilities')); 
-            addpath(fullfile(getenv('CBIG_CODE_DIR'), 'stable_projects', ...
-                'preprocessing', 'CBIG_fMRI_Preproc2016', 'unit_tests', '100subjects_clustering'))
-            UnitTestDir = fullfile(getenv('CBIG_CODE_DIR'), 'stable_projects',...
-                'preprocessing', 'CBIG_fMRI_Preproc2016', 'unit_tests');
-            OutputDir = fullfile(UnitTestDir, 'output', '100_subjects_Case'); 
-            
-            %create output dir (IMPORTANT)
-            if(exist(OutputDir, 'dir'))
-                rmdir(OutputDir, 's')
-            end
-            mkdir(OutputDir);
-            
-            %% call CBIG_fMRI_Preproc2016 100 subjects unit test script to preprocess subjects
-            cmd = [fullfile(UnitTestDir, '100subjects_clustering', ...
-                'CBIG_preproc_unit_tests_preprocess_100subjects.csh'), ' ', OutputDir];
-            system(cmd); % this will submit a bunch of jobs to HPC
-            
-            %% periodically check whether the job has finished or not             
-            cmdout = 1;
-            while(cmdout ~= 0)
-                cmd = 'qstat | grep prep_100sub_ut | grep `whoami` | wc -l';
-                [~, cmdout] = system(cmd);
-                % after job finishes, cmdout should be 0
-                cmdout = str2num(cmdout(1: end-1));
-                pause(60); % sleep for 1min and check again
-            end
-            
-            %% call CBIG_fMRI_Preproc2016 100 subjects unit test script to obtain clustering results
-            cmd = [fullfile(UnitTestDir, '100subjects_clustering', ...
-                'CBIG_preproc_unit_tests_general_cluster_GSP_80_low_motion+20_w_censor.csh'), ...
-                ' ', OutputDir, ' ', OutputDir];
-            system(cmd);
-            
-            %% periodically check whether the job has finished or not             
-            cmdout = 1;
-            while(cmdout ~= 0)
-                cmd = 'qstat | grep clust_100sub_ut | grep `whoami` | wc -l';
-                [~, cmdout] = system(cmd);
-                cmdout = str2num(cmdout(1: end-1));
-                pause(60);
-            end
-            
-            %% check clustering results
-            CBIG_preproc_unit_tests_cmp_clusters(fullfile(OutputDir, ...
-                'clustering/GSP_80_low_mt_20_w_censor_clusters017_scrub.mat'), OutputDir);
-            
-            % remove intermediate output data (IMPORTANT)
-            rmdir(OutputDir, 's');
-            rmpath(fullfile(getenv('CBIG_CODE_DIR'), 'stable_projects', ...
-            'preprocessing', 'CBIG_fMRI_Preproc2016', 'utilities')); 
-            rmpath(fullfile(getenv('CBIG_CODE_DIR'), 'stable_projects', ...
-                'preprocessing', 'CBIG_fMRI_Preproc2016', 'unit_tests', '100subjects_clustering'))
-            
-        end
-        
-        
-    end
-end
diff --git a/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/unit_tests/CBIG_preproc_single_subject_unit_test.m b/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/unit_tests/CBIG_preproc_single_subject_unit_test.m
deleted file mode 100755
index 494a73a..0000000
--- a/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/unit_tests/CBIG_preproc_single_subject_unit_test.m
+++ /dev/null
@@ -1,172 +0,0 @@
-classdef CBIG_preproc_single_subject_unit_test < matlab.unittest.TestCase
-%
-% Target project:
-%                 CBIG_fMRI_Preproc2016
-%
-% Case design:
-%                 CBIG_fMRI_Preproc2016 already have unit tests, here we
-%                 call its "single_subject" unit test and automatically
-%                 make judgement on whether the unit test is passed or
-%                 failed
-%
-%                 For now, the stable projects' unit tests in our repo
-%                 require manual check of the output txt files or images,
-%                 making it incovenient for wrapper function to call them
-%                 and automatically draw conclusions. As a result, we write
-%                 some simple matlab test functions for these stable
-%                 projects' unit tests.
-%
-% Written by Yang Qing and CBIG under MIT license: https://github.com/ThomasYeoLab/CBIG/blob/master/LICENSE.md
-
-    methods (Test)
-        function test_single_subject_Case(testCase)
-            %% path setting
-            addpath(fullfile(getenv('CBIG_CODE_DIR'), 'stable_projects', ...
-                'preprocessing', 'CBIG_fMRI_Preproc2016', 'utilities')); 
-            addpath(fullfile(getenv('CBIG_CODE_DIR'), 'stable_projects', ...
-                'preprocessing', 'CBIG_fMRI_Preproc2016', 'unit_tests', 'single_subject'))
-            UnitTestDir = fullfile(getenv('CBIG_CODE_DIR'), 'stable_projects',...
-                'preprocessing', 'CBIG_fMRI_Preproc2016', 'unit_tests');
-            OutputDir = fullfile(UnitTestDir, 'output', 'single_subject_Case'); 
-            
-            %create output dir (IMPORTANT)
-            if(exist(OutputDir, 'dir'))
-                rmdir(OutputDir, 's')
-            end
-            mkdir(OutputDir);
-            
-            
-            %% call CBIG_fMRI_Preproc2016 single_subject unit test script to generate results
-            cmd = [fullfile(UnitTestDir, 'single_subject', ...
-                'CBIG_preproc_unit_tests_call_fMRI_preproc.csh'), ' ', OutputDir];
-            system(cmd); % this will submit a job to HPC
-            
-            
-            %% we need to periodically check whether the job has finished or not             
-            cmdout = 1;
-            while(cmdout ~= 0)
-                cmd = 'qstat | grep preproc | grep `whoami` | wc -l';
-                [~, cmdout] = system(cmd);
-                % after job finishes, cmdout should be 0
-                cmdout = str2num(cmdout(1: end-1));
-                pause(60); % sleep for 1min and check again
-            end
-
-            
-            %% check surf files
-            pipe_dir1 = fullfile(getenv('CBIG_TESTDATA_DIR'), 'stable_projects', 'preprocessing', ...
-                'CBIG_fMRI_Preproc2016', 'single_subject', 'data');
-            pipe_name1 = 'gt';
-            pipe_stem1 = '_rest_skip4_stc_mc_residc_interp_FDRMS0.2_DVARS50_bp_0.009_0.08_fs6_sm6_fs5';
-
-            pipe_dir2 = OutputDir;
-            pipe_name2 = 'user-test';
-            pipe_stem2 = '_rest_skip4_stc_mc_residc_interp_FDRMS0.2_DVARS50_bp_0.009_0.08_fs6_sm6_fs5';
-
-            subject_id = 'Sub1116_Ses1';
-            runs = {'002', '003'};
-
-            output_dir = fullfile(OutputDir, 'compare_output');
-            
-            for i = 1: length(runs)                
-                CBIG_preproc_compare_two_pipelines(pipe_dir1, pipe_name1, ...
-                    pipe_stem1, pipe_dir2, pipe_name2, pipe_stem2, subject_id, ...
-                    runs{i}, output_dir, 'surf');
-            end
-            
-            % check surf run 002
-            corr_file = fullfile(OutputDir, 'compare_output', 'Sub1116_Ses1',...
-                '002', 'gt_user-test_corr_surf_stat.txt');
-            corr_result = importdata(corr_file);
-            corr_result = regexp(corr_result{3}, ':', 'split'); % we look at the min corr
-            corr_result = corr_result(2);
-            corr_result = str2num(corr_result{1});
-            assert(corr_result > 0.99, ...
-                sprintf('surface min_corr of run002 is less than 0.99! The value is %f \n', ...
-                corr_result))
-            
-            % check surf run 003
-            corr_file = fullfile(OutputDir, 'compare_output', 'Sub1116_Ses1',...
-                '003', 'gt_user-test_corr_surf_stat.txt');
-            corr_result = importdata(corr_file);
-            corr_result = regexp(corr_result{3}, ':', 'split'); % we look at the min corr
-            corr_result = corr_result(2);
-            corr_result = str2num(corr_result{1});
-            assert(corr_result > 0.99, ...
-                sprintf('surface min_corr of run003 is less than 0.99! The value is %f \n', ...
-                corr_result))
-
-            
-            %% check volume files
-            pipe_dir1 = fullfile(getenv('CBIG_TESTDATA_DIR'), 'stable_projects', 'preprocessing', ...
-                'CBIG_fMRI_Preproc2016', 'single_subject', 'data');
-            pipe_name1 = 'gt';
-            pipe_stem1 = '_rest_skip4_stc_mc_residc_interp_FDRMS0.2_DVARS50_bp_0.009_0.08_MNI2mm_sm6_finalmask';
-
-            pipe_dir2 = OutputDir;
-            pipe_name2 = 'user-test';
-            pipe_stem2 = '_rest_skip4_stc_mc_residc_interp_FDRMS0.2_DVARS50_bp_0.009_0.08_MNI2mm_sm6_finalmask';
-
-            subject_id = 'Sub1116_Ses1';
-            runs = {'002', '003'};
-
-            output_dir = fullfile(OutputDir, 'compare_output');
-            
-            for i = 1:length(runs)                
-                CBIG_preproc_compare_two_pipelines(pipe_dir1, pipe_name1, ...
-                    pipe_stem1, pipe_dir2, pipe_name2, pipe_stem2, ...
-                    subject_id, runs{i}, output_dir, 'vol');
-            end
-            
-            % check vol run 002
-            corr_file = fullfile(OutputDir, 'compare_output', 'Sub1116_Ses1',...
-                '002', 'gt_user-test_corr_vol_stat.txt');
-            corr_result = importdata(corr_file);
-            corr_result = regexp(corr_result{3}, ':', 'split'); % we look at the min corr
-            corr_result = corr_result(2);
-            corr_result = str2num(corr_result{1});
-            assert(corr_result > 0.99, ...
-                sprintf('volume min_corr of run002 is less than 0.99! The value is %f \n', ...
-                corr_result))
-            
-            % check vol run 003
-            corr_file = fullfile(OutputDir, 'compare_output', ...
-                'Sub1116_Ses1/003/gt_user-test_corr_vol_stat.txt');
-            corr_result = importdata(corr_file);
-            corr_result = regexp(corr_result{3}, ':', 'split'); % we look at the min corr
-            corr_result = corr_result(2);
-            corr_result = str2num(corr_result{1});
-            assert(corr_result > 0.99, ...
-                sprintf('volume min_corr of run003 is less than 0.99! The value is %f \n', ...
-                corr_result))
-
-            %% check FC matrices
-            CBIG_preproc_FCmatrices_UnitTestCmp(OutputDir)
-            
-            % check FC matrices
-            FC_cmp_file = fullfile(OutputDir, 'inequal_corr_log.txt');
-            FC_cmp = importdata(FC_cmp_file);
-            size_FC_cmp = length(FC_cmp.textdata);
-            dif = FC_cmp.data(1:(size_FC_cmp - 1));
-            labels = FC_cmp.textdata;
-            [v,I] = max(dif);
-            max_label = labels(I);
-            message1 = sprintf('Differences identified in %i FC_matrices! \n', ...
-                FC_cmp.data(size_FC_cmp));
-            message2 = sprintf('The %s FC_matrices have the largest difference of %d. \n', ...
-                max_label{1}, v);
-            message3 = sprintf('For more details, refer to inequal_corr_log.txt in OutputDir. \n');
-            assert(v ==0, [message1 message2 message3])
-                           
-            % remove intermediate output data (IMPORTANT)
-            rmdir(OutputDir, 's');
-            rmpath(fullfile(getenv('CBIG_CODE_DIR'), 'stable_projects', ...
-            'preprocessing', 'CBIG_fMRI_Preproc2016', 'utilities')); 
-            rmpath(fullfile(getenv('CBIG_CODE_DIR'), 'stable_projects', ...
-                'preprocessing', 'CBIG_fMRI_Preproc2016', 'unit_tests', 'single_subject'))
-            
-        end
-        
-        
-    end
-end
diff --git a/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/unit_tests/single_subject/CBIG_preproc_FCmatrices_UnitTestCmp.m b/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/unit_tests/single_subject/CBIG_preproc_FCmatrices_UnitTestCmp.m
index 6ece303..3d86d43 100644
--- a/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/unit_tests/single_subject/CBIG_preproc_FCmatrices_UnitTestCmp.m
+++ b/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/unit_tests/single_subject/CBIG_preproc_FCmatrices_UnitTestCmp.m
@@ -63,14 +63,14 @@ function CBIG_preproc_FCmatrices_UnitTestCmp(preproc_out_dir, test_file_stem)
 
 
 if(~exist('test_file_stem', 'var'))
-    test_file_stem = ['rest_skip4_stc_mc_residc_interp_FDRMS0.2_DVARS50'...
+    test_file_stem = ['rest_skip8_stc_mc_sdc_me_residc_interp_FDRMS0.3_DVARS60'...
                      '_bp_0.009_0.08_fs6_sm6'];
 end
 
 % Beginning of the main code
 % Storing the ID of the 4 subjects chosen for the Unit Test and 
 % defining the 7 types of correlations within the brain. 
-subject_array = 'Sub1116_Ses1';
+subject_array = 'sub005';
 corr_label_array = {'all2all', 'lh2lh', 'lh2rh', 'lh2subcort', 'rh2rh',...
                     'rh2subcort', 'subcort2subcort'};
 
@@ -86,14 +86,14 @@ fid = fopen(fullfile(preproc_out_dir, 'inequal_corr_log.txt'),'wt');
 % test_path is the path to the FC matrices directory of the test data
 true_path = fullfile(getenv('CBIG_TESTDATA_DIR'), 'stable_projects', ...
     'preprocessing', 'CBIG_fMRI_Preproc2016', 'single_subject','data', ...
-    'Sub1116_Ses1', 'FC_metrics', 'Pearson_r');
+    subject_array, 'FC_metrics', 'Pearson_r');
                          
 test_path = fullfile(preproc_out_dir, subject_array, 'FC_metrics', 'Pearson_r'); 
 
 % Loop through each FC matrix and compare
 for j = 1: length(corr_label_array)
-    file_path_true = [subject_array '_rest_skip4_stc_mc_residc_'...
-                 'interp_FDRMS0.2_DVARS50_bp_0.009_0.08_fs6_sm6_'...
+    file_path_true = [subject_array '_rest_skip8_stc_mc_sdc_me_residc_'...
+                 'interp_FDRMS0.3_DVARS60_bp_0.009_0.08_fs6_sm6_'...
                  corr_label_array{1,j} '.mat'];
     file_path_test = [subject_array '_' test_file_stem '_' ...
                       corr_label_array{1,j} '.mat' ];
diff --git a/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/unit_tests/single_subject/CBIG_preproc_compare_output.m b/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/unit_tests/single_subject/CBIG_preproc_compare_output.m
new file mode 100644
index 0000000..a693b38
--- /dev/null
+++ b/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/unit_tests/single_subject/CBIG_preproc_compare_output.m
@@ -0,0 +1,151 @@
+function CBIG_preproc_compare_output(result_dir, ref_dir, output_dir)
+% This function is used to compare the single subject preprocessing outputs
+% from the entire pipeline. The volumes/surfaces at each stage will be 
+% compared based on voxel time course correlation and absolute difference.
+% This function is only used for unit-test purpose.
+%
+% Input:
+%   -result_dir: 
+%       the path for the preprocessing outputs generated from the
+%       unit test
+%   -ref_dir: 
+%       the path for the refernce preprocessing outputs
+%   -output_dir: 
+%       the path to save out comparison results
+%
+% Ouput:
+%   -CBIG_preproc_compare_output_result.txt:
+%       a text file saved under 'output_dir' with the correlation and
+%       maximum absolute difference between unit-test results and reference
+%       results at each stage.
+%
+% [NOTE]: Please refer to prepro.config for the preprocessing steps used in
+% this version of single subject preprocessing unit test.
+% Written by Shaoshi Zhang under MIT license: https://github.com/ThomasYeoLab/CBIG/blob/master/LICENSE.md
+
+addpath(fullfile(getenv('CBIG_CODE_DIR'), 'stable_projects', 'preprocessing', 'CBIG_fMRI_Preproc2016' ,'utilities'));
+% create output file
+fid = fopen(fullfile(output_dir, 'CBIG_preproc_compare_output_result.txt'),'wt');
+
+% % loop through 2 runs (001, 002)
+for i = [1, 2]
+    run = ['00' num2str(i)];
+    fprintf(fid, ['======Run ' run '======\n']);
+    
+    % raw image
+    fprintf(fid, ['sub-NDARBF851NH6_bld' run '_rest\n']);
+    result_path = fullfile(result_dir, 'bold', run, ['sub-NDARBF851NH6_bld' run '_rest.nii.gz']);
+    ref_path = fullfile(ref_dir, 'bold', run, ['sub-NDARBF851NH6_bld' run '_rest.nii.gz']);
+    compare_result(result_path, ref_path, fid);
+    
+    % skip8
+    fprintf(fid, ['sub-NDARBF851NH6_bld' run '_rest_skip8\n']);
+    result_path = fullfile(result_dir, 'bold', run, ['sub-NDARBF851NH6_bld' run '_rest_skip8.nii.gz']);
+    ref_path = fullfile(ref_dir, 'bold', run, ['sub-NDARBF851NH6_bld' run '_rest_skip8.nii.gz']);    
+    compare_result(result_path, ref_path, fid);
+
+    
+    % stc
+    fprintf(fid, ['sub-NDARBF851NH6_bld' run '_rest_skip8_stc\n']);
+    result_path = fullfile(result_dir, 'bold', run, ['sub-NDARBF851NH6_bld' run '_rest_skip8_stc.nii.gz']);
+    ref_path = fullfile(ref_dir, 'bold', run, ['sub-NDARBF851NH6_bld' run '_rest_skip8_stc.nii.gz']);
+    compare_result(result_path, ref_path, fid);
+    
+    % mc
+    fprintf(fid, ['sub-NDARBF851NH6_bld' run '_rest_skip8_stc_mc\n']);
+    result_path = fullfile(result_dir, 'bold', run, ['sub-NDARBF851NH6_bld' run '_rest_skip8_stc_mc.nii.gz']);
+    ref_path = fullfile(ref_dir, 'bold', run, ['sub-NDARBF851NH6_bld' run '_rest_skip8_stc_mc.nii.gz']); 
+    compare_result(result_path, ref_path, fid);
+    
+    % sdc
+    fprintf(fid, ['sub-NDARBF851NH6_bld' run '_rest_skip8_stc_mc_sdc\n']);
+    result_path = fullfile(result_dir, 'bold', run, ['sub-NDARBF851NH6_bld' run '_rest_skip8_stc_mc_sdc.nii.gz']);
+    ref_path = fullfile(ref_dir, 'bold', run, ['sub-NDARBF851NH6_bld' run '_rest_skip8_stc_mc_sdc.nii.gz']); 
+    compare_result(result_path, ref_path, fid);
+    
+    % regression with censor
+    fprintf(fid, ['sub-NDARBF851NH6_bld' run '_rest_skip8_stc_mc_sdc_residc\n']);
+    result_path = fullfile(result_dir, 'bold', run, ['sub-NDARBF851NH6_bld' run '_rest_skip8_stc_mc_sdc_residc.nii.gz']);
+    ref_path = fullfile(ref_dir, 'bold', run, ['sub-NDARBF851NH6_bld' run '_rest_skip8_stc_mc_sdc_residc.nii.gz']); 
+    compare_result(result_path, ref_path, fid);
+    
+    % interpolation
+    fprintf(fid, ['sub-NDARBF851NH6_bld' run '_rest_skip8_stc_mc_sdc_residc_interp_FDRMS0.3_DVARS60\n']);
+    result_path = fullfile(result_dir, 'bold', run, ['sub-NDARBF851NH6_bld' run '_rest_skip8_stc_mc_sdc_residc_interp_FDRMS0.3_DVARS60.nii.gz']);
+    ref_path = fullfile(ref_dir, 'bold', run, ['sub-NDARBF851NH6_bld' run '_rest_skip8_stc_mc_sdc_residc_interp_FDRMS0.3_DVARS60.nii.gz']); 
+    compare_result(result_path, ref_path, fid);
+    
+    % bandpass filtering
+    fprintf(fid, ['sub-NDARBF851NH6_bld' run '_rest_skip8_stc_mc_sdc_residc_interp_FDRMS0.3_DVARS60_bp_0.009_0.08\n']);
+    result_path = fullfile(result_dir, 'bold', run, ['sub-NDARBF851NH6_bld' run '_rest_skip8_stc_mc_sdc_residc_interp_FDRMS0.3_DVARS60_bp_0.009_0.08.nii.gz']);
+    ref_path = fullfile(ref_dir, 'bold', run, ['sub-NDARBF851NH6_bld' run '_rest_skip8_stc_mc_sdc_residc_interp_FDRMS0.3_DVARS60_bp_0.009_0.08.nii.gz']); 
+    compare_result(result_path, ref_path, fid);
+    
+    % MNI2mm volume
+    fprintf(fid, ['sub-NDARBF851NH6_bld' run '_rest_skip8_stc_mc_sdc_residc_interp_FDRMS0.3_DVARS60_bp_0.009_0.08_MNI2mm_sm6_finalmask\n']);
+    result_path = fullfile(result_dir, 'vol', ['sub-NDARBF851NH6_bld' run '_rest_skip8_stc_mc_sdc_residc_interp_FDRMS0.3_DVARS60_bp_0.009_0.08_MNI2mm_sm6_finalmask.nii.gz']);
+    ref_path = fullfile(ref_dir, 'vol', ['sub-NDARBF851NH6_bld' run '_rest_skip8_stc_mc_sdc_residc_interp_FDRMS0.3_DVARS60_bp_0.009_0.08_MNI2mm_sm6_finalmask.nii.gz']);
+    compare_result(result_path, ref_path, fid);
+    
+    % fs5 surface (only correlation)
+    fprintf(fid, ['sub-NDARBF851NH6_bld' run '_rest_skip8_stc_mc_sdc_residc_interp_FDRMS0.3_DVARS60_bp_0.009_0.08_fs6_sm6_fs5\n']);    
+    result_lh_path = fullfile(result_dir, 'surf', ['lh.sub-NDARBF851NH6_bld' run '_rest_skip8_stc_mc_sdc_residc_interp_FDRMS0.3_DVARS60_bp_0.009_0.08_fs6_sm6_fs5']);
+    result_rh_path = fullfile(result_dir, 'surf', ['rh.sub-NDARBF851NH6_bld' run '_rest_skip8_stc_mc_sdc_residc_interp_FDRMS0.3_DVARS60_bp_0.009_0.08_fs6_sm6_fs5']);
+    ref_lh_path = fullfile(ref_dir, 'surf', ['lh.sub-NDARBF851NH6_bld' run '_rest_skip8_stc_mc_sdc_residc_interp_FDRMS0.3_DVARS60_bp_0.009_0.08_fs6_sm6_fs5']);
+    ref_rh_path = fullfile(ref_dir, 'surf', ['rh.sub-NDARBF851NH6_bld' run '_rest_skip8_stc_mc_sdc_residc_interp_FDRMS0.3_DVARS60_bp_0.009_0.08_fs6_sm6_fs5']);
+    [~,~,corr_lh_ex,corr_rh_ex] = CBIG_preproc_compare_two_surfaces(result_lh_path, result_rh_path, ref_lh_path, ref_rh_path,'fsaverage5');
+    fprintf(fid,'max correlation :%f\n',max([corr_lh_ex corr_rh_ex]));
+    fprintf(fid,'min correlation :%f\n',min([corr_lh_ex corr_rh_ex]));
+    fprintf(fid,'mean correlation :%f\n',mean([corr_lh_ex corr_rh_ex]));
+    fprintf(fid,'median correlation :%f\n\n',median([corr_lh_ex corr_rh_ex]));
+      
+end
+
+%FC matrix
+fprintf(fid, ['====== FC ======\n']);
+
+fprintf(fid, 'sub-NDARBF851NH6_rest_skip8_stc_mc_sdc_residc_interp_FDRMS0.3_DVARS60_bp_0.009_0.08_fs6_sm6_all2all\n');
+result_FC_path = fullfile(result_dir, 'FC_metrics', 'Pearson_r', 'sub-NDARBF851NH6_rest_skip8_stc_mc_sdc_residc_interp_FDRMS0.3_DVARS60_bp_0.009_0.08_fs6_sm6_all2all.mat');
+ref_FC_path = fullfile(ref_dir, 'FC_metrics', 'Pearson_r', 'sub-NDARBF851NH6_rest_skip8_stc_mc_sdc_residc_interp_FDRMS0.3_DVARS60_bp_0.009_0.08_fs6_sm6_all2all.mat');
+result_FC_struct = load(result_FC_path);
+ref_FC_struct = load(ref_FC_path);
+result_FC = result_FC_struct.corr_mat;
+ref_FC = ref_FC_struct.corr_mat;
+result_FC_reshape = reshape(result_FC, size(result_FC, 1) * size(result_FC, 2), 1);
+ref_FC_reshape = reshape(ref_FC, size(ref_FC, 1) * size(ref_FC, 2), 1);
+FC_corr = corr(result_FC_reshape, ref_FC_reshape);
+fprintf(fid,['FC correlation :' num2str(FC_corr) '\n']);
+fprintf(fid,'FC max difference :%f\n\n',max(abs(result_FC(:) - ref_FC(:))));
+
+fclose(fid);
+
+    function vol_reshape = load_reshape(image_path)
+    % This function loads an image and reshapes it to size(image,
+    % 1)*size(image, 2) * size(image, 3) * frame
+
+    % load an image and extract the volume
+    vol_struct = MRIread(image_path);
+    vol = vol_struct.vol;
+
+    % reshape
+    vol_reshape = reshape(vol, size(vol,1)*size(vol,2)*size(vol,3), size(vol,4));
+    end
+
+
+    function compare_result(result_path, ref_path, fid)
+    % This function is used to calculate correlation and difference between
+    % test image and reference image, and write the result to an output
+    % file
+    result_img = load_reshape(result_path);
+    ref_img = load_reshape(ref_path);
+    
+    correlation = CBIG_preproc_corr_matrix(result_img, ref_img);
+    fprintf(fid, ['max correlation: ' num2str(max(correlation(:))) '\n']);
+    fprintf(fid, ['min correlation: ' num2str(min(correlation(:))) '\n']);
+    fprintf(fid, ['mean correlation: ' num2str(mean(correlation(:))) '\n']);
+    fprintf(fid, ['median correlation: ' num2str(median(correlation(:))) '\n']);
+    fprintf(fid, ['max difference: ' num2str(max(abs(result_img(:) - ref_img(:)))) '\n\n']);              
+    end
+
+
+end
\ No newline at end of file
diff --git a/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/unit_tests/single_subject/CBIG_preproc_single_subject_unit_test.m b/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/unit_tests/single_subject/CBIG_preproc_single_subject_unit_test.m
new file mode 100755
index 0000000..42c2b74
--- /dev/null
+++ b/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/unit_tests/single_subject/CBIG_preproc_single_subject_unit_test.m
@@ -0,0 +1,401 @@
+classdef CBIG_preproc_single_subject_unit_test < matlab.unittest.TestCase
+    %
+    % Target project:
+    %                 CBIG_fMRI_Preproc2016
+    %
+    % Case design:
+    %                 CBIG_fMRI_Preproc2016 already have unit tests, here we
+    %                 call its "single_subject" unit test and automatically
+    %                 make judgement on whether the unit test is passed or
+    %                 failed
+    %
+    %                 For now, the stable projects' unit tests in our repo
+    %                 require manual check of the output txt files or images,
+    %                 making it incovenient for wrapper function to call them
+    %                 and automatically draw conclusions. As a result, we write
+    %                 some simple matlab test functions for these stable
+    %                 projects' unit tests.
+    %
+    % Written by Yang Qing, Zhang Shaoshi, Lyu Xingyu and CBIG under MIT license: https://github.com/ThomasYeoLab/CBIG/blob/master/LICENSE.md
+    
+    methods (Test)
+        function test_single_subject_Case(testCase)
+            %% path setting
+            addpath(fullfile(getenv('CBIG_CODE_DIR'), 'stable_projects', ...
+                'preprocessing', 'CBIG_fMRI_Preproc2016', 'utilities'));
+            addpath(fullfile(getenv('CBIG_CODE_DIR'), 'stable_projects', ...
+                'preprocessing', 'CBIG_fMRI_Preproc2016', 'unit_tests', 'single_subject'))
+            UnitTestDir = fullfile(getenv('CBIG_CODE_DIR'), 'stable_projects',...
+                'preprocessing', 'CBIG_fMRI_Preproc2016', 'unit_tests');
+            OutputDir = fullfile(UnitTestDir, 'output', 'single_subject_multi_echo_Case');
+            load(fullfile(getenv('CBIG_CODE_DIR'), 'unit_tests', 'replace_unittest_flag'));
+            
+            %create output dir (IMPORTANT)
+            if(exist(OutputDir, 'dir'))
+                rmdir(OutputDir, 's')
+            end
+            mkdir(OutputDir);
+            
+            
+            %% call CBIG_fMRI_Preproc2016 single_subject unit test script to generate results
+            cmd = [fullfile(UnitTestDir, 'single_subject', ...
+                'CBIG_preproc_unit_tests_call_fMRI_preproc.sh'), ' ', OutputDir];
+            system(cmd); % this will submit a job to HPC
+            
+            
+            %% we need to periodically check whether the job has finished or not
+            cmdout = 1;
+            while(cmdout ~= 0)
+                cmd = 'ssh headnode "qstat | grep preproc | grep `whoami` | wc -l"';
+                [~, cmdout] = system(cmd);
+                % after job finishes, cmdout should be 0
+                cmdout = str2num(cmdout(1: end-1));
+                pause(60); % sleep for 1min and check again
+            end
+            
+            if(replace_unittest_flag)
+                disp('Replacing single subject multi echo preprocessing unit test results...')
+                disp('Make sure that the reference directory and its parent directory have write permission!')
+                ref_dir = fullfile(getenv('CBIG_TESTDATA_DIR'), 'stable_projects', 'preprocessing', ...
+                    'CBIG_fMRI_Preproc2016', 'single_subject', 'data');
+                ref_dir_subject = fullfile(ref_dir,'sub005');
+                output_dir = fullfile(getenv('CBIG_CODE_DIR'), 'stable_projects', 'preprocessing', ...
+                    'CBIG_fMRI_Preproc2016', 'unit_tests', 'output', 'single_subject_multi_echo_Case', 'sub005');
+                if(exist(ref_dir_subject, 'dir'))
+                    rmdir(ref_dir_subject, 's')
+                end
+                movefile(output_dir, ref_dir)
+            else
+                %% check surf files
+                pipe_dir1 = fullfile(getenv('CBIG_TESTDATA_DIR'), 'stable_projects', 'preprocessing', ...
+                    'CBIG_fMRI_Preproc2016', 'single_subject', 'data');
+                pipe_name1 = 'gt';
+                pipe_stem1 = '_rest_skip8_stc_mc_sdc_me_residc_interp_FDRMS0.3_DVARS60_bp_0.009_0.08_fs6_sm6_fs5';
+                
+                pipe_dir2 = OutputDir;
+                pipe_name2 = 'user-test';
+                pipe_stem2 = '_rest_skip8_stc_mc_sdc_me_residc_interp_FDRMS0.3_DVARS60_bp_0.009_0.08_fs6_sm6_fs5';
+                
+                subject_id = 'sub005';
+                runs = {'001'};
+                
+                
+                output_dir = fullfile(OutputDir, 'compare_output');
+                
+                for i = 1: length(runs)
+                    CBIG_preproc_compare_two_pipelines(pipe_dir1, pipe_name1, ...
+                        pipe_stem1, pipe_dir2, pipe_name2, pipe_stem2, subject_id, ...
+                        runs{i}, output_dir, 'surf');
+                end
+                
+                % check surf run 001
+                corr_file = fullfile(OutputDir, 'compare_output', 'sub005',...
+                    '001', 'gt_user-test_corr_surf_stat.txt');
+                corr_result = importdata(corr_file);
+                corr_result = regexp(corr_result{3}, ':', 'split'); % we look at the min corr
+                corr_result = corr_result(2);
+                corr_result = str2num(corr_result{1});
+                assert(corr_result > 0.99, ...
+                    sprintf('surface min_corr of run001 is less than 0.99! The value is %f \n', ...
+                    corr_result))                
+                
+                %% check volume files
+                pipe_dir1 = fullfile(getenv('CBIG_TESTDATA_DIR'), 'stable_projects', 'preprocessing', ...
+                    'CBIG_fMRI_Preproc2016', 'single_subject', 'data');
+                pipe_name1 = 'gt';
+                pipe_stem1 = '_rest_skip8_stc_mc_sdc_me_residc_interp_FDRMS0.3_DVARS60_bp_0.009_0.08_MNI2mm_sm6_finalmask';
+                
+                pipe_dir2 = OutputDir;
+                pipe_name2 = 'user-test';
+                pipe_stem2 = '_rest_skip8_stc_mc_sdc_me_residc_interp_FDRMS0.3_DVARS60_bp_0.009_0.08_MNI2mm_sm6_finalmask';
+                
+                subject_id = 'sub005';
+                runs = {'001'};
+                
+                output_dir = fullfile(OutputDir, 'compare_output');
+                
+                for i = 1:length(runs)
+                    CBIG_preproc_compare_two_pipelines(pipe_dir1, pipe_name1, ...
+                        pipe_stem1, pipe_dir2, pipe_name2, pipe_stem2, ...
+                        subject_id, runs{i}, output_dir, 'vol');
+                end
+                
+                % check vol run 001
+                corr_file = fullfile(OutputDir, 'compare_output', 'sub005',...
+                    '001', 'gt_user-test_corr_vol_stat.txt');
+                corr_result = importdata(corr_file);
+                corr_result = regexp(corr_result{3}, ':', 'split'); % we look at the min corr
+                corr_result = corr_result(2);
+                corr_result = str2num(corr_result{1});
+                assert(corr_result > 0.99, ...
+                    sprintf('volume min_corr of run001 is less than 0.99! The value is %f \n', ...
+                    corr_result))
+                
+                %% check FC matrices
+                CBIG_preproc_FCmatrices_UnitTestCmp(OutputDir)
+                
+                % check FC matrices
+                FC_cmp_file = fullfile(OutputDir, 'inequal_corr_log.txt');
+                FC_cmp = importdata(FC_cmp_file);
+                size_FC_cmp = length(FC_cmp.textdata);
+                dif = FC_cmp.data(1:(size_FC_cmp - 1));
+                labels = FC_cmp.textdata;
+                [v,I] = max(dif);
+                max_label = labels(I);
+                message1 = sprintf('Differences identified in %i FC_matrices! \n', ...
+                    FC_cmp.data(size_FC_cmp));
+                message2 = sprintf('The %s FC_matrices have the largest difference of %d. \n', ...
+                    max_label{1}, v);
+                message3 = sprintf('For more details, refer to inequal_corr_log.txt in OutputDir. \n');
+                assert(v ==0, [message1 message2 message3])
+            end
+            
+            % remove intermediate output data (IMPORTANT)
+            rmdir(OutputDir, 's');
+            rmpath(fullfile(getenv('CBIG_CODE_DIR'), 'stable_projects', ...
+                'preprocessing', 'CBIG_fMRI_Preproc2016', 'utilities'));
+            rmpath(fullfile(getenv('CBIG_CODE_DIR'), 'stable_projects', ...
+                'preprocessing', 'CBIG_fMRI_Preproc2016', 'unit_tests', 'single_subject'))
+            
+        end
+        
+        function test_motion_filter(testCase)
+            addpath(fullfile(getenv('CBIG_CODE_DIR'), 'stable_projects', ...
+                'preprocessing', 'CBIG_fMRI_Preproc2016', 'utilities'));
+            addpath(fullfile(getenv('CBIG_CODE_DIR'), 'stable_projects', ...
+                'preprocessing', 'CBIG_fMRI_Preproc2016', 'unit_tests', 'single_subject'))
+            UnitTestDir = fullfile(getenv('CBIG_CODE_DIR'), 'stable_projects',...
+                'preprocessing', 'CBIG_fMRI_Preproc2016', 'unit_tests');
+            OutputDir = fullfile(UnitTestDir, 'output', 'test_motion_filter');
+            load(fullfile(getenv('CBIG_CODE_DIR'), 'unit_tests', 'replace_unittest_flag'));
+            
+            %create output dir (IMPORTANT)
+            if(exist(OutputDir, 'dir'))
+                rmdir(OutputDir, 's')
+            end
+            mkdir(OutputDir);
+            
+            
+            %% call CBIG_fMRI_Preproc2016 single_subject unit test script to generate results
+            cmd = [fullfile(UnitTestDir, 'single_subject', ...
+                'CBIG_preproc_unit_tests_test_motion_filtering.csh'), ' ', OutputDir];
+            system(cmd); % this will submit a job to HPC
+            
+            
+            %% we need to periodically check whether the job has finished or not
+            cmdout = 1;
+            while(cmdout ~= 0)
+                cmd = 'ssh headnode "qstat | grep preproc | grep `whoami` | wc -l"';
+                [~, cmdout] = system(cmd);
+                % after job finishes, cmdout should be 0
+                cmdout = str2num(cmdout(1: end-1));
+                pause(60); % sleep for 1min and check again
+            end
+            sub_id = 'sub-NDARBF851NH6';
+            ref_dir = fullfile(getenv('CBIG_TESTDATA_DIR'), 'stable_projects', 'preprocessing', ...
+                'CBIG_fMRI_Preproc2016', 'single_subject', 'test_motion_filter');
+            output_dir = fullfile(getenv('CBIG_CODE_DIR'), 'stable_projects', 'preprocessing', ...
+                'CBIG_fMRI_Preproc2016', 'unit_tests', 'output', 'test_motion_filter',sub_id);
+            
+            if(replace_unittest_flag)
+                disp('Replacing single subject preprocessing unit test results...')
+                disp('Make sure that the reference directory and its parent directory have write permission!')
+                ref_dir_subject = fullfile(ref_dir,'sub-NDARBF851NH6');
+                if(exist(ref_dir_subject, 'dir'))
+                    rmdir(ref_dir_subject, 's')
+                end
+                movefile(output_dir, ref_dir)
+            else
+                ref_dir = fullfile(getenv('CBIG_TESTDATA_DIR'), 'stable_projects', 'preprocessing', ...
+                    'CBIG_fMRI_Preproc2016', 'single_subject', 'test_motion_filter', sub_id);
+                runs = {'001','002'};
+                for i = 1:length(runs)
+                    motion_ref_file = fullfile(ref_dir,'bold',runs{i},...
+                        [sub_id '_bld' runs{i} '_rest_skip8_stc_mc.par']);
+                    motion_ref = load(motion_ref_file);
+                    
+                    motion_out_file = fullfile(output_dir,'bold',runs{i},...
+                        [sub_id '_bld' runs{i} '_rest_skip8_stc_mc.par']);
+                    motion_out = load(motion_out_file);
+                    
+                    max_diff = max(abs(motion_ref(:)-motion_out(:)));
+                    assert(max_diff < 1e-6, 'maximum difference of filtered motion parameters greater than 1e-6');
+                end
+            end
+            
+            % remove intermediate output data (IMPORTANT)
+            
+            rmdir(OutputDir, 's');
+            rmpath(fullfile(getenv('CBIG_CODE_DIR'), 'stable_projects', ...
+                'preprocessing', 'CBIG_fMRI_Preproc2016', 'utilities'));
+            rmpath(fullfile(getenv('CBIG_CODE_DIR'), 'stable_projects', ...
+                'preprocessing', 'CBIG_fMRI_Preproc2016', 'unit_tests', 'single_subject'))
+        end
+        
+        function test_aCompCor(testCase)
+            %% path setting
+            addpath(fullfile(getenv('CBIG_CODE_DIR'), 'stable_projects', ...
+                'preprocessing', 'CBIG_fMRI_Preproc2016', 'utilities'));
+            addpath(fullfile(getenv('CBIG_CODE_DIR'), 'stable_projects', ...
+                'preprocessing', 'CBIG_fMRI_Preproc2016', 'unit_tests', 'single_subject'))
+            UnitTestDir = fullfile(getenv('CBIG_CODE_DIR'), 'stable_projects',...
+                'preprocessing', 'CBIG_fMRI_Preproc2016', 'unit_tests');
+            OutputDir = fullfile(UnitTestDir, 'output', 'aCompCor');
+            load(fullfile(getenv('CBIG_CODE_DIR'), 'unit_tests', 'replace_unittest_flag'));
+            
+            %create output dir (IMPORTANT)
+            if(exist(OutputDir, 'dir'))
+                rmdir(OutputDir, 's')
+            end
+            mkdir(OutputDir);
+            
+            
+            %% call CBIG_fMRI_Preproc2016 single_subject unit test script to generate results
+            cmd = [fullfile(UnitTestDir, 'single_subject', ...
+                'CBIG_preproc_unit_tests_call_fMRI_preproc_aCompCor.csh'), ' ', OutputDir];
+            system(cmd); % this will submit a job to HPC
+            
+            
+            %% we need to periodically check whether the job has finished or not
+            cmdout = 1;
+            while(cmdout ~= 0)
+                cmd = 'ssh headnode "qstat | grep preproc | grep `whoami` | wc -l"';
+                [~, cmdout] = system(cmd);
+                % after job finishes, cmdout should be 0
+                cmdout = str2num(cmdout(1: end-1));
+                pause(60); % sleep for 1min and check again
+            end
+            
+            if(replace_unittest_flag)
+                disp('Replacing single aCompCor preprocessing unit test results...')
+                disp('Make sure that the reference directory and its parent directory have write permission!')
+                ref_dir = fullfile(getenv('CBIG_TESTDATA_DIR'), 'stable_projects', 'preprocessing', ...
+                    'CBIG_fMRI_Preproc2016', 'single_subject', 'aCompCor');
+                output_dir = fullfile(getenv('CBIG_CODE_DIR'), 'stable_projects', 'preprocessing', ...
+                    'CBIG_fMRI_Preproc2016', 'unit_tests', 'output', 'aCompCor', 'Sub1116_Ses1');
+                ref_dir_subject = fullfile(ref_dir,'Sub1116_Ses1');
+                if(exist(ref_dir_subject, 'dir'))
+                    rmdir(ref_dir_subject, 's')
+                end
+                movefile(output_dir, ref_dir)
+            else
+                %% check volume files
+                pipe_dir1 = fullfile(getenv('CBIG_TESTDATA_DIR'), 'stable_projects', 'preprocessing', ...
+                    'CBIG_fMRI_Preproc2016', 'single_subject', 'aCompCor');
+                pipe_stem1 = '_rest_skip4_stc_mc_resid';
+                
+                pipe_dir2 = OutputDir;
+                pipe_stem2 = '_rest_skip4_stc_mc_resid';
+                
+                subject_id = 'Sub1116_Ses1';
+                runs = {'002', '003'};
+                
+                for i = 1:length(runs)
+                    vol_ref_file = fullfile(pipe_dir1,subject_id,'bold',runs{i},...
+                        [subject_id '_bld' runs{i} pipe_stem1 '.nii.gz']);
+                    vol_ref = MRIread(vol_ref_file);
+                    vol_ref = vol_ref.vol;
+                    
+                    vol_test_file = fullfile(pipe_dir2,subject_id,'bold',runs{i},...
+                        [subject_id '_bld' runs{i} pipe_stem2 '.nii.gz']);
+                    vol_test = MRIread(vol_test_file);
+                    vol_test = vol_test.vol;
+                    
+                    max_diff = max(abs(vol_ref(:)-vol_test(:)));
+                    assert(max_diff < 1e-6, 'maximum difference greater than 1e-6');
+                end
+            end
+            
+            % remove intermediate output data (IMPORTANT)
+            rmdir(OutputDir, 's');
+            rmpath(fullfile(getenv('CBIG_CODE_DIR'), 'stable_projects', ...
+                'preprocessing', 'CBIG_fMRI_Preproc2016', 'utilities'));
+            rmpath(fullfile(getenv('CBIG_CODE_DIR'), 'stable_projects', ...
+                'preprocessing', 'CBIG_fMRI_Preproc2016', 'unit_tests', 'single_subject'))
+            
+        end
+        
+        function test_sdc_oppo_PED(testCase)
+            %% path setting
+            addpath(fullfile(getenv('CBIG_CODE_DIR'), 'stable_projects', ...
+                'preprocessing', 'CBIG_fMRI_Preproc2016', 'utilities'));
+            addpath(fullfile(getenv('CBIG_CODE_DIR'), 'stable_projects', ...
+                'preprocessing', 'CBIG_fMRI_Preproc2016', 'unit_tests', 'single_subject'))
+            UnitTestDir = fullfile(getenv('CBIG_CODE_DIR'), 'stable_projects',...
+                'preprocessing', 'CBIG_fMRI_Preproc2016', 'unit_tests');
+            OutputDir = fullfile(UnitTestDir, 'output', 'sdc_oppo_PED');
+            load(fullfile(getenv('CBIG_CODE_DIR'), 'unit_tests', 'replace_unittest_flag'));
+            
+            %create output dir (IMPORTANT)
+            if(exist(OutputDir, 'dir'))
+                rmdir(OutputDir, 's')
+            end
+            mkdir(OutputDir);
+            
+            
+            %% call CBIG_fMRI_Preproc2016 single_subject unit test script to generate results
+            cmd = [fullfile(UnitTestDir, 'single_subject', ...
+                'CBIG_preproc_unit_tests_call_fMRI_preproc_sdc_oppo_PED.csh'), ' ', OutputDir];
+            system(cmd); % this will submit a job to HPC
+            
+            
+            %% we need to periodically check whether the job has finished or not
+            cmdout = 1;
+            while(cmdout ~= 0)
+                cmd = 'ssh headnode "qstat | grep preproc | grep `whoami` | wc -l"';
+                [~, cmdout] = system(cmd);
+                % after job finishes, cmdout should be 0
+                cmdout = str2num(cmdout(1: end-1));
+                pause(60); % sleep for 1min and check again
+            end
+            
+            if(replace_unittest_flag)
+                disp('Replacing single spatial distortion correction preprocessing unit test results...')
+                disp('Make sure that the reference directory and its parent directory have write permission!')
+                ref_dir = fullfile(getenv('CBIG_TESTDATA_DIR'), 'stable_projects', 'preprocessing', ...
+                    'CBIG_fMRI_Preproc2016', 'single_subject', 'data');
+                output_dir = fullfile(getenv('CBIG_CODE_DIR'), 'stable_projects', 'preprocessing', ...
+                    'CBIG_fMRI_Preproc2016', 'unit_tests', 'output', 'sdc_oppo_PED', 'sub-NDARBF851NH6');
+                ref_dir_subject = fullfile(ref_dir,'sub-NDARBF851NH6');
+                if(exist(ref_dir_subject, 'dir'))
+                    rmdir(ref_dir_subject, 's')
+                end
+                movefile(output_dir, ref_dir)
+            else
+                %% check volume files
+                pipe_dir1 = fullfile(getenv('CBIG_TESTDATA_DIR'), 'stable_projects', 'preprocessing', ...
+                    'CBIG_fMRI_Preproc2016', 'single_subject', 'data');
+                pipe_stem1 = '_rest_skip8_stc_mc_sdc';
+                
+                pipe_dir2 = OutputDir;
+                pipe_stem2 = '_rest_skip8_stc_mc_sdc';
+                
+                subject_id = 'sub-NDARBF851NH6';
+                runs = {'001','002'};
+                
+                for i = 1:length(runs)
+                    vol_ref_file = fullfile(pipe_dir1,subject_id,'bold',runs{i},...
+                        [subject_id '_bld' runs{i} pipe_stem1 '.nii.gz']);
+                    vol_ref = MRIread(vol_ref_file);
+                    vol_ref = vol_ref.vol;
+                    
+                    vol_test_file = fullfile(pipe_dir2,subject_id,'bold',runs{i},...
+                        [subject_id '_bld' runs{i} pipe_stem2 '.nii.gz']);
+                    vol_test = MRIread(vol_test_file);
+                    vol_test = vol_test.vol;
+                    
+                    max_diff = max(abs(vol_ref(:)-vol_test(:)));
+                    assert(max_diff < 1e-6, 'maximum difference greater than 1e-6 in run %s', runs{i});
+                end
+            end
+            
+            % remove intermediate output data (IMPORTANT)
+            rmdir(OutputDir, 's');
+            rmpath(fullfile(getenv('CBIG_CODE_DIR'), 'stable_projects', ...
+                'preprocessing', 'CBIG_fMRI_Preproc2016', 'utilities'));
+            rmpath(fullfile(getenv('CBIG_CODE_DIR'), 'stable_projects', ...
+                'preprocessing', 'CBIG_fMRI_Preproc2016', 'unit_tests', 'single_subject'))
+            
+        end
+    end
+end
diff --git a/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/unit_tests/single_subject/CBIG_preproc_unit_tests_call_fMRI_preproc.csh b/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/unit_tests/single_subject/CBIG_preproc_unit_tests_call_fMRI_preproc.csh
deleted file mode 100755
index fa646a9..0000000
--- a/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/unit_tests/single_subject/CBIG_preproc_unit_tests_call_fMRI_preproc.csh
+++ /dev/null
@@ -1,29 +0,0 @@
-#!/bin/csh
-# Written by Jingwei Li and CBIG under MIT license: https://github.com/ThomasYeoLab/CBIG/blob/master/LICENSE.md
-
-set outdir = $1   # Your output directory
-set fmrinii_dir = "$CBIG_TESTDATA_DIR/stable_projects/preprocessing"
-set fmrinii_dir = "$fmrinii_dir/CBIG_fMRI_Preproc2016/single_subject/scripts/fmrinii"
-set config_file = "$CBIG_CODE_DIR/stable_projects/preprocessing/CBIG_fMRI_Preproc2016"
-set config_file = "$config_file/unit_tests/single_subject/prepro.config"
-set anat_dir = "$CBIG_TESTDATA_DIR/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/single_subject/data"
-
-set curr_sub = "Sub1116_Ses1"
-
-set curr_dir = `pwd`
-set work_dir = $HOME/cluster/ 
-
-echo $curr_dir
-echo $work_dir
-
-if (! -e $work_dir) then
-    mkdir -p $work_dir
-endif
-
-cd $work_dir
-
-
-set cmd = "CBIG_preproc_fMRI_preprocess.csh -s $curr_sub -output_d $outdir -anat_s ${curr_sub}_FS -anat_d"
-set cmd = "$cmd ${anat_dir} -fmrinii ${fmrinii_dir}/$curr_sub.fmrinii -config ${config_file} -nocleanup"
-echo $cmd | $CBIG_SCHEDULER_DIR/qsub -V -q circ-spool -l walltime=1:00:00,mem=6GB -m ae -N \
-    CBIG_preproc_unit_tests_call_fMRI_preproc
diff --git a/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/unit_tests/single_subject/CBIG_preproc_unit_tests_call_fMRI_preproc.sh b/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/unit_tests/single_subject/CBIG_preproc_unit_tests_call_fMRI_preproc.sh
new file mode 100755
index 0000000..eeaaa2e
--- /dev/null
+++ b/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/unit_tests/single_subject/CBIG_preproc_unit_tests_call_fMRI_preproc.sh
@@ -0,0 +1,41 @@
+#!/bin/bash
+# This script submit a job to HPC for CBIG_fMRI_Preproc2016 single subject unit test.
+# Written by Xingyu Lyu and CBIG under MIT license: https://github.com/ThomasYeoLab/CBIG/blob/master/LICENSE.md
+
+outdir=$1   # Your output directory
+fmrinii_dir="$CBIG_TESTDATA_DIR/stable_projects/preprocessing"
+fmrinii_dir="$fmrinii_dir/CBIG_fMRI_Preproc2016/single_subject/scripts/fmrinii"
+config_file="$CBIG_CODE_DIR/stable_projects/preprocessing/CBIG_fMRI_Preproc2016\
+/unit_tests/single_subject/prepro.config"
+anat_dir="$CBIG_TESTDATA_DIR/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/single_subject/data"
+
+curr_sub="sub005"
+
+curr_dir=`pwd`
+work_dir=$HOME/cluster/ 
+
+echo $curr_dir
+echo $work_dir
+
+if [ ! -e $work_dir ] 
+then
+    mkdir -p $work_dir
+fi
+
+cd $work_dir
+
+log_file="${outdir}/CBIG_preproc_unit_tests_call_fMRI_preproc.log"
+
+cmd="source ~/.bashrc;source activate CBIG_py3;"
+cmd="$cmd csh ${CBIG_CODE_DIR}/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/CBIG_preproc_fMRI_preprocess.csh"
+cmd="$cmd -s $curr_sub -output_d $outdir -anat_s ${curr_sub}_FS -anat_d"
+cmd="$cmd ${anat_dir} -fmrinii ${fmrinii_dir}/${curr_sub}.fmrinii -config ${config_file}"
+cmd="$cmd -nocleanup | tee -a ${log_file} ;source deactivate"
+
+temp_script_file="${outdir}/temp_script.sh"
+echo '#!/bin/bash' >> ${temp_script_file}
+echo ${cmd} >> ${temp_script_file}
+chmod 755 ${temp_script_file}
+
+$CBIG_CODE_DIR/setup/CBIG_pbsubmit -cmd "${temp_script_file}" -walltime 1:30:00 -mem 6G \
+-name "CBIG_preproc_unit_tests_call_fMRI_preproc"
diff --git a/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/unit_tests/single_subject/CBIG_preproc_unit_tests_call_fMRI_preproc_aCompCor.csh b/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/unit_tests/single_subject/CBIG_preproc_unit_tests_call_fMRI_preproc_aCompCor.csh
new file mode 100755
index 0000000..f63eb8e
--- /dev/null
+++ b/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/unit_tests/single_subject/CBIG_preproc_unit_tests_call_fMRI_preproc_aCompCor.csh
@@ -0,0 +1,32 @@
+#!/bin/csh
+# Written by Jingwei Li and CBIG under MIT license: https://github.com/ThomasYeoLab/CBIG/blob/master/LICENSE.md
+
+set outdir = $1   # Your output directory
+set fmrinii_dir = "$CBIG_TESTDATA_DIR/stable_projects/preprocessing"
+set fmrinii_dir = "$fmrinii_dir/CBIG_fMRI_Preproc2016/single_subject/scripts/fmrinii"
+set config_file = "$CBIG_CODE_DIR/stable_projects/preprocessing/CBIG_fMRI_Preproc2016"
+set config_file = "$config_file/unit_tests/single_subject/prepro_aCompCor.config"
+set anat_dir = "$CBIG_TESTDATA_DIR/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/single_subject/data"
+
+set curr_sub = "Sub1116_Ses1"
+
+set curr_dir = `pwd`
+set work_dir = $HOME/cluster/ 
+
+echo $curr_dir
+echo $work_dir
+
+if (! -e $work_dir) then
+    mkdir -p $work_dir
+endif
+
+cd $work_dir
+
+set log_file = "${outdir}/CBIG_preproc_unit_tests_call_fMRI_preproc.log"
+
+set cmd = "${CBIG_CODE_DIR}/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/CBIG_preproc_fMRI_preprocess.csh"
+set cmd = "$cmd -s $curr_sub -output_d $outdir -anat_s ${curr_sub}_FS -anat_d"
+set cmd = "$cmd ${anat_dir} -fmrinii ${fmrinii_dir}/$curr_sub.fmrinii -config ${config_file} -nocleanup"
+set cmd = "$cmd | tee -a ${log_file}"
+$CBIG_CODE_DIR/setup/CBIG_pbsubmit -cmd "$cmd" -walltime 1:30:00 -mem 6G \
+-name "CBIG_preproc_unit_tests_call_fMRI_preproc"
diff --git a/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/unit_tests/single_subject/CBIG_preproc_unit_tests_call_fMRI_preproc_sdc_oppo_PED.csh b/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/unit_tests/single_subject/CBIG_preproc_unit_tests_call_fMRI_preproc_sdc_oppo_PED.csh
new file mode 100755
index 0000000..9c36726
--- /dev/null
+++ b/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/unit_tests/single_subject/CBIG_preproc_unit_tests_call_fMRI_preproc_sdc_oppo_PED.csh
@@ -0,0 +1,32 @@
+#!/bin/csh
+# Written by Shaoshi Zhang and CBIG under MIT license: https://github.com/ThomasYeoLab/CBIG/blob/master/LICENSE.md
+
+set outdir = $1   # Your output directory
+set fmrinii_dir = "$CBIG_TESTDATA_DIR/stable_projects/preprocessing"
+set fmrinii_dir = "$fmrinii_dir/CBIG_fMRI_Preproc2016/single_subject/scripts/fmrinii"
+set config_file = "$CBIG_CODE_DIR/stable_projects/preprocessing/CBIG_fMRI_Preproc2016"
+set config_file = "$config_file/unit_tests/single_subject/prepro_sdc_oppo_PED.config"
+set anat_dir = "$CBIG_TESTDATA_DIR/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/single_subject/data"
+
+set curr_sub = "sub-NDARBF851NH6"
+
+set curr_dir = `pwd`
+set work_dir = $HOME/cluster/ 
+
+echo $curr_dir
+echo $work_dir
+
+if (! -e $work_dir) then
+    mkdir -p $work_dir
+endif
+
+cd $work_dir
+
+set log_file = "${outdir}/CBIG_preproc_unit_tests_call_fMRI_preproc.log"
+
+set cmd = "${CBIG_CODE_DIR}/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/CBIG_preproc_fMRI_preprocess.csh"
+set cmd = "$cmd -s $curr_sub -output_d $outdir -anat_s ${curr_sub}_FS -anat_d"
+set cmd = "$cmd ${anat_dir} -fmrinii ${fmrinii_dir}/${curr_sub}_task-rest.fmrinii -config ${config_file} -nocleanup"
+set cmd = "$cmd | tee -a ${log_file}"
+$CBIG_CODE_DIR/setup/CBIG_pbsubmit -cmd "$cmd" -walltime 1:30:00 -mem 6G \
+-name "CBIG_preproc_unit_tests_call_fMRI_preproc"
diff --git a/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/unit_tests/single_subject/CBIG_preproc_unit_tests_cmp_in_fsaverage5.csh b/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/unit_tests/single_subject/CBIG_preproc_unit_tests_cmp_in_fsaverage5.csh
index 91f8f76..4e4f3a3 100755
--- a/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/unit_tests/single_subject/CBIG_preproc_unit_tests_cmp_in_fsaverage5.csh
+++ b/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/unit_tests/single_subject/CBIG_preproc_unit_tests_cmp_in_fsaverage5.csh
@@ -4,14 +4,14 @@
 set pipe_dir1 = "$CBIG_TESTDATA_DIR/stable_projects/preprocessing"
 set pipe_dir1 = "$pipe_dir1/CBIG_fMRI_Preproc2016/single_subject/data"
 set pipe_name1 = "gt"
-set pipe_stem1 = "_rest_skip4_stc_mc_residc_interp_FDRMS0.2_DVARS50_bp_0.009_0.08_fs6_sm6_fs5"
+set pipe_stem1 = "_rest_skip8_stc_mc_sdc_residc_interp_FDRMS0.3_DVARS60_bp_0.009_0.08_fs6_sm6_fs5"
 
 set pipe_dir2 = $1
 set pipe_name2 = "user-test"
 set pipe_stem2 = $2
 
-set subject_id = "Sub1116_Ses1"
-set runs = "002 003"
+set subject_id = "sub-NDARBF851NH6"
+set runs = "001 002"
 
 set output_dir = $3
 
diff --git a/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/unit_tests/single_subject/CBIG_preproc_unit_tests_cmp_in_mni2mm.csh b/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/unit_tests/single_subject/CBIG_preproc_unit_tests_cmp_in_mni2mm.csh
index 68eeb6d..445b7fd 100755
--- a/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/unit_tests/single_subject/CBIG_preproc_unit_tests_cmp_in_mni2mm.csh
+++ b/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/unit_tests/single_subject/CBIG_preproc_unit_tests_cmp_in_mni2mm.csh
@@ -4,14 +4,14 @@
 set pipe_dir1 = "$CBIG_TESTDATA_DIR/stable_projects/preprocessing"
 set pipe_dir1 = "$pipe_dir1/CBIG_fMRI_Preproc2016/single_subject/data"
 set pipe_name1 = "gt"
-set pipe_stem1 = "_rest_skip4_stc_mc_residc_interp_FDRMS0.2_DVARS50_bp_0.009_0.08_MNI2mm_sm6_finalmask"
+set pipe_stem1 = "_rest_skip8_stc_mc_sdc_residc_interp_FDRMS0.3_DVARS60_bp_0.009_0.08_MNI2mm_sm6_finalmask"
 
 set pipe_dir2 = $1
 set pipe_name2 = "user-test"
 set pipe_stem2 = $2
 
-set subject_id = "Sub1116_Ses1"
-set runs = "002 003"
+set subject_id = "sub-NDARBF851NH6"
+set runs = "001 002"
 
 set output_dir = $3
 
diff --git a/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/unit_tests/single_subject/CBIG_preproc_unit_tests_test_motion_filtering.csh b/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/unit_tests/single_subject/CBIG_preproc_unit_tests_test_motion_filtering.csh
new file mode 100755
index 0000000..25f748e
--- /dev/null
+++ b/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/unit_tests/single_subject/CBIG_preproc_unit_tests_test_motion_filtering.csh
@@ -0,0 +1,32 @@
+#!/bin/csh
+# Written by Jianzhong Chen and CBIG under MIT license: https://github.com/ThomasYeoLab/CBIG/blob/master/LICENSE.md
+
+set outdir = $1   # Your output directory
+set fmrinii_dir = "$CBIG_TESTDATA_DIR/stable_projects/preprocessing"
+set fmrinii_dir = "$fmrinii_dir/CBIG_fMRI_Preproc2016/single_subject/scripts/fmrinii"
+set config_file = "$CBIG_CODE_DIR/stable_projects/preprocessing/CBIG_fMRI_Preproc2016"
+set config_file = "$config_file/unit_tests/single_subject/prepro_motion_filtering.config"
+set anat_dir = "$CBIG_TESTDATA_DIR/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/single_subject/data"
+
+set curr_sub = "sub-NDARBF851NH6"
+
+set curr_dir = `pwd`
+set work_dir = $HOME/cluster/ 
+
+echo $curr_dir
+echo $work_dir
+
+if (! -e $work_dir) then
+    mkdir -p $work_dir
+endif
+
+cd $work_dir
+
+set log_file = "${outdir}/CBIG_preproc_unit_tests_test_motion_filtering.log"
+
+set cmd = "${CBIG_CODE_DIR}/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/CBIG_preproc_fMRI_preprocess.csh"
+set cmd = "$cmd -s $curr_sub -output_d $outdir -anat_s ${curr_sub}_FS -anat_d"
+set cmd = "$cmd ${anat_dir} -fmrinii ${fmrinii_dir}/${curr_sub}_task-rest.fmrinii -config ${config_file} -nocleanup"
+set cmd = "$cmd | tee -a ${log_file}"
+$CBIG_CODE_DIR/setup/CBIG_pbsubmit -cmd "$cmd" -walltime 1:30:00 -mem 6G \
+-name "CBIG_preproc_unit_tests_test_motion_filtering"
diff --git a/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/unit_tests/single_subject/README.md b/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/unit_tests/single_subject/README.md
index e64a04b..d210a9a 100644
--- a/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/unit_tests/single_subject/README.md
+++ b/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/unit_tests/single_subject/README.md
@@ -1,39 +1,64 @@
-This readme includes the steps about how to run the single subject preprocessing pipeline to check the correctness of code (this check is especially useful for admin when you are releasing some code). 
+This readme includes the steps about how to run the single subject preprocessing pipeline to check the correctness of code (this check is especially useful for admin when you are releasing some code). Notice that all the filenames and directories below work for CBIG lab only. It is assumed that the input surface data are in `fsaverage5` space.
 
-Notice that all the filenames and directories below work for CBIG lab only. It is assumed that the input surface data are in `fsaverage5` space.
+In this unit tests, there are in total 4 different test cases:
+
+1. Full preprocessing pipeline test (multi-echo acquisition; regression: GSR; spatial distortion correction: magnitude and phase difference image)
+2. Motion filtering (See [Respiratory pseudomotion filtering](https://github.com/YeoPrivateLab/CBIG_private/blob/develop/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/respiratory_pseudomotion_filtering.md) README)
+3. aCompCor test (regression: aCompCor)
+4. spatial distortion correction using opposite phase encoding direction fieldmaps
 
 ----
 
 ## Data
-
 - Data set
 
-The `CBIG_fMRI_Preproc2016` preprocessing scripts use the Brain Genomics Superstruct Project (GSP) data as a baseline data set. All data mentioned here are based on GSP data set.
+In this unit test, we are using 3 subjects from 3 datasets. 
 
-GSP data contain both structual MRI (T1) and functional MRI (T2*). All subjects (N = 1570) are healthy, young subjects (age: 18-35). The preprocessed (by `recon-all`) structual MRI data and raw functional MRI are in this folder:
+For test case **1**, the subject is acquired using a multi-band multi-echo protocol. The raw structural MRI data and raw functional MRI data are in this folder:
+`/mnt/isilon/CSC2/Yeolab/Data/MBME`
+only the day 1 session 1 data from subject TECH005 is used for test case **1**.
 
-```
-/mnt/eql/yeo1/data/GSP_release
-```
+For test case **2** and **4**, the subject is from the Healthy Brain Network (**HBN**).
 
+HBN data contain both structural MRI (T1) and functional MRI (T2*). All subjects (N = 2195) are young subjects (age: 6-22). The preprocessed (by `recon-all`) structural MRI data and raw functional MRI are in this folder:
+`/mnt/nas/CSC7/Yeolab/Data/HBN`
+where the folder names with `_FS` (e.g. `sub-NDARBF851NH6_FS`) meaning they are structual MRI data after `recon-all` processing, and the folder names without `_FS` (e.g. `sub-NDARBF851NH6`) meaning they are raw functional MRI data.
+
+For test case **3**, the subject is from the Brain Genomics Superstruct Project (**GSP**).
+
+GSP data contain both structual MRI (T1) and functional MRI (T2*). All subjects (N = 1570) are healthy, young subjects (age: 18-35). The preprocessed (by `recon-all`) structural MRI data and raw functional MRI are in this folder:
+`/mnt/isilon/CSC2/Yeolab/Data/GSP`
 where the folder names with `_FS` (e.g. `Sub1116_Ses1_FS`) meaning they are structual MRI data after `recon-all` processing, and the folder names without `_FS` (e.g. `Sub1116_Ses1`) meaning they are raw functional MRI data.
 
-- Preprocessed data (groud truth)
 
-The preprocessed subject (Sub1116_Ses1) for comparison is stored here
 
-```
-$CBIG_TESTDATA_DIR/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/single_subject/data
-```
+- Preprocessed data (ground truth)
+
+  * For test case 1 (full preprocessing pipeline), the preprocessed subject (`sub005`) for comparison is stored here
+
+  `$CBIG_TESTDATA_DIR/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/single_subject/data/sub005`
+
+  * For test case 2 (motion filtering), the preprocessed subject (`sub-NDARBF851NH6`) for comparison is stored here
+
+  `$CBIG_TESTDATA_DIR/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/single_subject/test_motion_filter/sub-NDARBF851NH6`
+
+  - For test case 3 (aCompcor), the preprocessed subject (``Sub1116_Ses1``) for comparison is stored here
+
+  `$CBIG_TESTDATA_DIR/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/single_subject/data/Sub1116_Ses1`
+  
+  - For test case 4 (SDC with opposite phase encoding direction fieldmaps), the preprocessed subject (`sub-NDARBF851NH6`) for comparison is stored here
+  
+  `$CBIG_TESTDATA_DIR/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/single_subject/data/sub-NDARBF851NH6`
 
 ----
 
 ## Code
+The users can use the following commands to call each of the 4 test cases:
 
-The users can use this command to call the preprocessing pipeline
+* Test case 1 (full preprocessing pipeline):
 
 ```
-$CBIG_CODE_DIR/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/unit_tests/single_subject/CBIG_preproc_unit_tests_call_fMRI_preproc.csh <preproc_out_dir>
+$CBIG_CODE_DIR/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/unit_tests/single_subject/CBIG_preproc_unit_tests_call_fMRI_preproc.sh <preproc_out_dir>
 ```
 
 The pipeline will be run with this configuration file
@@ -42,15 +67,58 @@ The pipeline will be run with this configuration file
 $CBIG_CODE_DIR/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/unit_tests/single_subject/prepro.config
 ```
 
-The estimated walltime and mem usage are ~1h and ~6G.
+* Test case 2 (motion filtering):
+
+```
+$CBIG_CODE_DIR/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/unit_tests/single_subject/CBIG_preproc_unit_tests_test_motion_filtering.csh <preproc_out_dir>
+```
+
+The pipeline will be run with this configuration file
+
+```
+$CBIG_CODE_DIR/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/unit_tests/single_subject/prepro_motion_filtering.config
+```
+
+* Test case 3 (aCompCor):
+
+```
+$CBIG_CODE_DIR/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/unit_tests/single_subject/CBIG_preproc_unit_tests_call_fMRI_preproc_aCompCor.csh
+```
+
+The pipeline will be run with this configuration file
+
+```
+$CBIG_CODE_DIR/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/unit_tests/single_subject/prepro_aCompCor.config
+```
+
+* Test case 4 (spatial distortion correction opposite phase encoding direction):
+
+```
+$CBIG_CODE_DIR/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/unit_tests/single_subject/CBIG_preproc_unit_tests_call_fMRI_preproc_sdc_oppo_PED.csh
+```
+
+The pipeline will be run with this configuration file
+
+```
+$CBIG_CODE_DIRstable_projects/preprocessing/CBIG_fMRI_Preproc2016/unit_tests/single_subject/prepro_sdc_oppo_PED.config
+```
+
+
+
+**Alternatively**, users can run these 4 test cases in one wrapper function as following in MATLAB.
+
+```
+runtests('CBIG_preproc_single_subject_unit_test')
+```
+
+The estimated wall time and mem usage are ~2.5h and ~6G.
 
 ----
 
 ## Results
+For test case 1 (full preprocessing pipeline), the users should compare **three** aspects of their results from the ground truth: (1) the time series in fsaverage surface space; (2) the time series in MNI 2mm volumetric space; (3) the functional connectivity matrices
 
-The users should compare **three** aspects of their results from the ground truth: (1) the timeseries in fsaverage surface space; (2) the timeseries in MNI 2mm volumetric space; (3) the functional connectivity matrices
-
-- Compare timeseries in fsaverage space
+- Compare time series in fsaverage space
 
 In a bash shell, use the following command
 
@@ -58,9 +126,9 @@ In a bash shell, use the following command
 $CBIG_CODE_DIR/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/unit_tests/single_subject/CBIG_preproc_unit_tests_cmp_in_fsaverage5.csh <preproc_out_dir> <file_stem_in_fsaverage5_space> <compare_out_dir>
 ```
 
-This command will generate the correlation between the timeseries in your preprocessed NIFTI file and the ground truth timeseries for each vertex in fsaverage5 space. You can check the histogram of the correlations (named as `<compare_out_dir>/Sub1116_Ses1/<run_number>/gt_user-test_corr_surf_hist.png`), as well as the plot of correlations projected on fsaverage5 space (named as `<compare_out_dir>/Sub1116_Ses1/<run_number>/gt_user-test_corr_surf.png`).
+This command will generate the correlation between the time series in your preprocessed NIFTI file and the ground truth time series for each vertex in fsaverage5 space. You can check the histogram of the correlations (named as `<compare_out_dir>/sub005/<run_number>/gt_user-test_corr_surf_hist.png`), as well as the plot of correlations projected on fsaverage5 space (named as `<compare_out_dir>/sub005/<run_number>/gt_user-test_corr_surf.png`).
 
-- Compare timeseries in MNI 2mm space
+- Compare time series in MNI 2mm space
 
 In a bash shell, use the following command:
 
@@ -68,7 +136,7 @@ In a bash shell, use the following command:
 $CBIG_CODE_DIR/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/unit_tests/single_subject/CBIG_preproc_unit_tests_cmp_in_mni2mm.csh <preproc_out_dir> <final_file_stem_in_MNI_space> <compare_out_dir>
 ```
 
-This command will generate the correlation between the timeseries in your preprocessed NIFTI file and the ground truth timeseries for each grey matter voxel in MNI 2mm space. You can check the histogram of the correlations (named as `<compare_out_dir>/Sub1116_Ses1/<run_number>/gt_user-test_corr_vol_gm_hist.png`), as well as visualize the spatial distribution of the correlations in the MNI space (named as `<compare_out_dir>/Sub1116_Ses1/<run_number>/gt_user-test_corr_vol_gm.nii.gz`) using freeview.
+This command will generate the correlation between the time series in your preprocessed NIFTI file and the ground truth time series for each grey matter voxel in MNI 2mm space. You can check the histogram of the correlations (named as `<compare_out_dir>/sub005/<run_number>/gt_user-test_corr_vol_gm_hist.png`), as well as visualize the spatial distribution of the correlations in the MNI space (named as `<compare_out_dir>/sub005/<run_number>/gt_user-test_corr_vol_gm.nii.gz`) using freeview.
 
 - Compare functional connectivity matrices
 
@@ -79,10 +147,18 @@ cd(fullfile(getenv('$CBIG_CODE_DIR'), 'stable_projects', 'preprocessing', 'CBIG_
 CBIG_preproc_FCmatrices_UnitTestCmp('<preproc_out_dir>', '<test_file_stem>');
 ```
 
-`preproc_out_dir` should store the directory path where the output data (generated by `CBIG_preproc_unit_tests_call_fMRI_preproc.csh`) is stored. `test_file_stem` is an optional argument. It is a string that is appended to the generated FC matrices filename. For example, a typical FC matrix file name could be `Sub1116_Ses1_rest_skip4_stc_mc_residc_interp_FDRMS0.2_DVARS50_bp_0.009_0.08_fs6_sm6_all2all.mat`. In this case, the `test_file_stem` would be `rest_skip4_stc_mc_residc_interp_FDRMS0.2_DVARS50_bp_0.009_0.08_fs6_sm6`. The default `test_file_stem` is `rest_skip4_stc_mc_residc_interp_FDRMS0.2_DVARS50_bp_0.009_0.08_fs6_sm6`.  If you successfully replicated the ground truth functional connectivity matrices, this command will output `"All correlation matrices are the same"`. A text file will named `inequal_corr_log.txt` will also be generated and stored in `preproc_out_dir`. It will display the differences between the user-generated results and the ground truth.
+`preproc_out_dir` should store the directory path where the output data (generated by `CBIG_preproc_unit_tests_call_fMRI_preproc.csh`) is stored. `test_file_stem` is an optional argument. It is a string that is appended to the generated FC matrices filename. For example, a typical FC matrix file name could be `sub005_rest_skip8_stc_mc_sdc_me_residc_interp_FDRMS0.3_DVARS60_bp_0.009_0.08_fs6_sm6_all2all.mat`. In this case, the `test_file_stem` would be `rest_skip8_stc_mc_sdc_me_residc_interp_FDRMS0.3_DVARS60_bp_0.009_0.08_fs6_sm6`. The default `test_file_stem` is `rest_skip8_stc_mc_sdc_me_residc_interp_FDRMS0.3_DVARS60_bp_0.009_0.08_fs6_sm6`.  If you successfully replicated the ground truth functional connectivity matrices, this command will output `"All correlation matrices are the same"`. A text file will named `inequal_corr_log.txt` will also be generated and stored in `preproc_out_dir`. It will display the differences between the user-generated results and the ground truth.
+
+For test case 2 (motion filtering), only the motion parameters are compared with the ground truth, which is stored here: `$CBIG_TESTDATA_DIR/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/single_subject/test_motion_filter/sub-NDARBF851NH6/bold/<run_number>/sub-NDARBF851NH6_bld001_rest_skip8_stc_mc.par`
+
+For test case 3 and 4 (aCompCor & spatial distortion correction opposite phase encoding direction), only the final volume is compared with the ground truth. 
+
+Specifically, for test case 3, the volumes that are checked include: `$CBIG_TESTDATA_DIR/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/single_subject/aCompCor/Sub1116_Ses1/bold/<run_number>/Sub1116_Ses1_bld<run_number>_rest_skip4_stc_mc_resid.nii.gz` 
+
+For test case 4, the volume that is checked include: `$CBIG_TESTDATA_DIR/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/single_subject/data/sub-NDARBF851NH6/bold/<run_number>/sub-NDARBF851NH6_bld001_rest_skip8_stc_mc_sdc.nii.gz`
 
 ----
 
 ## References
-
 - Holmes, Avram J., et al. "Brain Genomics Superstruct Project initial data release with structural, functional, and behavioral measures." Scientific data 2 (2015).
+- Alexander, L. et al. An open resource for transdiagnostic research in pediatric mental health and learning disorders. Scientific Data 4, 170181 (2017).
\ No newline at end of file
diff --git a/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/unit_tests/single_subject/prepro.config b/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/unit_tests/single_subject/prepro.config
index b8ab6b0..cf5ef6f 100755
--- a/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/unit_tests/single_subject/prepro.config
+++ b/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/unit_tests/single_subject/prepro.config
@@ -1,14 +1,16 @@
 ###CBIG fMRI preprocessing configuration file
 ###The order of preprocess steps is listed below
 ###Change: swap bandpass and regress order, regress_new (use BOLD_stem as MASK_stem), per_run, detrend (not trendout), censor
-CBIG_preproc_skip -skip 4
-CBIG_preproc_fslslicetimer -slice_order ${CBIG_CODE_DIR}/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/example_slice_order.txt
-CBIG_preproc_fslmcflirt_outliers -FD_th 0.2 -DV_th 50 -discard-run 50 -rm-seg 5 -spline_final
+CBIG_preproc_skip -skip 8
+CBIG_preproc_fslslicetimer -slice_timing /mnt/isilon/CSC1/Yeolab/CodeMaintenance/UnitTestData/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/single_subject/scripts/slice_timing/sub005_slice_timing_e1.txt,/mnt/isilon/CSC1/Yeolab/CodeMaintenance/UnitTestData/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/single_subject/scripts/slice_timing/sub005_slice_timing_e2.txt,/mnt/isilon/CSC1/Yeolab/CodeMaintenance/UnitTestData/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/single_subject/scripts/slice_timing/sub005_slice_timing_e3.txt
+CBIG_preproc_fslmcflirt_outliers -FD_th 0.3 -DV_th 60 -discard-run 50 -rm-seg 5
+CBIG_preproc_spatial_distortion_correction -fpm "mag+phasediff" -m /mnt/isilon/CSC1/Yeolab/CodeMaintenance/UnitTestData/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/single_subject/data/input_truncate/sub005/magnitude1.nii.gz -p /mnt/isilon/CSC1/Yeolab/CodeMaintenance/UnitTestData/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/single_subject/data/input_truncate/sub005/phase_diff.nii.gz -delta 2.46 -ees 0.25 -te 12
+CBIG_preproc_multiecho_denoise -echo_time 12,30.11,48.22 
 CBIG_preproc_bbregister
 CBIG_preproc_regress -whole_brain -wm -csf -motion12_itamar -detrend_method detrend -per_run -censor -polynomial_fit 1
-CBIG_preproc_censor 
-CBIG_preproc_bandpass -low_f 0.009 -high_f 0.08 -detrend 
-CBIG_preproc_QC_greyplot -FD_th 0.2 -DV_th 50
-CBIG_preproc_native2fsaverage -proj fsaverage6 -sm 6 -down fsaverage5
+CBIG_preproc_censor
+CBIG_preproc_bandpass -low_f 0.009 -high_f 0.08 -detrend
+CBIG_preproc_QC_greyplot -FD_th 0.3 -DV_th 60
+CBIG_preproc_native2fsaverage -proj fsaverage6 -sm 6 -down fsaverage5 
 CBIG_preproc_FC_metrics -Pearson_r -censor
 CBIG_preproc_native2mni_ants -sm_mask ${CBIG_CODE_DIR}/data/templates/volume/FSL_MNI152_masks/SubcorticalLooseMask_MNI1mm_sm6_MNI2mm_bin0.2.nii.gz -final_mask ${FSL_DIR}/data/standard/MNI152_T1_2mm_brain_mask_dil.nii.gz -iter_affine 5x5x2 -iter_SyN 5x5x2
diff --git a/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/unit_tests/single_subject/prepro_aCompCor.config b/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/unit_tests/single_subject/prepro_aCompCor.config
new file mode 100644
index 0000000..df0a4b4
--- /dev/null
+++ b/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/unit_tests/single_subject/prepro_aCompCor.config
@@ -0,0 +1,8 @@
+###CBIG fMRI preprocessing configuration file
+###The order of preprocess steps is listed below
+###Change: swap bandpass and regress order, regress_new (use BOLD_stem as MASK_stem), per_run, detrend (not trendout), censor
+CBIG_preproc_skip -skip 4
+CBIG_preproc_fslslicetimer -slice_order ${CBIG_CODE_DIR}/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/example_slice_order.txt
+CBIG_preproc_fslmcflirt_outliers -FD_th 0.2 -DV_th 50 -discard-run 50 -rm-seg 5 -spline_final
+CBIG_preproc_bbregister
+CBIG_preproc_regress -aCompCor -aCompCor_nPCs 5 -wm -wm_max_erode 3 -csf -csf_max_erode 1 -motion12_itamar -per_run
diff --git a/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/unit_tests/single_subject/prepro_motion_filtering.config b/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/unit_tests/single_subject/prepro_motion_filtering.config
new file mode 100644
index 0000000..94ec760
--- /dev/null
+++ b/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/unit_tests/single_subject/prepro_motion_filtering.config
@@ -0,0 +1,5 @@
+###CBIG fMRI preprocessing configuration file
+###The order of preprocess steps is listed below
+CBIG_preproc_skip -skip 8
+CBIG_preproc_fslslicetimer -slice_timing ${CBIG_TESTDATA_DIR}/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/single_subject/scripts/slice_timing/sub-NDARBF851NH6_task-rest_st.txt
+CBIG_preproc_fslmcflirt_outliers -FD_th 0.3 -DV_th 60 -discard-run 50 -rm-seg 5 -spline_final -low_f 0.31 -high_f 0.43
\ No newline at end of file
diff --git a/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/unit_tests/single_subject/prepro_sdc_oppo_PED.config b/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/unit_tests/single_subject/prepro_sdc_oppo_PED.config
new file mode 100755
index 0000000..9361cd8
--- /dev/null
+++ b/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/unit_tests/single_subject/prepro_sdc_oppo_PED.config
@@ -0,0 +1,4 @@
+CBIG_preproc_skip -skip 8
+CBIG_preproc_fslslicetimer -slice_timing ${CBIG_TESTDATA_DIR}/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/single_subject/scripts/slice_timing/sub-NDARBF851NH6_task-rest_st.txt
+CBIG_preproc_fslmcflirt_outliers -FD_th 0.3 -DV_th 60 -discard-run 50 -rm-seg 5 -spline_final
+CBIG_preproc_spatial_distortion_correction -fpm oppo_PED -j_minus ${CBIG_TESTDATA_DIR}/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/single_subject/data/input_truncate/sub-NDARBF851NH6_dir-AP_acq-fMRI_epi.nii.gz -j_plus ${CBIG_TESTDATA_DIR}/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/single_subject/data/input_truncate/sub-NDARBF851NH6_dir-PA_acq-fMRI_epi.nii.gz -j_minus_trt 0.0414992 -j_plus_trt 0.0414992 -ees .589987000 -te 30.00 
diff --git a/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/utilities/CBIG_preproc_compute_FDRMS_from_motion_parameters.m b/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/utilities/CBIG_preproc_compute_FDRMS_from_motion_parameters.m
new file mode 100644
index 0000000..ab23b77
--- /dev/null
+++ b/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/utilities/CBIG_preproc_compute_FDRMS_from_motion_parameters.m
@@ -0,0 +1,54 @@
+function FDRMS = CBIG_preproc_compute_FDRMS_from_motion_parameters(motion)
+
+% FDRMS = CBIG_ABCD_proc_compute_FDRMSinson(motion)
+% 
+% This function compute the FDRMS (Jenkinson) from the 6 motion parameters
+% 
+% Inputs:
+%   - motion:
+%     #frame*6 matrix. The 6 motion parameters. 
+%     The first 3 should be rotation in radians, the last 3 should be translation in mm.
+%
+% Oupouts:
+%   - FDRMS:
+%     #frame * 1 vector. reletive FDRMS for each frame
+%
+% Reference: Yan, Chao-Gan, et al. 
+% "A comprehensive assessment of regional variation in the impact of head micromovements on functional connectomics." 
+% Neuroimage 76 (2013): 183-201.
+%
+% Written by Jianzhong Chen and CBIG under MIT license: https://github.com/ThomasYeoLab/CBIG/blob/master/LICENSE.md
+
+T = cell(size(motion,1),1);
+for i = 1:size(motion,1)
+    alpha = motion(i,1);
+    beta = motion(i,2);
+    gamma = motion(i,3);
+    R1 = [1 0 0 0
+        0 cos(alpha) sin(alpha) 0
+        0 -sin(alpha) cos(alpha) 0
+        0 0 0 1];
+    R2 = [cos(beta) 0 sin(beta) 0
+        0 1 0 0
+        -sin(beta) 0 cos(beta) 0
+        0 0 0 1];
+    R3 = [cos(gamma) sin(gamma) 0 0
+        -sin(gamma) cos(gamma) 0 0
+        0 0 1 0
+        0 0 0 1];
+    t = [1 0 0 motion(i,4)
+        0 1 0 motion(i,5)
+        0 0 1 motion(i,6)
+        0 0 0 1];
+    T{i} = t*R1*R2*R3;
+end
+
+FDRMS = zeros(length(T),1);
+for i = 2:length(T)
+    T_t = T{i}/(T{i-1}) - eye(4);
+    A = T_t(1:3,1:3);
+    b = T_t(1:3,4);
+    FDRMS(i) = sqrt(1/5*80*80*trace(A*A')+b'*b);
+end
+        
+end
diff --git a/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/utilities/CBIG_preproc_compute_FDRMS_wrapper.sh b/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/utilities/CBIG_preproc_compute_FDRMS_wrapper.sh
new file mode 100755
index 0000000..8162053
--- /dev/null
+++ b/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/utilities/CBIG_preproc_compute_FDRMS_wrapper.sh
@@ -0,0 +1,36 @@
+#!/bin/bash
+# Written by Jianzhong Chen and CBIG under MIT license: https://github.com/ThomasYeoLab/CBIG/blob/master/LICENSE.md
+
+bold_file=$1
+outdir=$2
+tmp_dir=$3
+low_f=$4
+high_f=$5
+
+root_dir=`dirname "$(readlink -f "$0")"`
+if [ -z "$bold_file" ] || [ -z "$outdir" ] || [ -z "$outdir" ]; then
+    echo "bold_file, outdir, or tmp_dir cannot be empty" 1>&2
+    exit 1
+fi
+
+if [ -z "$low_f" ];then
+    echo "running fsl_motion_outliers to compute FDRMS"
+    fsl_motion_outliers -i $bold_file -o $outdir/${bold_file}_motion_outliers_confound_FDRMS \
+					    -s $outdir/${bold_file}_motion_outliers_FDRMS -p $outdir/${bold_file}_motion_outliers_FDRMS \
+					    -t $tmp_dir --fdrms
+else
+    echo "running respiratory pseudomotion filtering"
+    mkdir -p $tmp_dir
+    refnum=`$FSLDIR/bin/fslval $bold_file dim4`;
+    refnum=`echo $refnum / 2 | bc`;
+    file_base=`basename $bold_file`
+    $FSLDIR/bin/mcflirt -in $bold_file -out $tmp_dir/$file_base -mats -plots -refvol $refnum -rmsrel -rmsabs
+    motion_file=$tmp_dir/${file_base}.par
+    motion_regressors=${bold_file}_mc.par
+    save_FD=$outdir/${file_base}_motion_outliers_FDRMS
+    matlab -nodesktop -nosplash -nodisplay -r " addpath $root_dir; CBIG_preproc_filter_out_respiratory_pseudomotion( \
+    '$bold_file', '$motion_file', '$motion_regressors', '$save_FD', '$low_f', '$high_f'); exit; "
+    rm -rf $tmp_dir/
+fi
+
+exit 0
diff --git a/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/utilities/CBIG_preproc_filter_out_respiratory_pseudomotion.m b/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/utilities/CBIG_preproc_filter_out_respiratory_pseudomotion.m
new file mode 100644
index 0000000..eaa98fc
--- /dev/null
+++ b/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/utilities/CBIG_preproc_filter_out_respiratory_pseudomotion.m
@@ -0,0 +1,63 @@
+function CBIG_preproc_filter_out_respiratory_pseudomotion(bold_file, ...
+    motion_file, motion_regressors, out_FD, f_min, f_max)
+
+% MR_filt = CBIG_preproc_motion_filtering(motion, TR, f_min, f_max)
+%
+% This function filters out respiratory pseudomotion from motion parameters
+%
+% Inputs:
+%
+%   - bold_file:
+%     Path of the fMRI bold_file. We need this file to compute TR (Repetition time).
+%
+%   - motion_file:
+%     A text file contains the N by 6 matrix of the motion parameters. N is
+%     the number of frames. The first 3 columns should be rotation in radians, 
+%     the last 3 columns should be translation in mm.
+%
+%   - motion_regressors
+%     A text file contains the N by 6 matrix of the motion parameters. Both
+%     this file and motion_file contains motion parameters by running
+%     mcflirt on each run separately. The difference is that the motion
+%     parameters in motion_file use the middle frame of each run as
+%     reference frame. The motion parameters in this file use the first
+%     frame of first run as reference.
+%
+%   - out_FD:
+%     Path of the output FDRMS file after motion filtering. A text file
+%     contrain the FDRMS values for each frame.
+%
+%   - f_min & f_max:
+%     Both f_min and f_max should be string that can be converted to numbers or 
+%     empty string. E.g., '0.3' or ''
+%     f_min is the start freuqency of respiration anf f_max is the stop
+%     frequency of the respiration. If f_max is empty, we use low pass filter 
+%     and f_min is the stop frequency; if both f_min and f_max are provided
+%     we use bandstop filter and the stopband is [f_min,f_max]
+%
+% Written by Jianzhong Chen and CBIG under MIT license: https://github.com/ThomasYeoLab/CBIG/blob/master/LICENSE.md
+%
+% Reference: Fair et al., Correction of respiratory artifacts in MRI head motion parameters
+
+%% input sanity check
+TR = CBIG_preproc_infer_TR(bold_file);
+
+if strcmp(f_min, '')
+    error('f_min cannnot be empty');
+end
+
+%% load motion file and filter out respiratory pseudomotion
+motion = load(motion_file);
+motion_filt = CBIG_preproc_motion_filtering(motion, TR, f_min, f_max);
+
+%% compute FDRMS from motion parameters and save out results
+FDRMS = CBIG_preproc_compute_FDRMS_from_motion_parameters(motion_filt);
+dlmwrite(out_FD, FDRMS, '\n');
+
+%% filter out respiratory pseudomotion from motion regressors
+motion = load(motion_regressors);
+motion_filt = CBIG_preproc_motion_filtering(motion, TR, f_min, f_max);
+copyfile(motion_regressors, [motion_regressors '.unfiltered']);
+dlmwrite(motion_regressors, motion_filt, "  ");
+
+end
diff --git a/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/utilities/CBIG_preproc_infer_TR.m b/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/utilities/CBIG_preproc_infer_TR.m
new file mode 100644
index 0000000..6a74dc5
--- /dev/null
+++ b/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/utilities/CBIG_preproc_infer_TR.m
@@ -0,0 +1,26 @@
+function tr = CBIG_preproc_infer_TR(input_fMRI)
+
+% tr = CBIG_preproc_infer_TR(input_vol)
+% 
+% This function computes the TR (repetition time) of fMRI data
+% 
+% Inputs:
+%     - input_vol:
+%       Full path of the input fMRI data
+%
+% Outputs:
+%     - tr
+%       TR of the input fMRI in seconds
+% 
+% Written by Jianzhong Chen and CBIG under MIT license: https://github.com/ThomasYeoLab/CBIG/blob/master/LICENSE.md
+if ~contains(input_fMRI, '.dtseries.nii')
+    % if input_vol is a nifti file
+    mri = MRIread(input_fMRI,1);
+    tr = mri.tr/1000;
+else
+    % if input_vol is a cifti file
+    mri = ft_read_cifti(input_fMRI,'readdata',false);
+    tr = mri.time(2) - mri.time(1);
+end
+
+end
\ No newline at end of file
diff --git a/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/utilities/CBIG_preproc_motion_filtering.m b/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/utilities/CBIG_preproc_motion_filtering.m
new file mode 100644
index 0000000..49f4842
--- /dev/null
+++ b/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/utilities/CBIG_preproc_motion_filtering.m
@@ -0,0 +1,77 @@
+function motion_filt = CBIG_preproc_motion_filtering(motion, TR, f_min, f_max)
+
+% MR_filt = CBIG_preproc_motion_filtering(motion, TR, f_min, f_max)
+%
+% This function filters out respiratory pseudomotion from motion estimates
+%
+% Inputs:
+%
+%   - motion:
+%     N by 6 matrix of the motion estimates. N is the number of frames
+%
+%   - TR:
+%     TR of the fMRI image in seconds.
+%
+%   - f_max & f_min:
+%     If f_max is empty, we use low pass filter and f_min is the stop frequency;
+%     if both f_min and f_max are provided we use bandstop filter and the
+%     stopband is [f_min,f_max]
+%
+% Outputs:
+%
+%   - motion_filt
+%     N by 6 filtered motion estimates. N is the number of frames
+%
+% Written by Jianzhong Chen and CBIG under MIT license: https://github.com/ThomasYeoLab/CBIG/blob/master/LICENSE.md
+%
+% Reference: Fair et al., Correction of respiratory artifacts in MRI head motion estimates
+
+%% input sanity check
+order = 4;
+f_min = str2num(f_min);
+f_max = str2num(f_max);
+
+if isempty(f_min)
+    error('f_min (start frequency of respiration) cannot be empty');
+end
+
+if isempty(f_max)
+    filt_type = 'lp';
+else
+    filt_type = 'notch';
+end
+
+if ~isempty(f_max) && f_min >= f_max
+    error('f_min should be less than f_max')
+end
+
+%% filter design
+fs = 1/TR;
+fNy = fs/2;
+
+switch filt_type
+
+    case 'lp'
+
+        Wn = f_min/fNy;
+        b_filt = fir1(order, Wn, 'low');
+        a_filt = 1;
+        num_f_apply = 0;
+
+    case 'notch'
+
+        W_notch = [f_min,f_max]/fNy;
+        Wn = mean(W_notch);
+        bw = diff(W_notch);
+        [b_filt, a_filt] = iirnotch(Wn, bw);
+        num_f_apply = floor(order / 2); % if order<4 apply filter 1x, if order=4 2x, if order=6 3x
+
+end
+
+%% Read individual movement regressors files
+motion_filt = filtfilt(b_filt,a_filt,motion);
+for i=1:num_f_apply-1
+    motion_filt = filtfilt(b_filt,a_filt,motion_filt);
+end
+
+end
\ No newline at end of file
diff --git a/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/utilities/CBIG_preproc_multiecho_QC_greyplot.m b/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/utilities/CBIG_preproc_multiecho_QC_greyplot.m
new file mode 100755
index 0000000..711f436
--- /dev/null
+++ b/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/utilities/CBIG_preproc_multiecho_QC_greyplot.m
@@ -0,0 +1,126 @@
+function CBIG_preproc_multiecho_QC_greyplot(before_MEICA, after_MEICA, FDpath, output)
+
+% CBIG_preproc_multiecho_QC_greyplot(before_MEICA, after_MEICA, FDpath, subject_dir, bold)
+%
+% This function generates greyplot for multi-echo QC. Three sub-plots will
+% be generated. 1)greyplot for image before MEICA, 2)greyplot for image
+% after MEICA, and 3)FD 
+%
+% Inputs:
+%     - before_MEICA:
+%       This is tedana output without ME-ICA (without denoising).
+%       The absolute file path of nifti file (full path).
+%       This should be found in tedana output folder with exact same name 
+%       in the following example.
+%       E.g. '<path-to-image>/desc-optcom_bold.nii.gz'
+%     - after_MEICA:
+%       This is tedana output with ME-ICA (with denoising).
+%       The absolute file path of nifti file (full path).
+%       This should be found in tedana output folder with exact same name 
+%       in the following example.
+%       E.g. '<path-to-image>/desc-optcomDenoised_bold.nii.gz'
+%     - FDpath:
+%       The absolute file path to FDRMS file
+%       E.g. '<path-to-image>/sub005_bld001_e1_rest_skip4_stc_motion_outliers_FDRMS'
+%     - GM_mask:
+%       The absolute file path to grey matter brain mask.
+%       E.g. '<path-to-image>/sub005.func.gm.nii.gz'
+%     - output:
+%       Absolute file path and file name to output, which is the QC greyplot
+%       E.g. '<path-to-output>/sub005_bold001_greyplot.png'
+%
+% Example:
+%     CBIG_preproc_multiecho_QC_greyplot(...
+%     '<path-to-image>/desc-optcom_bold.nii.gz', ...
+%     '<path-to-image>/desc-optcomDenoised_bold.nii.gz', ...
+%     '<path-to-FD>/sub005_bld001_e1_rest_skip4_stc_motion_outliers_FDRMS', ...
+%     '<path-to-gm_mask>/sub005.func.gm.nii.gz','<path-to-output>/sub005_bold001_greyplot.png')
+% 
+% Written by Lyu Xingyu and CBIG under MIT license: https://github.com/ThomasYeoLab/CBIG/blob/master/LICENSE.md
+
+before_MEICA = MRIread(before_MEICA);
+after_MEICA = MRIread(after_MEICA);
+before_MEICA = before_MEICA.vol;
+after_MEICA = after_MEICA.vol;
+before_MEICA = reshape(before_MEICA, ...
+    size(before_MEICA,1)*size(before_MEICA,2)*size(before_MEICA,3),size(before_MEICA,4));
+after_MEICA = reshape(after_MEICA,size(after_MEICA,1)*size(after_MEICA,2)*size(after_MEICA,3),size(after_MEICA,4));
+GS = mean(before_MEICA, 1);
+FD = transpose(load(FDpath));
+
+subplot(3,1,1);
+xtick_vec = int16(linspace(1, length(FD), 6));
+plot(1:length(FD), FD, 'r', 'LineWidth', 2);
+ax = subplot(3,1,1);
+set(ax, 'Units', 'points', 'YTick', [0 roundn(min((max(FD)/2),0.25),-2) roundn(min(max(FD),0.5),-2)], ...
+    'YTickLabel', {'0', roundn(min((max(FD)/2),0.25),-2), roundn(min(max(FD),0.5),-2)}, ...
+    'YLim', [0 roundn(min(max(FD),0.5),-2)]);
+set(ax, 'FontSize', 18);
+set(ax, 'Position', [130 600 600 55]);
+set(ax, 'Xtick', xtick_vec, 'XTickLabel', ''); 
+xlim([1 length(FD)]);
+set(get(gca, 'YLabel'), 'String', '\color{red}FD');
+set(get(gca, 'YLabel'), 'FontSize', 18);
+set(gca, 'LineWidth', 2);
+set(gca, 'TickDir', 'out', 'box', 'off');
+
+subplot(3,1,2);
+STD_gm = mean(std(before_MEICA, [], 2));
+before_MEICA_zscore = bsxfun(@minus, before_MEICA, mean(before_MEICA, 2));
+before_MEICA_zscore = bsxfun(@rdivide, before_MEICA_zscore, std(before_MEICA, [], 2));
+before_MEICA_zscore = transpose(detrend(before_MEICA_zscore'));
+before_MEICA = before_MEICA_zscore * STD_gm;
+corr_arr = zeros(1,length(before_MEICA));
+for i = 1:size(before_MEICA)
+    corr_arr(i) = corr(transpose(GS), transpose(before_MEICA(i, :)));
+end
+[~, I1] = sort(corr_arr, 'descend');
+before_MEICA = before_MEICA(I1, :);
+before_MEICA(any(isnan(before_MEICA), 2), :) = [];
+imagesc(before_MEICA, [-20 20]); 
+col = colorbar;
+colormap gray
+set(col, 'FontSize', 18);
+ax = subplot(3,1,2);
+set(ax, 'Units', 'points')
+set(ax, 'FontSize', 18);
+set(ax, 'Position', [130 325 600 200]);
+set(ax, 'Xtick', xtick_vec);
+set(ax, 'YTick', [])
+xlim([1 length(FD)]);
+set(get(ax, 'YLabel'), 'String', 'gm+wm+csf');
+set(get(ax, 'YLabel'), 'FontSize', 18);
+set(get(ax, 'title'), 'String', ' before MEICA');
+set(ax, 'TickDir', 'out');
+
+
+subplot(3,1,3);
+STD_gm = mean(std(after_MEICA, [], 2));
+after_MEICA_zscore = bsxfun(@minus, after_MEICA, mean(after_MEICA, 2));
+after_MEICA_zscore = bsxfun(@rdivide, after_MEICA_zscore, std(after_MEICA, [], 2));
+after_MEICA_zscore = transpose(detrend(after_MEICA_zscore'));
+after_MEICA = after_MEICA_zscore * STD_gm;
+
+after_MEICA = after_MEICA(I1, :);
+after_MEICA(any(isnan(after_MEICA), 2), :) = [];
+imagesc(after_MEICA, [-20 20]); 
+col = colorbar;
+colormap gray
+ay = subplot(3,1,3);
+set(ay, 'Units', 'points')
+set(ay, 'FontSize', 18);
+set(ay, 'Position', [130 50 600 200]);     
+set(ay, 'Xtick', xtick_vec);
+set(ay, 'YTick', [])
+xlim([1 length(FD)]);
+set(get(ay, 'YLabel'), 'String', 'gm+wm+csf');
+set(get(ay, 'YLabel'), 'FontSize', 18);
+set(get(ay, 'title'), 'String', 'after MEICA');
+set(ay, 'TickDir', 'out');
+
+set(gcf, 'units', 'inch', 'position', [0 0 12 10]);
+set(gcf, 'color', 'w');
+Image = getframe(gcf);
+imwrite(Image.cdata, fullfile(output));
+end
+
