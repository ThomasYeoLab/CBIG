function CBIG_MSHBM_avg_profiles(seed_mesh,targ_mesh,out_dir,num_sub,num_sess)

% CBIG_MSHBM_avg_profiles(seed_mesh,targ_mesh,out_dir,num_sub,num_sess)
% This function will be used to average profiles across all the subjects
% and all the sessions. Please note that the profiles of sub-sessions will 
% not be included. 
%
% Input:
%   - seed_mesh:
%
%     The resolution of seed regions, e.g. 'fsaverage3' or 'fs_LR_900'. 
%     If the data is in fsaverage surface (e.g. fsaverage5/6), the 
%     seed_mesh should be defined by fsaverage surface in the same 
%     resolution as the data space, or lower resolution, e.g. fsaverage3/4. 
%     We also allow the data in fs_LR_32k, the only available seed_mesh is 
%     fs_LR_900, which is generated by CBIG lab.
%
%   - targ_mesh:
%
%     The surface space of fMRI data, e.g. 'fsaverage5' or 'fs_LR_32k'.
%     The data is allowed to be in either fsaverage space (e.g. 
%     fsaverage4/5/6, fsaverage) or fs_LR_32k. Note that fs_LR_164k is not
%     available.
%
%   - out_dir:
%     The generated profiles are assumed to exist in the following files
%     for each subject and each session.
%     For data in fsaverage space:
%     <out_dir>/profiles/sub<sub_id>/sess<sess_id>/lh.sub<sess_id>_sess...
%         <sess_id>_<targ_mesh>_roi<seed_mesh>.surf2surf_profile.nii.gz
%     <out_dir>/profiles/sub<sub_id>/sess<sess_id>/lh.sub<sess_id>_sess...
%         <sess_id>_<targ_mesh>_roi<seed_mesh>.surf2surf_profile.nii.gz
%     For data in fs_LR_32k space:
%     <out_dir>/profiles/sub<sub_id>/sess<sess_id>/sub<sess_id>_sess...
%         <sess_id>_<targ_mesh>_roi<seed_mesh>.surf2surf_profile.mat
%
%   - num_sub: (string)
%
%     The total number of subjects, e.g. '30'.
%
%   - num_sess: (string)
%
%     The maximum number of sessions, e.g. '4'. If the subjects have
%     different number of sessions, num_sess should be the maximum number.
%     We will skip the session if the subject doesn't have the profile of
%     it.
%
% Output:
%
%   The averaged profiles will be saved in the following files:
%   For data in fsaverage space:
%   <out_dir>/profiles/avg_profile/lh_<targ_mesh>_roi<seed_mesh>_avg_profile.nii.gz
%   <out_dir>/profiles/avg_profile/rh_<targ_mesh>_roi<seed_mesh>_avg_profile.nii.gz
%   For data in fs_LR_32k space:
%   <out_dir>/profiles/avg_profile/<targ_mesh>_roi<seed_mesh>_avg_profile.nii.gz
%
% Example:
% CBIG_MSHBM_avg_profiles('fsaverage3','fsaverage5','./test_output','30','4');
%
% Written by Ru(by) Kong and CBIG under MIT license: https://github.com/ThomasYeoLab/CBIG/blob/master/LICENSE.md




if(~exist(fullfile(out_dir,'profiles','avg_profile')))
    mkdir(fullfile(out_dir,'profiles','avg_profile'));
end

num_data = 0;

for sub = 1:str2num(num_sub)
    for sess = 1:str2num(num_sess)
        sub = num2str(sub);
        sess = num2str(sess);
        
        out_profile_dir = fullfile(out_dir,'profiles',['sub' sub],['sess' sess]);       
        
        if(strcmp(targ_mesh,'fs_LR_32k'))
            avg_profile_file = fullfile(out_dir,'profiles','avg_profile',...
                [targ_mesh '_roi' seed_mesh '_avg_profile.mat']);
            
            profile_file = fullfile(out_profile_dir,['sub' sub '_sess' sess '_'...
                targ_mesh '_roi' seed_mesh '.surf2surf_profile.mat']);
           
            if(exist(profile_file))
                num_data = num_data + 1;
        
                profile_data = load(profile_file);

                if(num_data == 1)
                   avg_profile = profile_data;
                else
                   avg_profile.profile_mat = avg_profile.profile_mat + profile_data.profile_mat;
                end
            else
                fprintf('Skip: %s \n',profile_file);
            end
        
        elseif(~isempty(strfind(targ_mesh,'fsaverage'))) 
            lh_avg_profile_file = fullfile(out_dir,'profiles','avg_profile',...
                ['lh_' targ_mesh '_roi' seed_mesh '_avg_profile.nii.gz']);
            rh_avg_profile_file = fullfile(out_dir,'profiles','avg_profile',...
                ['rh_' targ_mesh '_roi' seed_mesh '_avg_profile.nii.gz']);
            
            lh_profile_file = fullfile(out_profile_dir,['lh.sub' sub '_sess' sess '_'...
                targ_mesh '_roi' seed_mesh '.surf2surf_profile.nii.gz']);
            rh_profile_file = fullfile(out_profile_dir,['rh.sub' sub '_sess' sess '_'...
                targ_mesh '_roi' seed_mesh '.surf2surf_profile.nii.gz']);
            
            if(exist(lh_profile_file) && exist(rh_profile_file))
                num_data = num_data + 1;

                lh_data = MRIread(lh_profile_file);
                rh_data = MRIread(rh_profile_file);
                if(num_data == 1)
                    lh_avg_profile = lh_data;
                    rh_avg_profile = rh_data;
                else
                    lh_avg_profile.vol = lh_avg_profile.vol + lh_data.vol;
                    rh_avg_profile.vol = rh_avg_profile.vol + rh_data.vol;
                end
            else
                fprintf('Skip: %s \n',lh_profile_file);
                fprintf('Skip: %s \n',rh_profile_file);
           
            end
                
                
        
        else
            error(['Unknown mesh type. Only fsaverage surface types,' ...
                'for example, fsaverage 5/6 and fs_LR_32k will be allowed.'])
        end
    end
end

if(strcmp(targ_mesh,'fs_LR_32k'))
    profile_mat = avg_profile.profile_mat./num_data;
    save(avg_profile_file,'profile_mat','-v7.3');
    
elseif(~isempty(strfind(targ_mesh,'fsaverage'))) 
    lh_avg_profile.vol = lh_avg_profile.vol./num_data;
    rh_avg_profile.vol = rh_avg_profile.vol./num_data;
    
    MRIwrite(lh_avg_profile,lh_avg_profile_file);
    MRIwrite(rh_avg_profile,rh_avg_profile_file);

end