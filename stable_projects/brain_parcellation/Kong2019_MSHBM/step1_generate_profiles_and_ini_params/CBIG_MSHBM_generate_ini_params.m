function CBIG_MSHBM_generate_ini_params(seed_mesh, targ_mesh, num_clusters, num_initialization, out_dir)

% CBIG_MSHBM_generate_ini_params(seed_mesh, targ_mesh, num_clusters, num_initialization, out_dir)
% This function will be used to generate initialization parameters. We will
% apply Yeo2011 clustering algorithm on group averaged profiles generated
% by CBIG_MSHBM_avg_profiles.m.
%
% Input:
%
%   - seed_mesh:
%
%     The resolution of seed regions, e.g. 'fsaverage3' or 'fs_LR_900'. 
%     If the data is in fsaverage surface (e.g. fsaverage5/6), the 
%     seed_mesh should be defined by fsaverage surface in the same 
%     resolution as the data space, or lower resolution, e.g. fsaverage3/4. 
%     We also allow the data in fs_LR_32k, the only available seed_mesh is 
%     fs_LR_900, which is generated by CBIG lab.
%
%   - targ_mesh:
%
%     The surface space of fMRI data, e.g. 'fsaverage5' or 'fs_LR_32k'.
%     The data is allowed to be in either fsaverage space (e.g. 
%     fsaverage4/5/6, fsaverage) or fs_LR_32k. Note that fs_LR_164k is not
%     available.
%
%   - num_clusters:
%
%     The number of networks of clustering, e.g. '17'.
%
%   - num_initialization:
%
%     The number of random initialization, e.g. '1000'.
%
%   - out_dir:
%
%     The clustering algoritm will be performed on the averaged profiles
%     saved in the following files:
%     For data in fsaverage space:
%     <out_dir>/profiles/avg_profile/lh_<targ_mesh>_roi<seed_mesh>_avg_profile.nii.gz
%     <out_dir>/profiles/avg_profile/rh_<targ_mesh>_roi<seed_mesh>_avg_profile.nii.gz
%     For data in fs_LR_32k space:
%     <out_dir>/profiles/avg_profile/<targ_mesh>_roi<seed_mesh>_avg_profile.nii.gz
%
% Examples:
% CBIG_MSHBM_generate_ini_params('fsaverage3','fsaverage5','17','2','./test_output');
%
% Written by Ru(by) Kong and CBIG under MIT license: https://github.com/ThomasYeoLab/CBIG/blob/master/LICENSE.md


if(~exist(fullfile(out_dir,'group')))
    mkdir(fullfile(out_dir,'group'));
end

output_file = fullfile(out_dir,'group','group.mat');

if(strcmp(targ_mesh,'fs_LR_32k'))
    avg_profile_file = fullfile(out_dir,'profiles','avg_profile',...
        [targ_mesh '_roi' seed_mesh '_avg_profile.mat']);
    
    CBIG_VonmisesSeriesClustering_fix_bessel_randnum_bsxfun(targ_mesh, '', ...
        num_clusters, output_file, avg_profile_file, 'NONE', 0, ...
        num_initialization, 0, 100, 1);
    
    % Reorganize output variables
    if(exist(output_file))
        load(output_file);
        clustered.mtc = mtc;
        clustered.lowerbound = lowerbound;
        clustered.lambda = lambda;
        save(output_file,'lh_labels','rh_labels','clustered');
    else
        error('could not find clustering results group.mat')
    end
    % Visualization
    CBIG_DrawSurfaceMaps_fslr(lh_labels,rh_labels, 'fs_LR_32k', 'inflated');
    
elseif(~isempty(strfind(targ_mesh,'fsaverage'))) 
    lh_avg_profile_file = fullfile(out_dir,'profiles','avg_profile',...
        ['lh_' targ_mesh '_roi' seed_mesh '_avg_profile.nii.gz']);
    rh_avg_profile_file = fullfile(out_dir,'profiles','avg_profile',...
        ['rh_' targ_mesh '_roi' seed_mesh '_avg_profile.nii.gz']);
    
    CBIG_VonmisesSeriesClustering_fix_bessel_randnum_bsxfun(targ_mesh, ...
        'cortex', num_clusters, output_file, lh_avg_profile_file, ...
        rh_avg_profile_file, 0, num_initialization, 0, 100, 1);

    % Reorganize output variables
    if(exist(output_file))
        load(output_file);
        clustered.mtc = mtc;
        clustered.lowerbound = lowerbound;
        clustered.lambda = lambda;
        save(output_file,'lh_labels','rh_labels','clustered');
    else
        error('could not find clustering results group.mat')
    end
    
    % Visualization
    CBIG_DrawSurfaceMaps(lh_labels, rh_labels, targ_mesh, 'inflated');

else
    error('Unknown mesh type. Only fsaverage surface types, for example, fsaverage5/6 and fs_LR_32k will be allowed.')
end
