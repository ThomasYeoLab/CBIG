#!/bin/bash

# This script register existing folders to the user csv files. 
# Written by XUE Aihuiping and CBIG under MIT license: https://github.com/ThomasYeoLab/CBIG/blob/master/LICENSE.md

record_dir="/mnt/isilon/CSC1/Yeolab/CodeMaintenance/Records"
dataset_csv="${record_dir}/datasets_info/dataset_groups.csv"
options_file="${record_dir}/datasets_info/user_choices.txt"
user=`whoami`
user_csv="${record_dir}/user_datasets/$user.csv"

while IFS=',' read -r col1 col2; do
    datasets+=("$col1")
    groupnames+=("$col2")
done < "$dataset_csv"

# Sort the options by the frequncy of a dataset been chosen. So popular datasets will be at the top.
option_counts=$(sort "$options_file" | uniq -c | sort -nr)
frequencies=()
option_names=()

while read -r line; do
    frequency=$(echo "$line" | awk '{print $1}')
    option_name=$(echo "$line" | awk '{$1=""; print $0}' | xargs)  # Remove leading spaces
    frequencies+=("$frequency")
    option_names+=("$option_name")
done <<< "$option_counts"

declare -A option_to_frequency
for ((i = 0; i < ${#option_names[@]}; i++)); do
    option_to_frequency["${option_names[$i]}"]="${frequencies[$i]}"
done

sorted_data=($(for ((i = 0; i < ${#datasets[@]}; i++)); do
    dataset="${datasets[$i]}"
    groupname="${groupnames[$i]}"
    frequency="${option_to_frequency[$dataset]}"
    echo "${frequency}:${dataset}:${groupname}"
done | sort -t: -k1,1nr))

sorted_datasets=()
sorted_groupnames=()

for element in "${sorted_data[@]}"; do
    IFS=":" read -r frequency dataset groupname <<< "$element"
    sorted_datasets+=("$dataset")
    sorted_groupnames+=("$groupname")
done

datasets=("Stop")
datasets+=("${sorted_datasets[@]}")
groupnames=("NA")
groupnames+=("${sorted_groupnames[@]}")

# Calculate max_display based on terminal window size
rows=$(tput lines)
max_display=$((rows - 3))  # Adjust this value as needed

selected=0
scroll=0
selections=""

print_menu() {
    clear
    echo "Choose the dataset/datasets you want to register (select Stop to finish):"
    echo "Current choice:${selections}"
    for i in $(seq $scroll $(($scroll + max_display - 1))); do
        if [ $i -eq $selected ]; then
            echo " > ${datasets[$i]}"
        else
            echo "   ${datasets[$i]}"
        fi
    done
}

print_menu

while true; do
    read -sn 1 key
    case $key in
        A) # Up arrow key
            ((selected--))
            if [ $selected -lt 0 ]; then
                selected=$((${#datasets[@]} - 1))
                scroll=$((${#datasets[@]} - max_display))
            elif [ $selected -lt $scroll ]; then
                scroll=$selected
            fi
            print_menu
            ;;
        B) # Down arrow key
            ((selected++))
            if [ $selected -ge ${#datasets[@]} ]; then
                selected=0
                scroll=0
            elif [ $selected -ge $(($scroll + max_display)) ]; then
                ((scroll++))
            fi
            print_menu
            ;;
        "") # Enter key
            clear
            choice="${datasets[$selected]}"
            if [ "$choice" == "Stop" ]; then
                break
            fi
            if ! echo "$selections" | grep -w -q "$choice"; then
                selections="${selections} ${choice}"
            fi
            # This is used for single dataset selection
            sel_group="${groupnames[$selected]}"
            print_menu
            ;;
    esac
done

# Exit if no dataset is selected
if [ "$selections" == "" ]; then
    echo "No dataset selected."
    exit 0
fi

# Remove starting space
selections="${selections# }"

# Count selections, one selection means the folder contains only one dataset
count=$(echo "$selections" | awk '{print NF}')

# Register folders
folder=""
first_folder_flag=1
while true; do
    if [ $first_folder_flag -eq 1 ]; then
        read -p "Enter the folder path you want to register/create for **${selections}**: " folder
    else
        read -p "Enter the next folder path you want to register/create for **${selections}** \
(press esc and enter to stop): " folder
        # Quit if input is esc
        if [[ $folder == *$'\x1b'* ]]; then
            break
        fi
    fi
    if [[ -z $folder ]]; then
        echo "Empty input. "
        continue
    fi
    cmd="readlink -f $folder"
    cmd="${cmd//\'/}"
    folder=`eval $cmd`
    if [ ! -d "${folder}" ]; then
        mkdir -p ${folder}
        if [[ $? -eq 0 ]]; then
            echo "Folder ${folder} is created."
        else
            echo "Failed to create folder: ${folder}."
            continue
        fi
    fi

    folder_owner=$(stat -c %U "$folder")
    if [ "$folder_owner" != "$user" ]; then
        echo "Folder $folder is owned by $folder_owner, not by you ($user). Please check with folder owner."
        echo "Registration failed."
        continue
    fi

    echo "Folder ${folder}:"
    if [ "$count" -eq 1 ]; then
        # Single dataset, group set to corresponding group and permission set to 750
        chmod 750 ${folder}
        echo "Permission set to 750"
        chgrp ${sel_group} ${folder}
        echo "User group set to ${sel_group}"
    else
        # Multiple datasets, group set to yeo_group and permission set to 700
        chmod 700 ${folder}
        echo "Permission set to 700"
        chgrp yeo_group ${folder}
        echo "User group set to yeo_group"
    fi

    if [ -f "${folder}/.reg_path" ]; then
        rm "${folder}/.reg_path"
    fi
    for sel_dataset in ${selections}; do
        echo "${sel_dataset},${folder}" >> "${user_csv}"
        echo "${sel_dataset},${folder}" >> "${folder}/.reg_path"
        echo "${sel_dataset}" >> "${options_file}"
    done
    echo "Do NOT delete this file" >> "${folder}/.reg_path"
    echo "${user_csv} updated."
    echo ""
    first_folder_flag=0
done


